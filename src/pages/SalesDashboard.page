<apex:page lightningStylesheets="true" controller="SalesDashboardRemoter">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>
        <style>
            html {
                font-family: Salesforce Sans;
            }

            body {
                background-image: url("{!$Site.BaseUrl}/_slds/images/themes/lightning_blue/lightning_blue_background.png");
                background-size: 100%;
                background-repeat: no-repeat;
                background-position: top;
                background-color: #B0C4DF;
                background-attachment: fixed;
            }

            #container {
                width: 96vw;
                max-width: 1500px;
                min-width: 320px;
                height: 96vh;
                min-height: 500px;
                border-radius: 3px;
                margin-left: auto;
                margin-right: auto;
                margin-top: 1vh;
                overflow-y: scroll;
            }

            #settings {
                position: sticky;
                top: 4px;
                width: 95.6vw;
                max-width: 1500px;
                height: auto;
                min-height: 50px;
                background-color: white;
                border-radius: 3px;
                margin-left: auto;
                margin-right: auto;
                overflow: scroll;
                border: 0.5px solid grey;
                display: grid;
                grid-template-columns: 195px 50px auto 335px;
                padding-left: 20px;
                padding-right: 20px;
                padding-top: 5px;
                font-size: 12px;
                z-index: 250;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
                -webkit-transition: opacity 0.5s;
                -webkit-transition-timing-function: linear;
                transition: opacity 0.5s;
                transition-timing-function: linear;
            }

            /*::-webkit-scrollbar {*/
                /*display: none;*/
            /*}*/

            /*!* width *!*/
            ::-webkit-scrollbar {
                display: none;
            }

            /*#settings > ::-webkit-scrollbar {*/
                /*display: none;*/
            /*}*/

            /*iframe > ::-webkit-scrollbar {*/
                /*display: none;*/
            /*}*/

            #cashFlowRowManager::-webkit-scrollbar {
                display: block;
                width: 10px;
                height: 10px;
            }

            #cashFlowRowManager::-webkit-scrollbar-track {
                background: #f1f1f1;
                opacity: 0.5;
            }

            #cashFlowRowManager::-webkit-scrollbar-thumb {
                background: #888;
                opacity: 0.5;
            }

            ::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

buil

            .typeBlock, .totalsBlock, .cashBlock  {
                width: 99%;
                border-radius: 5px;
                margin-left: 0.5%;
                margin-right: 0.5%;
                margin-bottom: 5px;
                display: grid;
                background-color: white;
                opacity: 1;
                position: relative;
            }

            .blockContainer {
                border: 0.5px solid grey;
                width: 100%;
                border-radius: 5px;
                margin-top: 20px;
                display: grid;
                background-color: white;
                opacity: 1;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
                height: auto;
                position: relative;
            }

            .typeBlock {
                grid-template-columns: 50% 50%;
                height: auto;
                min-height: 380px;
            }

            .blockOptions {
                display: grid;
                grid-template-columns: 40% 60%;
                height: auto;
                z-index: 50;
                background-color: white;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
                min-height: 36px;
            }

            .scroll {
                position: sticky;
                top: 0;
            }

            @media only screen and (max-width: 800px) {
                .main {
                    font-size: 18px !important;
                }
                .totalsBlock {
                    grid-template-columns: 100% !important;
                    height: 370px;
                }
                .typeLabel {
                    font-size: 14px !important;
                }
                #orOption, #dateSelect, #snapshots {
                    display: none !important;
                }
                .typeBlock {
                    grid-template-columns: 99%;
                    min-height: 600px;
                }
                .reportButton {
                    display: none;
                }
                #settings {
                    grid-template-columns: 99%;
                }
                .blockOptions {
                    grid-template-columns: 99%;
                }
                .keySelector {
                    margin-left: 3px;
                }
                .keyPointer {
                    font-size: 10px !important;
                }
                .keySelectorText {
                    padding-top: 3px;
                }
                .splitSelector {
                    position: relative;
                    margin-top: 3px;
                }
                #cashFlowReport {
                    display: none;
                }
                .imageIcon {
                    display: none;
                }
            }

            .totalsBlock{
                grid-template-columns: 50% 50%;
                min-height: 215px;
            }

            .totalsSubBlock {
                display: grid;
                grid-template-columns: 50% 50%;
                max-height: 125px;
            }

            .graphBlock {
                border: 0.5px #bfbfbf solid;
                margin: 4px;
                border-radius: 3px;
                opacity: 1 !important;
                background-color: white;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            }
            .typeLabel,
            .typeLabelLong {
                margin-top: 5px;
                margin-left: 20px;
                background-color: white;
                font-size: 18px;
                padding-left: 5px;
                padding-right: 5px;
                width: auto;
                display: flex;
            }

            .typeLabelLong {
                font-size: 24px;
                margin-top: 10px;
            }

            .negative {
                color: red;
            }

            .positive {
                color: green;
            }

            .neutral {
                color: grey;
            }

            .partial {
                color: orange;
            }

            .status {
                opacity: 0.5;
                z-index: 0;
                position: relative;
                display: inline;
            }

            .quoteStatus {
                color: white;
                border-radius: 3px;
                font-weight: bold;
                padding-left: 3px;
                padding-right: 3px;
                opacity: 0.5;
            }

            .complete {
                background-color: green;
            }

            .overdue {
                background-color: red;
            }

            .pending {
                background-color: #666666;
            }

            .valueBlock {
                border: 0.5px #bfbfbf solid;
                position: relative;
                justify-content: center;
                align-items: center;
            }

            .value {
                width: 100%;
                text-align: center;
                cursor: pointer;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
                margin-bottom: 15px;
            }

            .main {
                font-size: 28px;
                margin-top: 16px;
                font-weight: bold;
            }

            .graphHolder {
                position: relative;
                height: 98%;
                width: 98%;
                margin: 1%;
                padding: 1%;
            }

            .change {
                display: none;
                position: fixed;
                top: 5vh;
                bottom: 5vh;
                left: 8vw;
                right: 8vw;
                min-height: 450px;
                background-color: white;
                border: 0.5px solid grey;
                border-radius: 5px;
                z-index: 100;
                opacity: 1;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
                overflow-y: scroll;
            }

            .changeRowContainer {
                height: calc(98% - 70px);
                overflow-y: scroll;
            }

            fieldset {
                width: 96%;
                margin: 2%;
                border-radius: 5px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
                position:relative;
            }

            legend {
                font-size: 20px;
                padding: 5px;
            }

            .changeRow {
                display: grid;
                grid-template-columns: 7% 68% 25%;
                font-size: 16px;
                margin-bottom: 8px;
                text-align: left;
                cursor: pointer;
            }

            .changeRow:hover {
                background-color: #f6f6f6;
            }

            .negativeChange, .positiveChange {
                /*font-weight: bold;*/
                /*font-size: 20px;*/
                text-align: right;
            }

            .negativeChange {
                color: red;
            }

            .positiveChange {
                color: green;
            }

            .neutralChange {
                color: grey;
            }

            .changeRowTotal {
                position:absolute;
                right:10px;
                top:0px;
                font-size:20px;
                background-color:white;
                padding:5px;
                font-weight: bold;
            }

            .photo {
                border-radius: 50%;
                margin-top: 2px;
                margin-left: 5px;
                margin-right: 5px;
                margin-bottom: auto;
                z-index: 10;
                height: 44px;
            }

            .imageIcon {
                position: relative;
                background-color: #C0C0C0;
                color: white;
                font-weight: bold;
                font-size: 23px;
                border-radius: 50%;
                margin-top: 2px;
                margin-left: 5px;
                padding-top: 5px;
                text-align: center;
                vertical-align: middle;
                height: 44px;
                width: 44px;
            }

            /*NEW REPORT */
            .innerReport {
                border-radius: 5px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
                width: 98%;
                margin-left: 1%;
                margin-right: 1%;
                border: 1px #bfbfbf solid;
                margin-bottom: 5px;
            }

            .reportFields {
                position: sticky;
                position: -webkit-sticky;
                top:35px;
                width: 100%;
                border-top-left-radius: 5px;
                border-top-right-radius: 5px;
                padding-top: 4px;
                padding-bottom: 4px;
                background-color: #c8c4c9;
                font-size: 14px;
                z-index: 1;
            }

            .reportGrid {
                display: grid;
                grid-template-columns: 7% 4% 15% 13% 7% 7% 9% 9% 6% 9% 9% 5%;
            }

            .reportSummaryGrid {
                display: grid;
                grid-template-columns: 53% 9% 9% 6% 9% 9%;
            }

            .gpReportGrid {
                display: grid;
                grid-template-columns: 6% 4% 12% 10% 7% 7% 7% 9% 9% 6% 9% 9% 5%;
            }

            .gpReportSummaryGrid {
                display: grid;
                grid-template-columns: 53% 9% 9% 6% 9% 9%;
            }

            .childAdjustment, .parentAdjustment {
                grid-template-columns: 53% 9% 9% 6% 9% 9%;
                color: white;
                background-color: black;
                font-size: 12px;
                padding-top: 4px;
                padding-bottom: 2px;
                border-bottom: 1px solid #F5F5F5;
            }

            .childAdjustment {
                display: none;
            }

            .parentAdjustment {
                display: grid;
            }

            .reportMonth {
                font-size: 12px;
                font-weight: bold;
                width: 100%;
                background-color: #d5ddf3;
                padding-top: 4px;
                padding-bottom: 4px;
                position: sticky;
                top: 59px;
                z-index: 1;
            }

            .reportStage {
                font-size: 12px;
                font-weight: bold;
                color: dimgrey;
                width: 100%;
                background-color: #eaf0fb;
                padding-top: 4px;
                padding-bottom: 4px;
                cursor: pointer;
            }

            .reportTotals {
                position: sticky;
                top: 0;
                padding-top: 5px;
                padding-bottom: 5px;
                font-size: 12px;
                font-weight: bold;
                color: white;
                background-color: #666666;
                border-bottom-left-radius: 5px;
                border-bottom-right-radius: 5px;
            }

            .opexReportTotals {
                position: sticky;
                top: 0;
                padding-top: 5px;
                padding-bottom: 5px;
                font-size: 14.5px;
                font-weight: bold;
                color: white;
                background-color: #666666;
                display: grid;
                grid-template-columns: 53% 9% 9% 5% 9% 9%;
            }

            .opexRowTotals {
                color: white;
                background-color: #666666;
                padding-right: 3px;
            }

            .reportRow {
                font-size: 12px;
                padding-top: 4px;
                padding-bottom: 2px;
                border-bottom: 1px solid #F5F5F5;
                cursor: pointer;
            }

            .reportRow:hover {
                background-color: #efefef;
            }

            .unconfirmed {
                color: #666666;
                font-style: italic;
            }
            /*END NEW REPORT */

            /* NEW OPEX REPORT */
            .innerOpexReport {
                width: 98%;
                margin-left: 1%;
                margin-right: 1%;
            }

            .opexReportHolder {
                display: grid;
                grid-template-columns: 240px calc(100% - 355px) 115px;
                border-radius: 5px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
                border: 1px #bfbfbf solid;
                margin-bottom: 5px;
            }

            .opexReportColumnHolder {
                white-space: nowrap;
                position: relative;
                cursor: pointer;
            }

            .opexColumn {
                text-align: right;
                width: 115px;
                display: inline-block;
            }

            .opexReportDate {
                text-align: center;
            }

            .opexTopHeader {
                padding-left: 5px;
                background-color: #c8c4c9;
            }
            .opexGrouping {
                text-align: left;
                margin-top: 4px;
                margin-bottom: 8px;
                padding-bottom: 4px;
            }
            .left {
                border-top-left-radius: 4px;
                border-bottom-left-radius: 4px;
                margin-left: 3px;
                border-top: 0.5px solid lightgrey;
                border-bottom: 0.5px solid lightgrey;
                border-left: 0.5px solid lightgrey;
                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.05);
                cursor: pointer;
            }

            .left:hover > .fas {
                color: #666666;
            }

            .middle {
                border-top: 0.5px solid lightgrey;
                border-bottom: 0.5px solid lightgrey;
                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.05);
            }
            .right {
                border-top-right-radius: 4px;
                border-bottom-right-radius: 4px;
                border-top: 0.5px solid lightgrey;
                border-bottom: 0.5px solid lightgrey;
                border-right: 0.5px solid lightgrey;
                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.05);
                margin-right: 3px;
            }
            /* END NEW OPEX REPORT */

            .noSpill {
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .keySelector {
                font-size: 14px;
                display: flex;
                flex-direction: row;
                float: right;
                margin-top: 8px;
                margin-right: 8px;
                position: relative;
            }

            .splitSelector {
                font-size: 14px;
                display: flex;
                flex-direction: row;
                cursor: pointer;
                margin-right: 8px;
                position: relative;
                float: right;
            }

            .keyPointer {
                cursor: pointer;
                margin-left: 20px;
                display: grid;
                grid-template-columns: 19px auto;
            }

            .keySquare {
                height: 11px;
                width: 16px;
                margin-top: 5px;
            }

            .keySplit, .keySplitCategory {
                margin-top: 6px;
                margin-left: 10px;
                border-radius: 7px;
                background-color: #666666;
                color: white;
                padding-left: 3px;
                padding-right: 3px;
                display: flex;
                flex-direction: row;
            }

            .keySplit {
                opacity: 0.3;
            }

            .keySplit:hover {
                opacity: 1;
            }

            .keySplit:active {
                opacity: 1;
            }

            .deSelect {
                opacity: 0.2;
            }

            div.google-visualization-tooltip {
                pointer-events: none;
            }

            .stageSelect {
                border-radius: 5px;
            }

            .closeKey {
                color: lightgrey;
                cursor: pointer;
                padding-top: 3px;
            }

            .totalLabel {
                width: 100%;
                background-color: #e2e2e2;
                text-align: center;
                padding-top: 5px;
                font-size: 13px;
            }

            .button {
                background-color: #efefef;
                border-radius: 7px;
                border: 0.5px solid #dbdbdb;
                padding-left: 7px;
                padding-right: 7px;
                padding-top: 6px;
                margin-left: 5px;
                cursor: pointer;
                height: 33px;
                width: 33px;
                color:grey;
            }

            .reportButton {
                background-color: #efefef;
                border-radius: 7px;
                border: 0.5px solid #dbdbdb;
                padding-left: 7px;
                padding-right: 7px;
                margin-left: 5px;
                cursor: pointer;
                color:grey;
                height: 26px;
            }

            .snapshotButton {
                font-weight: bold;
            }

            .button:hover, .reportButton:hover, .cashflowButton:hover {
                background-color: #b8b8b8;
            }

            .reportButton:active, .cashflowButton:active {
                background-color: #dbdbdb;
            }

            .parent {
                font-size: 14px;
                background-color: #eeeeee;
            }

            .leftColumn {
                padding-left: 4px;
                height: 100%;
            }

            .leftColumnFixed {
                width: 300px;
                position: sticky;
                left: 0;
                background-color: white;
                z-index: 100;
                border-bottom: 0.5px solid #b7b7b7;
            }

            .mainHex {
                background-color: #000080;
            }

            .secondHex {
                background-color: #3262ce;
            }

            .thirdHex {
                background-color: #a7b0ce;
            }

            #dateSelect {
                display: flex;
            }
            .snapshotAlert {
                background-color: black;
                color: white;
                cursor: pointer;
                padding-left: 5px;
                padding-right: 5px;
                border-radius: 4px;
                display: none;
                width: 260px;
                height: 26.6px;
                margin-left: 10px;
            }

            .snapshotAlert:active {
                background-color: #666666;
            }

            .snapShotRotate {
                float: right;
                margin-top: 4px;
                -webkit-transition: all 0.5s ease-in-out;
                -moz-transition: all 0.5s ease-in-out;
                -o-transition: all 0.5s ease-in-out;
                transition: all 0.5s ease-in-out;
            }

            .rotate {
                transform:rotate(360deg);
                -webkit-transform:rotate(360deg);
                -moz-transform:rotate(360deg);
                -o-transform:rotate(360deg);
            }

            #settingsSwap {
                display: none;
                position: absolute;
                margin: 0;
                height: 100%;
                width: 100%;
                background-color: black;
                opacity: 0.5;
            }

            #snapshotRemoveButton {
                float: right;
                width: 50px;
                margin-top: 5px;
                margin-right: 40px;
                color: black;
            }

            .display {
                display: grid;
            }

            .fade {
                opacity: 0.3;
            }

            .adjustmentAlert {
                background-color: black;
                color: white;
                border-radius: 4px;
                text-align: center;
                font-weight: bold;
                margin-right: 5px;
                margin-left: 5px;
            }

            .cashFlowRow {
                display: grid;
                grid-template-columns: 16% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7% 7%;
                cursor: pointer;
                background-color: white;
            }

            .cashFlowDetailRow:hover {
                background-color: #e9e9e9;
            }

            .cashFlowDetailRow {
                border-bottom: 0.5px solid #eeeeee;
                padding-top: 2px;
                padding-bottom: 2px;
            }

            .cashFlowHeader {
                font-weight: bold;
                padding-top: 4px;
                padding-bottom: 4px;
                border-bottom: 0.5px solid #b7b7b7;
            }

            .cashFlowManagerHeader {
                font-weight: bold;
                background-color: white;
            }


            .flowHeaderTop {
                margin-top: 4px;
                padding-bottom: 4px;
                border-bottom: 0.5px solid #b7b7b7;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }

            .flowHeaderBottom {
                border-bottom-left-radius: 4px;
                border-bottom-right-radius: 4px;
            }

            .noValue {
                visibility: hidden;
            }

            .figure {
                text-align: right;
                padding-right: 4px;
            }

            .managerFigure {
                border-bottom: 0.5px solid #b7b7b7;
                height: 100%;
            }

            #cashFlowRowManager {
                display: none;
                position: relative;
                width: 98%;
                margin-left: 1%;
                margin-right: 1%;
                margin-bottom: 5px;
                background-color: white;
                border-radius: 4px;
                border: 1px solid #bdbdbd;
                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.05);
                z-index: 10000;
                overflow: scroll;
                -webkit-overflow-scrolling: touch;
                -ms-overflow-style: -ms-autohiding-scrollbar;
            }

            .cashFlowManagerRow {
                display: flex;
                flex-wrap: nowrap;
                min-height: 22px;
                width: 250%;
            }

            .weekColumn {
                width: 23.5vw;
                height: 100%;
            }

            .entryHolderContainer {
                height: 100%;
                width: 100%;
                overflow-y: visible;
                position: relative;
            }

            .entryHolder {
                background-color: #f3f3f3;
                height: 100%;
                min-height: 30px;
                border: 0.5px solid #aaaaaa;
                overflow-y: hidden;
            }

            .dateMini{
                font-size: 10px;
                padding-right: 5px;
                width: 100%;
                text-align: right;
            }

            #cashFlowTitle {
                margin-left: 3px;
                padding: 5px;
                font-size: 14px;
                font-weight: bold;
            }

            .cashFlowEntry {
                padding: 3px;
                display: grid;
                grid-template-columns: 73% 27%;
                border-radius: 3px;
                font-size: 11px;
                width: calc(100% - 4px);
                margin: 2px;
                cursor: pointer;
                border: 0.5px solid grey;
                box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.05), 0 3px 8px 0 rgba(0, 0, 0, 0.05);
                color: white;
            }

            .Quickbooks {
                background-color: darkgreen;
            }

            .Salesforce {
                background-color: #4542ff;
            }

            .SalesforceP {
                background-color: darkgrey;
            }

            .Custom {
                background-color: darkgoldenrod;
            }

            .Overheads {
                background-color: black;
            }

            .dropTarget {
                display: none;
                position: absolute;
                height: 100%;
                width: 100%;
                background-color: #c1c1c1;
                opacity: 0.5;
            }

            .dropCircle {
                opacity: 0.3;
                position: absolute;
                margin-top: 20%;
                margin-left: calc(50% - 45px);
                font-size: 90px;
            }

            .cashflowButton {
                position: absolute;
                right: 10px;
                margin: 5px;
                background-color: #efefef;
                border-radius: 7px;
                border: 0.5px solid #dbdbdb;
                padding-left: 7px;
                padding-right: 7px;
                cursor: pointer;
                color:grey;
            }

            .cashFlowManagerTitleBlock {
                height: 28px;
            }

            #cashFlowReport {
                max-height: 95vh;
                overflow-y: scroll;
            }

            .entryDetails {
                font-weight: normal;
                font-size: 11px;
                display: none;
            }

            .paidButton {
                color:black;
                background-color:white;
                border-radius: 3px;
                width:90px;
                padding-left:2px;
                font-weight:bold;
            }

            .paidButton:active {
                background-color: grey;
            }

            #quickbooksBudget {
                position: fixed;
                height: auto;
                width: 30vw;
                top: 10vh;
                left: 35vw;
                right: 35vw;
                background-color: white;
                border-radius: 5px;
                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
                border: 1px #bfbfbf solid;
                padding: 10px;
                z-index:100;
                text-align:center;
                font-size: 16px;

            }

            button {
                background-color: #efefef;
                border-radius: 7px;
                border: 0.5px solid #dbdbdb;
                padding: 5px;
                cursor: pointer;
            }

            #qbBudgetPending:after {
                content: ' .';
                animation: dots 3s steps(1, end) infinite;
            }
            @keyframes dots {
                0%, 12.5% {
                    opacity: 0;
                }
                25% {
                    opacity: 1;
                }
                37.5% {
                    text-shadow: .5em 0;
                }
                50% {
                    text-shadow: .5em 0, 1em 0;
                }
                62.5% {
                    text-shadow: .5em 0, 1em 0, 1.5em 0;
                }
                75% {
                    text-shadow: .5em 0, 1em 0, 1.5em 0, 2em 0;
                }
                87.5%, 100%{
                    text-shadow: .5em 0, 1em 0, 1.5em 0, 2em 0, 2.5em;
                }
            }

        </style>
    </head>

    <img width="100%" height="100%" class="screen" style="display:none;"/>
    <div id="container" onscroll="hideNav()">
        <div id="offset" style="position:relative;"></div>

        <div id="settings">
            <div id="settingsSwap" style="display: none;" ><div id="snapshotRemoveButton" class="button snapshotButton" onclick="closeSnapshot()">CLOSE</div></div>
            <div class="stageSelect">

                <select onchange="changeDates('preset', this.value)" id="datePicklist">
                    <option value="CURRENT FY">CURRENT FY</option>
                    <option value="PREVIOUS FY">PREVIOUS FY</option>
                    <option value="NEXT FY">NEXT FY</option>
                    <option value="PAST AND NEXT 6 MONTHS">PAST AND NEXT 6 MONTHS</option>
                    <option value="LAST 12 MONTHS">LAST 12 MONTHS</option>
                    <option value="NEXT 12 MONTHS">NEXT 12 MONTHS</option>
                    <option value="CUSTOM" disabled="true" hidden="true">CUSTOM</option>
                </select>

            </div>
            <div style="padding-top: 8px" id="orOption">- OR -</div>
            <div id="dateSelect" >
                <div style="padding-left: 5px; padding-top: 8px;padding-right: 3px;">FROM:</div>
                <div><input id="start" type="date" style="width: 150px;" min="2015-10-01" onkeyup="showGo()" onchange="showGo()"/></div>
                <div style="padding-left: 5px; padding-top: 8px;padding-right: 3px;">TO:</div>
                <div><input id="end" type="date" style="width: 150px;" onkeyup="showGo()" onchange="showGo()"/></div>
                <div id="button" class="button" style="display: none;" onclick="changeDates('datePicker')">GO</div>
                <div id="monthAlert" style="padding-left: 5px; padding-top: 8px;padding-right: 3px;font-size: 20px;color:red; display: none;"><i class="fas fa-exclamation-triangle"></i></div>
            </div>
            <div style="text-align:right;display: flex; visibility: hidden;" id="snapshots">
                <div style="padding-top:8px;padding-right: 3px;">How did this look: </div>
                <div><input id="snapshotDate" type="date" style="width: 150px;" onchange="showSnapshotGo()"/></div>
                <div id="snapshotButton" class="button" style="display: none;" onclick="getSnapshot()">GO</div>
            </div>
        </div>

        <div id="revenue" class="blockContainer" >
            <div class="blockOptions" id="revenueBlockOptions">
                <div class="typeLabel">
                    <div>REVENUE <span class="dateMarker">CURRENT FY</span></div>
                    <div class="reportButton reportUtil" onclick="buildRevenueReport(false)" id="revenueViewButton">VIEW REPORT</div>
                    <div class="reportButton reportUtil" onclick="downloadCSV()" ><i class="fas fa-file-alt" style="padding-top: 4px;"></i></div>
                    <div class="snapshotAlert past" id="revSnapshotAlert" onclick="swapSnapshot('revenue')">
                        <span id="revSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="revCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="revPastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div>
                    <div class="keySelector" id="revenueKeySelector">
                        <div id="revConfirmedSelector" class="keyPointer" onclick="toggleRevenue('revConfirmedSelector')">
                            <div class="keySquare mainHex"></div>
                            <div class="noSpill keySelectorText">Confirmed</div>
                        </div>
                        <div id="revWeightedSelector" class="keyPointer" onclick="toggleRevenue('revWeightedSelector')">
                            <div class="keySquare secondHex"></div>
                            <div class="noSpill keySelectorText">Weighted</div>
                        </div>
                        <div id="revPipelineSelector" class="keyPointer"  onclick="toggleRevenue('revPipelineSelector')">
                            <div class="keySquare thirdHex"></div>
                            <div class="noSpill keySelectorText">Pipeline</div>
                        </div>
                        <div id="revConfirmedSelector" class="keyPointer">
                            <div class="keySquare" style="background-color: darkolivegreen;"></div>
                            <div class="noSpill keySelectorText">Target</div>
                        </div>
                    </div>
                    <div class="splitSelector reportUtil" id="revenueSplitSelector" style="display: none;">
                        <div class="keySplit" id="invoiceSplitButton" onclick="showConfirmedRevenueSplit('invoiceSplit')">Invoice status</div>
                        <div class="keySelectorSub keySplitCategory" id="invoiceSplit" style="display:none;">
                            <div><i class="fa fa-times-circle closeKey" onclick="closeSplit('invoiceSplit')"></i></div>
                            <div id="revPaidSelector" class="keyPointer" >
                                <div class="keySquare " style="background-color: #40B359;"></div>
                                <div class="noSpill keySelectorText">Paid</div>
                            </div>
                            <div id="revInvoicedSelector" class="keyPointer" >
                                <div class="keySquare" style="background-color: #5565BE;"></div>
                                <div class="noSpill keySelectorText">Invoiced</div>
                            </div>
                            <div id="revUninvoicedSelector" class="keyPointer"  >
                                <div class="keySquare" style="background-color: #c0875a ;"></div>
                                <div class="noSpill keySelectorText">Awaiting invoice</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="typeBlock">
                <div class="graphBlock" id="graphSizer">
                    <div class="graphHolder" >
                        <div id="revenueBar" class="graph"></div>
                    </div>
                </div>
                <div class="graphBlock">
                    <div class="graphHolder" >
                        <div id="revenueLine" class="graph"></div>
                    </div>
                </div>
            </div>
            <div class="innerReport reportUtil" style="display:none;" id="revenueReport">
                <div class="reportFields reportGrid" id="revenueReportHeader">
                    <div class="noSpill"> &nbsp;AM/PM</div>
                    <div class="noSpill"> Job No.</div>
                    <div class="noSpill"> Name</div>
                    <div class="noSpill"> Account</div>
                    <div class="noSpill"> Start</div>
                    <div class="noSpill"> End</div>
                    <div class="noSpill"> Revenue</div>
                    <div class="noSpill"> Profit</div>
                    <div class="noSpill"> Margin</div>
                    <div class="noSpill"> Invoiced</div>
                    <div class="noSpill"> Paid</div>
                    <div class="noSpill"> Prob %</div>
                </div>
                <div id="revenueReportRows" ></div>
                <div class="reportTotals reportSummaryGrid">
                    <div style="font-size: 16px;">&nbsp;TOTAL </div>
                    <div id="reportRevTotal"></div>
                    <div id="reportGPTotal"></div>
                    <div id="reportMarginTotal"></div>
                    <div id="reportInvTotal"></div>
                    <div id="reportPaidTotal"></div>
                </div>
            </div>
        </div>

        <div id="profit" class="blockContainer">
            <div class="blockOptions" id="profitBlockOptions">
                <div class="typeLabel">
                    <div>GROSS PROFIT <span class="dateMarker">CURRENT FY</span></div>
                    <div class="reportButton reportUtil" onclick="buildProfitReport(false)" id="profitViewButton">VIEW REPORT</div>
                    <div class="reportButton reportUtil" onclick="downloadCSV()" ><i class="fas fa-file-alt" style="padding-top: 4px;"></i></div>
                    <div class="snapshotAlert past" id="gpSnapshotAlert" onclick="swapSnapshot('profit')">
                        <span id="gpSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="gpCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="gpPastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div>
                    <div class="keySelector">
                        <div id="gpConfirmedSelector" class="keyPointer" onclick="toggleGrossProfit('gpConfirmedSelector')">
                            <div class="keySquare mainHex"></div>
                            <div class="noSpill keySelectorText">Confirmed</div>
                        </div>
                        <div id="gpWeightedSelector" class="keyPointer" onclick="toggleGrossProfit('gpWeightedSelector')">
                            <div class="keySquare secondHex"></div>
                            <div class="noSpill keySelectorText">Weighted</div>
                        </div>
                        <div id="gpPipelineSelector" class="keyPointer"  onclick="toggleGrossProfit('gpPipelineSelector')">
                            <div class="keySquare thirdHex"></div>
                            <div class="noSpill keySelectorText">Pipeline</div>
                        </div>
                        <div class="keyPointer">
                            <div class="keySquare" style="background-color: #E2B42B;"></div>
                            <div class="noSpill keySelectorText">Operating cost</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="typeBlock">
                <div class="graphBlock" id="graphSizer">
                    <div class="graphHolder" >
                        <div id="profitBar" class="graph"></div>
                    </div>
                </div>
                <div class="graphBlock">
                    <div class="graphHolder" >
                        <div id="profitLine" class="graph"></div>
                    </div>
                </div>
            </div>
            <div class="innerReport reportUtil" style="display:none;" id="profitReport">
                <div class="reportFields gpReportGrid" id="profitReportHeader">
                    <div class="noSpill"> &nbsp;AM/PM</div>
                    <div class="noSpill"> Job No.</div>
                    <div class="noSpill"> Name</div>
                    <div class="noSpill"> Account</div>
                    <div class="noSpill"> Start</div>
                    <div class="noSpill"> End</div>
                    <div class="noSpill"> Rec Status</div>
                    <div class="noSpill"> Profit</div>
                    <div class="noSpill"> COS</div>
                    <div class="noSpill"> Margin</div>
                    <div class="noSpill"> Billed</div>
                    <div class="noSpill"> Paid</div>
                    <div class="noSpill"> Prob %</div>
                </div>
                <div id="profitReportRows" ></div>
                <div class="reportTotals gpReportSummaryGrid">
                    <div style="font-size: 16px;">&nbsp;TOTAL </div>
                    <div id="gpReportProfitTotal"></div>
                    <div id="gpReportCOSTotal"></div>
                    <div id="gpReportMarginTotal"></div>
                    <div id="gpReportBilledTotal"></div>
                    <div id="gpReportPaidTotal"></div>
                </div>
            </div>
        </div>

        <div id="opex" class="blockContainer">
            <div class="blockOptions">
                <div class="typeLabel">
                    <div>OPERATING COST <span class="dateMarker">CURRENT FY</span></div>
                    <div class="reportButton reportUtil" onclick="buildOpexReport()" id="opexViewButton">VIEW REPORT</div>
                    <div class="snapshotAlert past" id="opexSnapshotAlert" onclick="swapSnapshot('opex')">
                        <span id="opexSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="opexCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="opexPastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div>
                    <div class="keySelector" id="opexKeySelector" onclick="showBudgetOptions()">
                        <div id="opexConfirmedSelector" class="keyPointer" onclick="">
                            <div class="keySquare" style="background-color: #006600;"></div>
                            <div class="noSpill keySelectorText" id="closedOpex">Closed</div>
                        </div>
                        <div id="opexForecastSelector" class="keyPointer" >
                            <div class="keySquare" style="background-color: #64a16f;"></div>
                            <div class="noSpill keySelectorText" id="forecast">Forecast</div>
                        </div>
                        <div id="opexBudgetSelector" class="keyPointer"  onclick="">
                            <div class="keySquare" style="background-color: #84827d;"></div>
                            <div class="noSpill keySelectorText" id="budget">Budget</div>
                        </div>
                    </div>
                    <div class="splitSelector reportUtil" id="opexSplitSelector" style="display:none;">
                        <div class="keySplit" id="opexSplitButton" onclick="showOpexSplit()">Breakdown</div>
                        <div class="keySelectorSub keySplitCategory" id="opexSplit" style="display:none;">
                            <div><i class="fa fa-times-circle closeKey" onclick="closeOpexSplit()"></i></div>
                            <div class="keyPointer" >
                                <div class="keySquare" style="background-color: green;"></div>
                                <div class="noSpill keySelectorText">Payroll</div>
                            </div>
                            <div class="keyPointer" >
                                <div class="keySquare" style="background-color: blue;"></div>
                                <div class="noSpill keySelectorText">IT</div>
                            </div>
                            <div class="keyPointer"  >
                                <div class="keySquare" style="background-color: purple ;"></div>
                                <div class="noSpill keySelectorText">Bus Dev</div>
                            </div>
                            <div class="keyPointer"  >
                                <div class="keySquare" style="background-color: red ;"></div>
                                <div class="noSpill keySelectorText">Office</div>
                            </div>
                            <div class="keyPointer"  >
                                <div class="keySquare" style="background-color: orange ;"></div>
                                <div class="noSpill keySelectorText">Other</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="typeBlock">
                <div class="graphBlock" id="graphSizer">
                    <div class="graphHolder" >
                        <div id="opexBar" class="graph"></div>
                    </div>
                </div>
                <div class="graphBlock">
                    <div class="graphHolder" >
                        <div id="opexLine" class="graph"></div>
                    </div>
                </div>
            </div>
            <div class="innerOpexReport reportUtil" id="opexReport" style="display: none;">
                <div class="opexReportHolder">
                    <div id="opexCategories">
                        <div class="opexReportColumnHolder opexTopHeader" style="padding-left:5px;">CATEGORY</div>
                        <div id="Pa" class="opexGrouping left" style="padding-left:5px;"><div onclick="toggleParentGroupings('Pa')">Payroll <i id="Patoggle" class="fas fa-plus-circle" style="color:lightgray;"></i></div></div>
                        <div id="IT" class="opexGrouping left" style="padding-left:5px;"><div onclick="toggleParentGroupings('IT')">IT <i id="ITtoggle" class="fas fa-plus-circle" style="color:lightgray;"></i></div></div>
                        <div id="Bu" class="opexGrouping left" style="padding-left:5px;"><div onclick="toggleParentGroupings('Bu')">Bus Dev <i id="Butoggle" class="fas fa-plus-circle" style="color:lightgray;"></i></div></div>
                        <div id="Of" class="opexGrouping left" style="padding-left:5px;"><div onclick="toggleParentGroupings('Of')">Office <i id="Oftoggle" class="fas fa-plus-circle" style="color:lightgray;"></i></div></div>
                        <div id="Ot" class="opexGrouping left" style="padding-left:5px;"><div onclick="toggleParentGroupings('Ot')">Other <i id="Ottoggle" class="fas fa-plus-circle" style="color:lightgray;"></i></div></div>
                        <div class="left"><div style="padding:5px;" class="opexReportTotals">TOTAL</div></div>
                    </div>
                    <div style="overflow-x: hidden;">
                        <div style="width:auto; overflow-x: visible;">
                            <div style="overflow-x: scroll">
                                <div class="opexDataColumnHolder">
                                    <div class="opexReportColumnHolder opexTopHeader" id="opexDates"></div>
                                    <div id="PaFigure" class="opexGrouping middle"></div>
                                    <div id="ITFigure" class="opexGrouping middle"></div>
                                    <div id="BuFigure" class="opexGrouping middle"></div>
                                    <div id="OfFigure" class="opexGrouping middle"></div>
                                    <div id="OtFigure" class="opexGrouping middle"></div>
                                    <div id="opexTotalMonthFigures" class="middle"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div class="opexReportColumnHolder opexTopHeader" style="text-align: center">TOTAL</div>
                        <div id="PaTotal" class="opexGrouping opexRowTotals right" style="text-align: right;"></div>
                        <div id="ITTotal" class="opexGrouping opexRowTotals right" style="text-align: right;"></div>
                        <div id="BuTotal" class="opexGrouping opexRowTotals right" style="text-align: right;"></div>
                        <div id="OfTotal" class="opexGrouping opexRowTotals right" style="text-align: right;"></div>
                        <div id="OtTotal" class="opexGrouping opexRowTotals right" style="text-align: right;"></div>
                        <div id="opexGrandTotal" class="right"></div>
                    </div>
                </div>
            </div>
        </div>

        <div id="netProfit" class="blockContainer">
            <div class="blockOptions">
                <div class="typeLabel">
                    <div>NET PROFIT <span class="dateMarker">CURRENT FY</span></div>
                    <div class="snapshotAlert past" id="npSnapshotAlert" onclick="swapSnapshot('netProfit')">
                        <span id="npSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="npCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="npPastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div>
                    <div class="keySelector">
                        <div id="npConfirmedSelector" class="keyPointer" onclick="toggleNetProfit('npConfirmedSelector')">
                            <div class="keySquare mainHex"></div>
                            <div class="noSpill keySelectorText">Confirmed</div>
                        </div>
                        <div id="npWeightedSelector" class="keyPointer" onclick="toggleNetProfit('npWeightedSelector')">
                            <div class="keySquare secondHex"></div>
                            <div class="noSpill keySelectorText">Weighted</div>
                        </div>
                        <div id="npPipelineSelector" class="keyPointer"  onclick="toggleNetProfit('npPipelineSelector')">
                            <div class="keySquare thirdHex"></div>
                            <div class="noSpill keySelectorText">Pipeline</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="typeBlock">
                <div class="graphBlock" >
                    <div class="graphHolder" >
                        <div id="netProfitBar" class="graph"></div>
                    </div>
                </div>
                <div class="graphBlock">
                    <div class="graphHolder" >
                        <div id="netProfitLine" class="graph"></div>
                    </div>
                </div>
            </div>
        </div>

        <div id="totalValues" class="blockContainer">
            <div style="height:auto;position:relative;">
                <div class="typeLabel">
                    <div>TOTAL FIGURES <span class="dateMarker">CURRENT FY</span></div>
                    <div class="snapshotAlert past" id="totalsSnapshotAlert" onclick="swapSnapshot('totals')">
                        <span id="totalsSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="totalsCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="totalsPastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div class="totalsBlock">
                    <div class="totalsSubBlock">
                        <div class="graphBlock valueBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #211F30;">Confirmed revenue</div>
                            <div id="confirmedRevenue" class="value main " ></div>
                        </div>
                        <div class="graphBlock valueBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #40676e;">Confirmed gross profit</div>
                            <div id="confirmedProfit" class="value main" ></div>
                        </div>
                        <div class="graphBlock valueBlock changeBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #211F30;">Change last <span class="changeDays">7</span> days</div>
                            <div class="value main" id="revenueChangeTotal" onclick="showChange('revenueChange')"></div>
                        </div>
                        <div class="graphBlock valueBlock changeBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #40676e;">Change last <span class="changeDays">7</span> days</div>
                            <div class="value main" id="grossProfitChangeTotal" onclick="showChange('profitChange')"></div>
                        </div>
                    </div>
                    <div class="totalsSubBlock">
                        <div class="graphBlock valueBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #c58529;">Confirmed operating cost</div>
                            <div id="forecastOpex" class="value main"></div>
                        </div>
                        <div class="graphBlock valueBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #2173ac;">Confirmed net profit</div>
                            <div id="confirmedNetProfit" class="value main"></div>
                        </div>
                        <div class="graphBlock valueBlock changeBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #c58529;">Change last <span class="changeDays">7</span> days</div>
                            <div class="value main" id="opexChangeTotal" onclick="showChange('opexChange')"></div>
                        </div>
                        <div class="graphBlock valueBlock changeBlock">
                            <div class="totalLabel noSpill" style="border-bottom-color: #2173ac;">Change last <span class="changeDays">7</span> days</div>
                            <div class="value main" id="netProfitChangeTotal"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="blockContainer" id="cashflowBlock">
            <div class="blockOptions">
                <div class="typeLabel">
                    <div>CASH POSITION <span class="dateMarker">CURRENT FY</span></div>
                    <div class="snapshotAlert past" id="balanceSnapshotAlert" onclick="swapSnapshot('balance')">
                        <span id="balanceSnapshotText">AS AT <span class="snapshotDate"></span></span>
                        <span id="balanceCurrentText" style="display:none">CURRENT FIGURES</span>
                        <i id="balancePastRotate" class="fas fa-sync snapShotRotate"></i>
                    </div>
                </div>
                <div>
                    <div class="keySelector">
                        <div class="keyPointer" >
                            <div class="keySquare " style="background-color:black;"></div>
                            <div class="noSpill keySelectorText">Past</div>
                        </div>
                        <div class="keyPointer">
                            <div class="keySquare secondHex"></div>
                            <div class="noSpill keySelectorText">Confirmed</div>
                        </div>
                        <div class="keyPointer">
                            <div class="keySquare thirdHex"></div>
                            <div class="noSpill keySelectorText">Weighted</div>
                        </div>
                        <div class="keyPointer">
                            <div class="keySquare" style="background-color: green"></div>
                            <div class="noSpill keySelectorText">Predictive</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="cashBlock">
                <div class="graphBlock" >
                    <div class="graphHolder" >
                        <div id="cashFlowLine" class="graph"></div>
                    </div>
                </div>
            </div>
            <div class="innerReport" id="cashFlowReport">
                <div style="position:sticky; top:0;background-color: white;border-top-left-radius: 5px;border-top-right-radius: 5px;">
                    <div class="cashFlowManagerTitleBlock">
                        <div class="cashflowButton" onclick="toggleManager()">EDIT</div>
                    </div>
                    <div class="cashFlowRow flowHeaderTop" id="weekCommencing">
                        <div class="leftColumn">WEEK COMMENCING</div>
                    </div>
                    <div class="cashFlowRow cashFlowHeader" id="openingBalance">
                        <div class="leftColumn">OPENING BALANCE</div>
                    </div>
                </div>
                <div id="inflows"></div>
                <div class="cashFlowRow cashFlowHeader" id="totalInflows">
                    <div class="leftColumn">TOTAL INFLOWS</div>
                </div>
                <div id="outflows"></div>
                <div class="cashFlowRow cashFlowHeader" id="totalOutflows">
                    <div class="leftColumn">TOTAL OUTFLOWS</div>
                </div>
                <div class="cashFlowRow cashFlowHeader flowHeaderBottom" id="closingBalance">
                    <div class="leftColumn">CLOSING BALANCE</div>
                </div>
            </div>
            <div style="width:96vw;max-width: 1500px;">
                <div id="cashFlowRowManager">
                    <div style="position:sticky; top:0;left:0;background-color: white;z-index:200;">
                        <div class="cashFlowManagerTitleBlock">
                            <div class="cashflowButton" onclick="toggleManager()">DONE</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="changeHolders">
        <div id="revenueChange" class="change hide">
            <div class="typeLabelLong noSpill">
                <span class="noSpill">CONFIRMED REVENUE CHANGE <span class="dateMarker" id="xxx" style="font-weight:bold;">CURRENT FY</span> LAST 7 DAYS</span>
            </div>
            <div class="changeRowContainer" id="revenueChangeDays"></div>
        </div>

        <div id="profitChange" class="change hide">
            <div class="typeLabelLong">
                <span  class="noSpill">CONFRIMED GROSS PROFIT CHANGE <span class="dateMarker" style="font-weight:bold;">CURRENT FY</span> LAST 7 DAYS</span>
            </div>
            <div class="changeRowContainer" id="profitChangeDays"></div>
        </div>

        <div id="opexChange" class="change hide">
            <div class="typeLabelLong ">
                <span  class="noSpill">OPERATING COST CHANGE <span class="dateMarker" style="font-weight:bold;">CURRENT FY</span> LAST 7 DAYS</span>
            </div>
            <br/>
            <div class="changeRowContainer" id="opexChangeDays"></div>
        </div>
    </div>

    <div id="quickbooksBudget" class="hide" style="display:none;">
        <div class="typeLabel" style="margin-left: 0; display: block;">QUICKBOOKS SOURCE INFORMATION</div>
        <br/>
        <div>Select last closed month:</div>
        <select id="closedMonth" onchange="showUpdateOption()">
        </select>
        <br/>
        <br/>
        <div>Select forecast source:</div>
        <select id="forecastList" onchange="showUpdateOption()">
        </select>
        <br/>
        <br/>
        <div>Select budget source:</div>
        <select id="budgetList" onchange="showUpdateOption()">
        </select>
        <br/>
        <br/>
        <div><button id="qbBudgetButton" style="display: none;" onclick="updateBudgetForecasts()">UPDATE</button></div>
        <div id="qbBudgetPending" style="display: none;">Retrieving the latest data from Quickbooks online</div>
        <br/>
    </div>


    <div id="dimmer" class="hide" onclick="hideAll()"></div>

    <script>

        var today       = new Date();
        var yearText    = (today.getMonth() + 1 > 3) ? today.getFullYear() : today.getFullYear() -1;
        var startDate   = new Date(yearText, 3, 1);
        var endDate     = new Date(yearText + 1, 2, 31);

        document.getElementById('start').value  = getInputDate(startDate);
        document.getElementById('end').value    = getInputDate(endDate);
        document.getElementById('end').max      = (yearText + 2) + '-' + '03' + '-' + '31';

        var iterator;
        var revenueTotals;
        var revenueTotalsSnapshot;
        var revenueInvTotals;
        var revenueInvIterator;
        var revenueTypeTotals;
        var profitTotals;
        var profitTotalsSnapshot;
        var opexTotals;
        var opexTotalsSnapshot;
        var balanceTotals;
        var balanceIterator;
        var balanceTotalsSnapshot;
        var balanceIteratorSnapshot;

        var headlineTotals;
        var headlineTotalsSnapshot;
        var headlinePriorTotals;
        var headlinePriorTotalsSnapshot;

        var oppReportData;
        var opexReportData;
        var cashflowData;
        var cashflowManagerClose;

        var revenueReport       = document.getElementById('revenueReport').cloneNode(true);
        var profitReport        = document.getElementById('profitReport').cloneNode(true);
        var opexReport          = document.getElementById('opexReport').cloneNode(true);
        var cashFlowReport      = document.getElementById('cashFlowReport').cloneNode(true);
        var quickbooksBudget    = document.getElementById('quickbooksBudget').cloneNode(true);

        var mainHex     = '#000080';
        var secondHex   = '#3262ce';
        var thirdHex    = '#a7b0ce';

        var revenueReportLoaded      = false;
        var revenueReportVisible     = false;
        var profitReportLoaded       = false;
        var profitReportVisible      = false;
        var opexReportLoaded         = false;

        var snapshotDates;
        var isSnapshotEligible       = true;
        var snapshotLoaded           = false;
        var isRevSnapshot            = false;
        var isGPSnapshot             = false;
        var isOpexSnapshot           = false;
        var isNetProfitSnapshot      = false;
        var isHeadlineTotalsSnapshot = false;
        var isBalanceSnapshot        = false;

        var currentEntryType;

        doInit();
        getSnapshotDates();

        function doInit() {

            document.getElementById('revenueChangeDays').innerHTML  = '';
            document.getElementById('profitChangeDays').innerHTML   = '';
            document.getElementById('opexChangeDays').innerHTML     = '';
            document.getElementById('revenueChange').classList.remove('updated');
            document.getElementById('profitChange').classList.remove('updated');
            document.getElementById('opexChange').classList.remove('updated');
            document.getElementById('quickbooksBudget').classList.remove('updated');
            document.getElementById('revenueReport').innerHTML      = revenueReport.innerHTML;
            document.getElementById('opexReport').innerHTML         = opexReport.innerHTML;
            document.getElementById('cashFlowReport').innerHTML     = cashFlowReport.innerHTML;
            document.getElementById('quickbooksBudget').innerHTML   = quickbooksBudget.innerHTML;

            revenueReportLoaded     = false;
            profitReportLoaded      = false;
            opexReportLoaded        = false;

            // conceal cashflow if rights on the user profile are not present
            if (!{!$User.CashflowViewer__c}){
                document.getElementById('cashflowBlock').style.display = 'none';
                document.getElementById('opexViewButton').style.display = 'none';
            }

            getTotals();
            loadRevenue();

        }

        function getTotals() {
            Visualforce.remoting.timeout = 120000;
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getHeadlineTotals}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        headlineTotals = result;
                        drawHeadlines();
                    }
                }
            );
        }

        function drawHeadlines() {

            var source  = (isHeadlineTotalsSnapshot) ? headlineTotalsSnapshot : headlineTotals;

            document.getElementById('confirmedRevenue').innerHTML   = '£' + source[0].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
            document.getElementById('confirmedProfit').innerHTML    = '£' + source[1].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
            document.getElementById('forecastOpex').innerHTML       = '£' + source[2].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
            document.getElementById('opexGrandTotal').innerHTML     = '<div style="padding:5px;" class="opexReportTotals">' +
                '£' + source[2].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
            if (source[3] < 0) {
                document.getElementById('confirmedNetProfit').innerHTML     = '-£' + (source[3] * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                document.getElementById('confirmedNetProfit').style.color   = 'red';
            } else {
                document.getElementById('confirmedNetProfit').innerHTML     = '£' + source[3].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                document.getElementById('confirmedNetProfit').style.color   = 'black';
            }

        }

        function loadRevenue() {

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOppRevenueTotals}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        revenueTotals = result;
                        iterator = Object.keys(revenueTotals);
                        drawRevenueBar();
                        drawRevenueLine();
                        loadOpex();
                    }
                }
            );

        }

        function loadOpex() {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOperatingCosts}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        opexTotals = result;
                        drawOpexBar();
                        drawOpexLine();
                        loadProfit();
                        getBudgetOptions();
                    }
                }
            );
        }

        function loadProfit() {
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOppProfitTotals}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        profitTotals = result;
                        drawProfitBar();
                        drawProfitLine();
                        drawNetProfitBar();
                        drawNetProfitLine();
                        loadBalances();
                    }
                }
            );
        }

        function loadBalances() {

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getBalances}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        balanceTotals   = result;
                        balanceIterator = Object.keys(balanceTotals);
                        drawBalances();
                        loadAll();
                    }
                }
            );
        }

        function loadAll(){

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOppInvoiceTotals}',
                startDate,
                endDate,
                function(result, event){
                    if (event.status){
                        revenueInvTotals = result;
                        revenueInvIterator = Object.keys(revenueTotals);
                    }
                }
            );

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOppTypeTotals}',
                startDate,
                endDate,
                function(result, event){
                    if (event.status){
                        revenueTypeTotals = result;
                    }
                }
            );

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOppReportData}',
                startDate,
                endDate,
                function(result, event){
                    if (event.status){
                        oppReportData = result;
                    }
                }
            );

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getOpexReportData}',
                startDate,
                endDate,
                function(result, event){
                    if (event.status){
                        opexReportData = result;
                    }
                }
            );

            if (isSnapshotEligible) {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.SalesDashboardRemoter.getPriorTotals}',
                    endDate,
                    function (result, event) {
                        if (event.status) {

                            headlinePriorTotals = [result.TotalRevenue__c,
                                result.TotalGrossProfit__c,
                                result.TotalOpex__c,
                                result.TotalNetProfit__c];

                            drawChanges();
                        }
                    }
                );
            }

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getCashflowData}',

                function(result, event){
                    if (event.status){
                        cashflowData = result;
                        buildCashFlowManager();
                    }
                }
            );

        }

        function showChange(type) {

            if (!snapshotLoaded) {

                document.getElementById('dimmer').style.display = 'block';
                document.getElementById(type).style.display     = 'block';

                if (!document.getElementById(type).classList.contains('updated')) {

                    if (type === 'revenueChange') {

                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.SalesDashboardRemoter.getOppChanges}',
                            startDate,
                            endDate,
                            7,
                            headlineTotals[0],
                            handleOppRevenueChanges
                        );
                    } else if (type === 'profitChange') {
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.SalesDashboardRemoter.getOppProfitChanges}',
                            startDate,
                            endDate,
                            7,
                            headlineTotals[1],
                            handleOppProfitChanges
                        );
                    } else if (type === 'opexChange') {

                        // handleOpexChanges();
                    }
                }
            }
        }

        function handleOppRevenueChanges(result, event){
            if(event.status){

                var imageMap = (result['Images']) ? result['Images'][0] : {};
                var days = Object.keys(result);

                days.forEach(function(element) {

                    if (element !== 'Images') {
                        var dayTotalChange;

                        if (result[element].length > 0) {

                            var entries = Array.from(result[element]);
                            entries.sort(function(obj1, obj2){
                                if (new Date(obj1.CreatedDate) > new Date(obj2.CreatedDate))
                                    return -1;
                                if (new Date(obj1.CreatedDate) < new Date(obj2.CreatedDate))
                                    return 1;
                                else
                                    return 0;
                            });

                            var changes = '';
                            var totalColorClass;
                            var totalIconClass;

                            for (var x = 0; x < entries.length; x++){

                                var record     = entries[x];
                                var changeDate = new Date(record.CreatedDate);
                                var minutes = (changeDate.getMinutes() < 10) ? '0' + changeDate.getMinutes() : changeDate.getMinutes();
                                var changeTime = changeDate.getHours() + ':' + minutes + '  ' + changeDate.toLocaleDateString();
                                // var changeTime = changeDate.getHours() + ':' + minutes;
                                var movement;
                                var colorClass;
                                var iconClass;
                                var image =
                                    (!imageMap[record.CreatedBy.FirstName + record.CreatedBy.LastName]) ?
                                    '<div class="imageIcon" >' + record.CreatedBy.FirstName.substr(0, 1) + '' + record.CreatedBy.LastName.substr(0, 1) + '</div>' :
                                    '<img class="photo" src="' + imageMap[record.CreatedBy.FirstName + record.CreatedBy.LastName] + '"/>';

                                if (record.Month__c) {

                                    var monthText = record.Parent.EventMonthYear__c;
                                    var amount = record.Revenue__c * -1;

                                    if (amount < 0) {
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    } else {
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        // '<div>' + '<div class="imageIcon" >C</div>' + '</div>' +
                                        '<div>' + '<img class="photo" src="{!$Resource.CalderLogo}"/>' + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' a new ' + '<strong>Calder commission entry</strong> worth' +
                                        ' £' + amount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' was created ' +
                                        ' for ' + monthText +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' +
                                        amount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';

                                } else if (record.Parent && record.Field === 'Revenue__c') {

                                    var monthText = record.Parent.EventMonthYear__c;
                                    var oldAmount = (!record.OldValue) ? 0 : parseFloat(record.OldValue) * -1;
                                    var newAmount = parseFloat(record.NewValue) * -1;
                                    var difference;

                                    if (oldAmount < newAmount) {
                                        movement = ' increased ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        difference = newAmount - oldAmount;
                                    } else {
                                        movement = ' decreased ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        difference = oldAmount - newAmount;
                                    }

                                    changes += '<div class="changeRow">' +
                                        // '<div>' + '<div class="imageIcon" >C</div>' + '</div>' +
                                        '<div>' + '<img class="photo" src="{!$Resource.CalderLogo}"/>' + '</div>' +

                                        '<div>' +
                                        'At ' + changeTime + ' the ' + '<strong>Calder commission</strong>' + ' for  ' +
                                        monthText + ' was ' + movement + ' from £' + oldAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' to £' +
                                        newAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + difference.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';


                                } else if (record.Field === 'Event_end__c') {
                                    var oldDateText = new Date(record.OldValue).toString().substr(0, 15);
                                    var newDateText = new Date(record.NewValue).toString().substr(0, 15);
                                    var newDate = new Date(record.NewValue);

                                    if (newDate >= startDate && newDate <= endDate) {
                                        movement = ' (into this financial year) ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    } else {
                                        movement = ' (out of this financial year) ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + record.CreatedBy.FirstName +
                                        ' changed the ' + '<strong>event end</strong>' + ' on ' +
                                        record.Opportunity.Name + ' from ' + oldDateText + ' to ' + newDateText + movement +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + record.Opportunity.Amount_Calder__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';

                                } else if (record.Field === 'Amount') {

                                    console.log('field record is ' + record.OldValue);
                                    var calder = (record.Calder_Opportunity__c === true);
                                    var oldAmount = (!record.OldValue) ? 0 : (calder) ? parseFloat(record.OldValue * 0.9) : parseFloat(record.OldValue);
                                    var newAmount = (calder) ? parseFloat(record.NewValue * 0.9) : parseFloat(record.NewValue);
                                    var difference;

                                    if (oldAmount < newAmount) {
                                        movement = ' increased ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        difference = newAmount - oldAmount;
                                    } else {
                                        movement = ' decreased ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        difference = oldAmount - newAmount;
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + record.CreatedBy.FirstName + movement +
                                        ' the ' + '<strong>revenue</strong>' + ' on ' +
                                        record.Opportunity.Name + ' from £' + oldAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' to £' +
                                        newAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + difference.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';
                                } else if (record.Field === 'StageName') {

                                    var calder = (record.Calder_Opportunity__c === true);
                                    var amount = (calder) ? record.Opportunity.Amount * 0.9 : record.Opportunity.Amount;

                                    if (record.NewValue === 'Closed Won') {
                                        movement = ' Closed Won ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    } else if (record.OldValue === 'Closed Won') {
                                        movement = ' Closed Lost ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + record.CreatedBy.FirstName + ' set ' +
                                        record.Opportunity.Name + ' to <strong>' + movement + '</strong>' +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' +
                                        '£' + amount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' + iconClass +
                                        '</div>' +
                                        '</div>';
                                } else if (record.TotalRevenue__c !== null) {
                                    if (record.TotalRevenue__c > 0) {
                                        totalColorClass = 'positiveChange';
                                        totalIconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        dayTotalChange = '£' + record.TotalRevenue__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                    } else if (record.TotalRevenue__c < 0) {
                                        totalColorClass = 'negativeChange';
                                        totalIconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        dayTotalChange = '£' + (record.TotalRevenue__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                    } else {
                                            console.log('found a neutral');
                                        totalColorClass = 'neutralChange';
                                        totalIconClass = '<i class="fas fa-minus-circle"></i>';
                                        dayTotalChange = '£0';
                                    }
                                }
                            }

                            var period = (parseInt(element) === 0) ? 'TODAY' : (parseInt(element) === 1) ? 'YESTERDAY' : parseInt(element) + ' DAYS AGO';

                            document.getElementById('revenueChangeDays').innerHTML +=
                                '<fieldset id="opextoday" class="changeHolder">' +
                                '<legend>' + period + '</legend>' +
                                '<div class="changeRowTotal ' + totalColorClass + '">' +
                                dayTotalChange + ' ' + totalIconClass +
                                '</div>' +
                                changes +
                                '</fieldset>';
                        }
                    }

                });

                document.getElementById('revenueChange').classList.add('updated');

            }
        }

        function handleOppProfitChanges(result, event){

            if(event.status){

                var imageMap = (result['Images']) ? result['Images'][0] : {};
                var days = Object.keys(result);

                days.forEach(function(element){

                    if (element !== 'Images') {
                        var dayTotalChange;

                        if (result[element].length > 0) {

                            var entries = Array.from(result[element]);
                            entries.sort(function(obj1, obj2){
                                if (new Date(obj1.CreatedDate) > new Date(obj2.CreatedDate))
                                    return -1;
                                if (new Date(obj1.CreatedDate) < new Date(obj2.CreatedDate))
                                    return 1;
                                else
                                    return 0;
                            });

                            var changes = '';
                            var totalColorClass;
                            var totalIconClass;

                            for (var x = 0; x < result[element].length; x++) {
                                var record = result[element][x];
                                var changeDate = new Date(record.CreatedDate);
                                var minutes = (changeDate.getMinutes() < 10) ? '0' + changeDate.getMinutes() : changeDate.getMinutes();
                                var changeTime = changeDate.getHours() + ':' + minutes + '  ' + changeDate.toLocaleDateString();

                                // var changeTime = changeDate.getHours() + ':' + minutes;
                                var image =
                                    (!imageMap[record.CreatedBy.FirstName + record.CreatedBy.LastName]) ?
                                        '<div class="imageIcon" >' + record.CreatedBy.FirstName.substr(0, 1) + '' + record.CreatedBy.LastName.substr(0, 1) + '</div>' :
                                        '<img class="photo" src="' + imageMap[record.CreatedBy.FirstName + record.CreatedBy.LastName] + '"/>';
                                var movement;
                                var colorClass;
                                var iconClass;


                                if (record.Month__c) {

                                    console.log('in new commission record old val is ' + record.OldValue);


                                    var monthText = record.Parent.EventMonthYear__c;
                                    var amount = record.Profit__c * -1;

                                    if (amount < 0) {
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    } else {
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + '<img class="photo" src="{!$Resource.CalderLogo}"/>' + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' a new ' + '<strong>Calder commission entry</strong> worth' +
                                        ' £' + amount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' was created ' +
                                        ' for ' + monthText +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' +
                                        amount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';

                                } else if (record.Parent && record.Field === 'Profit__c') {

                                    console.log('in changed commission record old val is ' + record.OldValue + ' new ' +
                                    record.NewValued);

                                    var monthText = record.Parent.EventMonthYear__c;
                                    var oldAmount = (!record.OldValue) ? 0 : parseFloat(record.OldValue) * -1;
                                    var newAmount = parseFloat(record.NewValue * 0.9) * -1;
                                    var difference;

                                    if (oldAmount < newAmount) {
                                        movement = ' increased ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        difference = newAmount - oldAmount;
                                    } else {
                                        movement = ' decreased ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        difference = oldAmount - newAmount;
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + '<img class="photo" src="{!$Resource.CalderLogo}"/>' + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' the ' + '<strong>Calder commission</strong>' + ' for  ' +
                                        monthText + ' was ' + movement + ' from £' + oldAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' to £' +
                                        newAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + difference.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';


                                } else if (record.Field === 'Event_end__c') {

                                    console.log('in event end record old val is ' + record.OldValue);


                                    var oldDateText = new Date(record.OldValue).toString().substr(0, 15);
                                    var newDateText = new Date(record.NewValue).toString().substr(0, 15);
                                    var newDate = new Date(record.NewValue);

                                    if (newDate >= startDate && newDate <= endDate) {
                                        movement = ' (into this financial year) ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    } else {
                                        movement = ' (out of this financial year) ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + record.CreatedBy.FirstName +
                                        ' changed the ' + '<strong>event end</strong>' + ' on ' +
                                        record.Opportunity.Name + ' from ' + oldDateText + ' to ' + newDateText + movement +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + record.Opportunity.Gross_Profit_Field_History__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';

                                } else if (record.Field === 'Gross_Profit_Field_History__c' && record.OldValue != null) {

                                    var calder = (record.Calder_Opportunity__c === true);
                                    var createdBy = record.CreatedBy.FirstName;
                                    var concession = '';
                                    var oldAmount = (calder) ? parseFloat(record.OldValue * 0.9) : parseFloat(record.OldValue);
                                    var newAmount = (calder) ? parseFloat(record.NewValue * 0.9) : parseFloat(record.NewValue);
                                    var difference;

                                    if (oldAmount < newAmount) {
                                        movement = ' increased ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        difference = newAmount - oldAmount;
                                    } else {
                                        movement = ' decreased ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        difference = oldAmount - newAmount;
                                    }

                                    if (record.Expenses){
                                        createdBy = 'the Quickbooks integration';
                                        concession = ' (this happens either when a bill is added in Quickbooks after the' +
                                            ' project has already been set to Rec Complete,' +
                                            ' or when the COS in Quickbooks is higher than the Salesforce quote)';
                                        image = '<img class="photo" src="{!$Resource.QuickbooksLogoSmall}"/>';
                                    } else if (record.Revenue){
                                        console.log('rev' + Object.keys(record.Revenue));
                                        console.log('rev' + Object.values(record.Revenue));

                                        var revenueDifference = record.Revenue.NewValue - record.Revenue.OldValue;
                                        var revenueMovement = (revenueDifference < 0) ? 'decrease' : 'increase';
                                        var revenueMultiplier = (revenueDifference < 0) ? -1 : 1;

                                        if (revenueDifference === (newAmount - oldAmount)){
                                            concession = ' (this was caused purely by a ' + revenueMovement + ' in revenue)';
                                        } else {
                                            var cosDifference = (newAmount - oldAmount) - revenueDifference;
                                            var cosMovement = (cosDifference < 0) ? 'increase' : 'decrease';
                                            var cosMultiplier = (cosDifference < 0) ? -1 : 1;

                                            concession = ' (this was caused by a cost of sale ' + cosMovement + ' of ' +
                                                '£' + (cosDifference * cosMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                                ' and a revenue ' + revenueMovement + ' of £' +
                                                (revenueDifference * revenueMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ')';
                                        }
                                    } else {
                                        var cosMovement = (oldAmount < newAmount) ? 'increase' : 'decrease';
                                        concession = ' (this was caused purely by a ' + cosMovement + ' in cost of sales)';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + createdBy + movement +
                                        ' the ' + '<strong>profit</strong>' + ' on ' +
                                        record.Opportunity.Name + ' from £' + oldAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' to £' +
                                        newAmount.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + concession +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' + '£' + difference.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' +
                                        iconClass +
                                        '</div>' +
                                        '</div>';
                                } else if (record.Field === 'StageName') {

                                    console.log('found a record relating to stagename ' + Object.keys(record));//.Opportunity.Gross_Profit_Field_History__c);


                                    if (record.NewValue === 'Closed Won') {
                                        movement = ' Closed Won ';
                                        colorClass = 'positiveChange';
                                        iconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                    } else if (record.OldValue === 'Closed Won') {
                                        movement = ' Closed Lost ';
                                        colorClass = 'negativeChange';
                                        iconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                    }

                                    changes += '<div class="changeRow">' +
                                        '<div>' + image + '</div>' +
                                        '<div>' +
                                        'At ' + changeTime + ' ' + record.CreatedBy.FirstName + ' set ' +
                                        record.Opportunity.Name + ' to <strong>' + movement + '</strong>' +
                                        '</div>' +
                                        '<div class="' + colorClass + ' changeFigure">' +
                                        // '£' + record.Opportunity.Gross_Profit_Field_History__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' + iconClass +
                                        '£' + record.Opportunity.Gross_Profit_Field_History__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + ' ' + iconClass +
                                        '</div>' +
                                        '</div>';
                                } else if (record.TotalGrossProfit__c !== null) {
                                    if (record.TotalGrossProfit__c > 0) {
                                        totalColorClass = 'positiveChange';
                                        totalIconClass = '<i class="fas fa-arrow-circle-up"></i>';
                                        dayTotalChange = '£' + record.TotalGrossProfit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                    } else if (record.TotalGrossProfit__c < 0) {
                                        totalColorClass = 'negativeChange';
                                        totalIconClass = '<i class="fas fa-arrow-circle-down"></i>';
                                        dayTotalChange = '£' + (record.TotalGrossProfit__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                    } else {

                                        totalColorClass = 'neutralChange';
                                        totalIconClass = '<i class="fas fa-minus-circle"></i>';
                                        dayTotalChange = '£0';
                                    }
                                }
                            }

                            var period = (parseInt(element) === 0) ? 'TODAY' : (parseInt(element) === 1) ?
                                'YESTERDAY' : parseInt(element) + ' DAYS AGO';

                            // document.getElementById('profitChangeDays').innerHTML +=
                            //     '<fieldset id="opextoday" class="changeHolder">' +
                            //     '<legend>' + period + '</legend>' + changes + '</fieldset>'


                            document.getElementById('profitChangeDays').innerHTML +=
                                '<fieldset id="opextoday" class="changeHolder">' +
                                '<legend>' + period + '</legend>' +
                                '<div class="changeRowTotal ' + totalColorClass + '">' +
                                dayTotalChange + ' ' + totalIconClass +
                                '</div>' +
                                changes +
                                '</fieldset>';
                        }
                    }
                });

                document.getElementById('profitChange').classList.add('updated');
            }
        }

        function handleOpexChanges(){

            var container                 = document.getElementById('opextoday');
            container.style.display       = 'grid';
            container.style.gridTemplateColumns = '20% 60% 20%';


            container.innerHTML += '<div class="changeRow">' +
                '<div><img class="photo" src="https://lh3.googleusercontent.com/nAgCKBc1a-dFQ-g7XBzVg56hTNzRHjLQnd4Pnjzze4yn9ddxQ1L13u_Hz9ObxlcToVln8SZP7l5pdP7oDHQcZg=w1024"/></div>' +
                '<div>' +
                'At 10:25 the Cashflow Predictor updated our monthly <strong>IT Costs</strong> from September onwards ' +
                ' based on the spending patern' +
                '</div>' +
                '<div class="negativeChange changeFigure">£488.00' +
                '<i class="fas fa-arrow-circle-up"></i>' +
                '</div>' +
                '</div>';

            var container2                 = document.getElementById('opexyesterday');
            container2.style.display       = 'grid';
            container2.style.gridTemplateColumns = '20% 60% 20%';


            container2.innerHTML += '<div class="changeRow">' +
                '<div><img class="photo" src="https://seeklogo.com/images/Q/quick-books-logo-D276A46B9F-seeklogo.com.png" /></div>' +
                '<div>' +
                'At 14:30 the <strong>Freelancers</strong> spend in the Profit & Loss for January was changed from £4,080.00 to £4,780.00, ' +
                ' relating to the journal entry with Id <strong>1667</span>' +
                '</div>' +
                '<div class="negativeChange changeFigure">£700.00' +
                '<i class="fas fa-arrow-circle-up"></i>' +
                '</div>' +
                '</div>';



            document.getElementById('opexChange').classList.add('updated');
        }

        function handleNetProfitChanges(){

        }

        function hideAll() {
            var hiddenDivs = document.getElementsByClassName('hide');
            for (var x = 0; x < hiddenDivs.length; x++){
                hiddenDivs[x].style.display = 'none';
            }
        }

        /* GRAPH MANAGER */
        var graphSizer      = document.getElementById('graphSizer').offsetHeight * 0.9;

        window.addEventListener("resize", resizeCharts);

        function resizeCharts() {
            graphSizer      = document.getElementById('graphSizer').offsetHeight * 0.9;
            drawRevenueBar();
            drawRevenueLine();
            drawProfitBar();
            drawProfitLine();
            drawOpexBar();
            drawOpexLine();
            drawNetProfitBar();
            drawNetProfitLine();
            drawBalances();
        }

        var revConfirmed = true;
        var revWeighted  = true;
        var revPipeline  = true;

        function drawRevenueBar() {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'], 'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Confirmed');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Pipeline');

                    var source = (isRevSnapshot) ? revenueTotalsSnapshot : revenueTotals;

                    iterator.forEach(function (element) {
                        var elOne = (revConfirmed) ? source[element][0] : null;
                        var elTwo = (revWeighted) ? source[element][1] : null;
                        var elThree = (revPipeline) ? source[element][2] : null;

                        if (!revWeighted && revPipeline) {
                            elThree = source[element][1] + source[element][2];
                        }

                        data.addRow([element, elOne, elTwo, elThree]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: mainHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            1: {
                                color: secondHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            2: {
                                color: thirdHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            3: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5,
                                    }
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        2,
                        3, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('revenueBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    chart.draw(view, options);

                }
            });
        }

        function drawRevenueInvBar(source) {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Invoiced');
                    data.addColumn('number', 'Paid');
                    data.addColumn('number', 'Outstanding');

                    iterator.forEach(function (element) {
                        var elOne = source[element][0];
                        var elTwo = source[element][1];
                        var elThree = source[element][2];

                        data.addRow([element, elOne, elTwo, elThree]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: '#40B359',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            1: {
                                color: '#5565BE',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            2: {
                                color: '#c0875a',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            3: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5,
                                    }
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        2,
                        3, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('revenueBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    chart.draw(view, options);
                }
            });
        }

        function drawRevenueLine() {

            google.charts.load('current', {
                packages: ['corechart', 'line'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Date');
                    data.addColumn('number', 'Target');
                    data.addColumn('number', 'Pipeline');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Confirmed');

                    var source = (isRevSnapshot) ? revenueTotalsSnapshot : revenueTotals;

                    iterator.forEach(function (element) {

                        var elThree = (revPipeline) ? source[element][6] : null;
                        var elTwo = (revWeighted) ? source[element][5] : null;
                        var elOne = (revConfirmed) ? source[element][4] : null;

                        data.addRow([element, source[element][3], elThree, elTwo, elOne]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: '#556B2F',
                                format: '£#,###'
                            },
                            1: {
                                color: thirdHex,
                                format: '£#,###'
                            },
                            2: {
                                color: secondHex,
                                format: '£#,###'
                            },
                            3: {
                                color: mainHex,
                                format: '£#,###'
                            }
                        }
                    };

                    options = Object.assign(getLineOptions(), options);

                    var chart = new google.visualization.LineChart(document.getElementById('revenueLine'));
                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);

                    chart.draw(data, options);
                }
            });
        }

        var profitConfirmed = true;
        var profitWeighted  = true;
        var profitPipeline  = true;

        function drawProfitBar() {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Confirmed');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Pipeline');

                    var source = (isGPSnapshot) ? profitTotalsSnapshot : profitTotals;

                    iterator.forEach(function (element) {
                        var elOne = (profitConfirmed) ? source[element][0] : null;
                        var elTwo = (profitWeighted) ? source[element][1] : null;
                        var elThree = (profitPipeline) ? source[element][2] : null;

                        if (!profitWeighted && profitPipeline) {
                            elThree = source[element][1] + source[element][2];
                        }

                        data.addRow([element, elOne, elTwo, elThree]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: mainHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            1: {
                                color: secondHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            2: {
                                color: thirdHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none",
                            },
                            3: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 11,
                                    }
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        2,
                        3, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('profitBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    chart.draw(view, options);
                }
            });
        }

        function drawProfitLine() {

            google.charts.load('current', {
                packages: ['corechart', 'line'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Date');
                    data.addColumn('number', 'Operating cost');
                    data.addColumn('number', 'Pipeline');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Confirmed');

                    var source  = (isGPSnapshot) ? profitTotalsSnapshot : profitTotals;
                    var opex    = (isGPSnapshot) ? opexTotalsSnapshot : opexTotals;

                    iterator.forEach(function (element) {

                        var elOne = (profitConfirmed) ? source[element][4] : null;
                        var elTwo = (profitWeighted) ? source[element][5] : null;
                        var elThree = (profitPipeline) ? source[element][6] : null;

                        data.addRow([element, opex[element][4], elThree, elTwo, elOne]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: '#e2b42b',
                                format: '£#,###'
                            },
                            1: {
                                color: thirdHex,
                                format: '£#,###'
                            },
                            2: {
                                color: secondHex,
                                format: '£#,###'
                            },
                            3: {
                                color: mainHex,
                                format: '£#,###'
                            }
                        }
                    };

                    options = Object.assign(getLineOptions(), options);

                    var chart = new google.visualization.LineChart(document.getElementById('profitLine'));
                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    formatter.format(data, 4);

                    chart.draw(data, options);
                }
            });
        }

        function drawOpexBar() {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Confirmed Opex');
                    data.addColumn('number', 'Forecast Opex');

                    var source = (isOpexSnapshot) ? opexTotalsSnapshot : opexTotals;

                    iterator.forEach(function (element) {
                        var elOne = source[element][0];
                        var elTwo = source[element][1];

                        data.addRow([element, elOne, elTwo]);
                    });

                    var options = {
                        vAxis: {
                            format: 'short',
                            viewWindow: {
                                min: 0
                            }
                        },
                        series: {
                            0: {
                                color: '#006600',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            1: {
                                color: '#64a16f',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            2: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5
                                    }
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        // 2,
                        2, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('opexBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    // formatter.format(data, 3);
                    chart.draw(view, options);
                }
            });
        }

        function drawOpexBreakdownBar() {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'],'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Payroll');
                    data.addColumn('number', 'IT');
                    data.addColumn('number', 'Bus Dev');
                    data.addColumn('number', 'Office');
                    data.addColumn('number', 'Other');

                    iterator.forEach(function (element) {
                        var elOne = opexTotals[element][6];
                        var elTwo = opexTotals[element][7];
                        var elThree = opexTotals[element][8];
                        var elFour = opexTotals[element][9];
                        var elFive = opexTotals[element][10];

                        data.addRow([element, elOne, elTwo, elThree, elFour, elFive]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: 'green',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            1: {
                                color: 'blue',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            2: {
                                color: 'purple',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            3: {
                                color: 'red',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            4: {
                                color: 'orange',
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            5: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5
                                    }
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        2,
                        3,
                        4,
                        5, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3) +
                                    dt.getValue(row, 4) + dt.getValue(row, 5)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('opexBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    chart.draw(view, options);
                }
            });
        }

        function drawOpexLine() {

            google.charts.load('current', {
                packages: ['corechart', 'line'], 'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Date');
                    data.addColumn('number', 'Budget');
                    data.addColumn('number', 'Operating cost');

                    var source = (isOpexSnapshot) ? opexTotalsSnapshot : opexTotals;

                    iterator.forEach(function (element) {
                        var elOne = source[element][5];
                        var elTwo = source[element][4];

                        data.addRow([element, elOne, elTwo]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: '#84827d',
                                format: '£#,###'
                            },
                            1: {
                                color: '#006600',
                                format: '£#,###'
                            }
                        }
                    };

                    options = Object.assign(getLineOptions(), options);

                    var chart = new google.visualization.LineChart(document.getElementById('opexLine'));
                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    chart.draw(data, options);
                }
            });
        }

        var netProfitConfirmed = true;
        var netProfitWeighted  = true;
        var netProfitPipeline  = true;

        function drawNetProfitBar() {

            google.charts.load('current', {
                'packages': ['corechart', 'bar'], 'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Amount');
                    data.addColumn('number', 'Confirmed');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Pipeline');

                    var source  = (isNetProfitSnapshot) ? profitTotalsSnapshot : profitTotals;
                    var opex    = (isNetProfitSnapshot) ? opexTotalsSnapshot : opexTotals;

                    iterator.forEach(function (element) {
                        var elOne = (netProfitConfirmed) ? source[element][0] - (opex[element][0] + opex[element][1]) : null;
                        var elTwo = (netProfitWeighted) ? source[element][1] : null;
                        var elThree = (netProfitPipeline) ? source[element][2] : null;

                        if (!netProfitWeighted && netProfitPipeline) {
                            elThree = source[element][1] + source[element][2];
                        }
                        data.addRow([element, elOne, elTwo, elThree]);

                    });

                    var options = {
                        series: {
                            0: {
                                color: mainHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            1: {
                                color: secondHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            2: {
                                color: thirdHex,
                                format: '£#,###',
                                enableInteractivity: false,
                                tooltip: "none"
                            },
                            3: {
                                color: "transparent",
                                enableInteractivity: true,
                                tooltip: "none",
                                annotations: {
                                    stem: {
                                        color: "transparent",
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 11,
                                    },
                                    className: 'annotation'
                                }
                            }
                        }
                    };

                    options = Object.assign(getBarOptions(), options);

                    var view = new google.visualization.DataView(data);
                    view.setColumns([0,
                        1,
                        2,
                        3, {
                            calc: function (dt, row) {
                                return 0;
                            },
                            label: "Total",
                            type: "number",
                        },
                        {
                            calc: function (dt, row) {
                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                            },
                            type: "string",
                            role: "annotation"
                        }
                    ]);

                    var chart = new google.visualization.ColumnChart(document.getElementById('netProfitBar'));

                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    chart.draw(view, options);
                }
            });
        }

        function drawNetProfitLine() {

            google.charts.load('current', {
                packages: ['corechart', 'line'], 'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Date');
                    data.addColumn('number', 'Pipeline');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Confirmed');

                    var source  = (isNetProfitSnapshot) ? profitTotalsSnapshot : profitTotals;
                    var opex    = (isNetProfitSnapshot) ? opexTotalsSnapshot : opexTotals;

                    iterator.forEach(function (element) {
                        var elOne = (netProfitConfirmed) ? source[element][4] - opex[element][4] : null;
                        var elTwo = (netProfitWeighted) ? source[element][5] - opex[element][4] : null;
                        var elThree = (netProfitPipeline) ? source[element][6] - opex[element][4] : null;

                        data.addRow([element, elThree, elTwo, elOne]);
                    });

                    var options = {
                        series: {
                            0: {
                                color: thirdHex,
                                format: '£#,###'
                            },
                            1: {
                                color: secondHex,
                                format: '£#,###'
                            },
                            2: {
                                color: mainHex,
                                format: '£#,###'
                            }
                        },
                    };

                    options = Object.assign(getLineOptions(), options);

                    var chart = new google.visualization.LineChart(document.getElementById('netProfitLine'));
                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);

                    chart.draw(data, options);
                }
            });
        }

        function toggleRevenue(Id){

            var category =  document.getElementById(Id);

            if (!category.classList.contains('deSelect')){

                if (Id === 'revConfirmedSelector' && !(!revWeighted && !revPipeline)){
                    category.classList.add('deSelect');
                    revConfirmed = false;
                    drawRevenueBar();
                    drawRevenueLine();
                } else if (Id === 'revWeightedSelector' && !(!revConfirmed && !revPipeline)){
                    category.classList.add('deSelect');
                    revWeighted = false;
                    drawRevenueBar();
                    drawRevenueLine();
                } else if (Id === 'revPipelineSelector' && !(!revConfirmed && !revWeighted)){
                    category.classList.add('deSelect');
                    revPipeline = false;
                    drawRevenueBar();
                    drawRevenueLine();
                }

            } else {
                category.classList.remove('deSelect');

                if (Id === 'revConfirmedSelector'){
                    revConfirmed = true;
                } else if (Id === 'revWeightedSelector'){
                    revWeighted = true;
                } else if (Id === 'revPipelineSelector'){
                    revPipeline = true;
                }

                drawRevenueBar();
                drawRevenueLine();

            }

            // PREVENT BREAKDOWN OPTION APPEARING IF USING SNAPSHOT
            if (!revWeighted && !revPipeline && !snapshotLoaded){

                document.getElementById('revenueSplitSelector').style.display   = 'flex';
                document.getElementById('invoiceSplitButton').style.display     = 'flex';
                var selectors = document.getElementsByClassName('keySelectorSub');
                for (var x = 0; x < selectors.length; x++){
                    selectors[x].style.display = 'none';
                }

            } else {
                document.getElementById('revenueSplitSelector').style.display = 'none';
            }

            if (revenueReportVisible){
                document.getElementById('revenueReport').innerHTML      = revenueReport.innerHTML;
                revenueReportLoaded = false;
                buildRevenueReport(true);
            }

        }

        function toggleGrossProfit(Id){

            var category =  document.getElementById(Id);

            if (!category.classList.contains('deSelect')){
                if (Id === 'gpConfirmedSelector' && !(!profitWeighted && !profitPipeline)){
                    category.classList.add('deSelect');
                    profitConfirmed = false;
                    drawProfitBar();
                    drawProfitLine();
                } else if (Id === 'gpWeightedSelector' && !(!profitConfirmed && !profitPipeline)){
                    category.classList.add('deSelect');
                    profitWeighted = false;
                    drawProfitBar();
                    drawProfitLine();
                } else if (Id === 'gpPipelineSelector' && !(!profitConfirmed && !profitWeighted)){
                    category.classList.add('deSelect');
                    profitPipeline = false;
                    drawProfitBar();
                    drawProfitLine();
                }
            } else {
                category.classList.remove('deSelect');
                if (Id === 'gpConfirmedSelector'){
                    profitConfirmed = true;
                } else if (Id === 'gpWeightedSelector'){
                    profitWeighted = true;
                } else if (Id === 'gpPipelineSelector'){
                    profitPipeline = true;
                }

                drawProfitBar();
                drawProfitLine();
            }

            if (profitReportVisible){
                document.getElementById('profitReport').innerHTML  = profitReport.innerHTML;
                profitReportLoaded = false;
                buildProfitReport(true);
            }
        }

        function toggleNetProfit(Id){

            var category =  document.getElementById(Id);

            if (!category.classList.contains('deSelect')){
                if (Id === 'npConfirmedSelector' && !(!netProfitWeighted && !netProfitPipeline)){
                    category.classList.add('deSelect');
                    netProfitConfirmed = false;
                    drawNetProfitBar();
                    drawNetProfitLine();
                } else if (Id === 'npWeightedSelector' && !(!netProfitConfirmed && !netProfitPipeline)){
                    category.classList.add('deSelect');
                    netProfitWeighted = false;
                    drawNetProfitBar();
                    drawNetProfitLine();
                } else if (Id === 'npPipelineSelector' && !(!netProfitConfirmed && !netProfitWeighted)){
                    category.classList.add('deSelect');
                    netProfitPipeline = false;
                    drawNetProfitBar();
                    drawNetProfitLine();
                }
            } else {
                category.classList.remove('deSelect');
                if (Id === 'npConfirmedSelector'){
                    netProfitConfirmed = true;
                } else if (Id === 'npWeightedSelector'){
                    netProfitWeighted = true;
                } else if (Id === 'npPipelineSelector'){
                    netProfitPipeline = true;
                }
                drawNetProfitBar();
                drawNetProfitLine();
            }

            // reset profit report
            document.getElementById('profitReport').style.display  = 'none';
            document.getElementById('profitReport').innerHTML      = revenueReport.innerHTML;
            document.getElementById('profitViewButton').innerHTML  = 'VIEW REPORT';
            revenueReportLoaded = false;
        }

        function showConfirmedRevenueSplit(Id){
            document.getElementById(Id).style.display                   = 'flex';
            document.getElementById('invoiceSplitButton').style.display = 'none';
            document.getElementById('revenueKeySelector').style.display = 'none';
            drawRevenueInvBar(revenueInvTotals);
        }

        function closeSplit(Id){
            document.getElementById(Id).style.display                   = 'none';
            document.getElementById(Id + 'Button').style.display        = 'flex';
            document.getElementById('revenueKeySelector').style.display = 'flex';
            drawRevenueBar();
        }

        function showOpexSplit(){
            document.getElementById('opexSplit').style.display          = 'flex';
            document.getElementById('opexSplitButton').style.display    = 'none';
            document.getElementById('opexKeySelector').style.display    = 'none';
            drawOpexBreakdownBar();
        }

        function closeOpexSplit(){
            document.getElementById('opexSplit').style.display          = 'none';
            document.getElementById('opexSplitButton').style.display    = 'flex';
            document.getElementById('opexKeySelector').style.display    = 'flex';
            drawOpexBar();
        }

        function hideNav(){

            var scroller = document.getElementById('container');

            if (scroller.scrollTop >= 140){
                document.getElementById('settings').style.opacity       = '0';
                document.getElementById('settings').style.zIndex        = -100;
                document.getElementById('settingsSwap').style.opacity   = '0';
                document.getElementById('settingsSwap').style.zIndex    = -100;

            } else {
                document.getElementById('settings').style.opacity       = '1';
                document.getElementById('settings').style.zIndex        = 100;
                document.getElementById('settingsSwap').style.opacity   = '0.5';
                document.getElementById('settingsSwap').style.zIndex    = 100;

            }
        }

        function drawBalances() {

            google.charts.load('current', {
                packages: ['corechart', 'line'], 'callback': function () {

                    var data = new google.visualization.DataTable();
                    data.addColumn('string', 'Date');
                    data.addColumn('number', 'Predictive');
                    data.addColumn('number', 'Weighted');
                    data.addColumn('number', 'Past');
                    data.addColumn('number', 'Confirmed');

                    var iterator = (isBalanceSnapshot) ? balanceIteratorSnapshot : balanceIterator;
                    var balances = (isBalanceSnapshot) ? balanceTotalsSnapshot : balanceTotals;

                    iterator.forEach(function (element) {

                        var elOne   = (balances[element][1] === 0) ? null : balances[element][1];
                        var elTwo   = (balances[element][2] === 0) ? null : balances[element][2];
                        var elThree = (balances[element][3] === 0) ? null : balances[element][3];
                        var elFour  = (balances[element][4] === 0) ? null : balances[element][4];

                        data.addRow([balances[element][0], elFour, elThree, elOne, elTwo]);

                    });

                    var options = {
                        fontName: 'Salesforce Sans',
                        fontSize: 13,
                        height: graphSizer,
                        width: '50%',
                        vAxis: {
                            format: 'short',
                            viewWindow: {
                                min: -200000
                            }
                        },
                        hAxis: {
                            slantedText: true,
                            slantedTextAngle: 30,
                            gridlines: {
                                color: 'transparent'
                            },
                            format: 'MMM d',
                            height: '30px'
                        },
                        chartArea: {
                            width: '93%',
                            height: '80%',
                            right: 5,
                            top: 5
                        },
                        legend: {
                            position: 'none',
                            bold: true,
                            alignment: 'center',
                            fontSize: 8,
                        },
                        series: {
                            0: {
                                color: 'green',
                                format: '£#,###'
                            },
                            1: {
                                color: thirdHex,
                                format: '£#,###'
                            },
                            2: {
                                color: 'black',
                                format: '£#,###'
                            },
                            3: {
                                color: secondHex,
                                format: '£#,###'
                            }
                        },
                        animation: {
                            duration: 500,
                            easing: 'inAndOut',
                            startup: true
                        }
                    };

                    var chart = new google.visualization.LineChart(document.getElementById('cashFlowLine'));
                    var formatter = new google.visualization.NumberFormat({
                        prefix: '£'
                    });
                    formatter.format(data, 1);
                    formatter.format(data, 2);
                    formatter.format(data, 3);
                    formatter.format(data, 4);

                    chart.draw(data, options);
                }
            });
        }

        function changeDates(type, val){

            document.getElementById('button').style.display         = 'none';
            document.getElementById('snapshotButton').style.display = 'none';
            document.getElementById('snapshots').style.visibility   = 'hidden';

            var markers = document.getElementsByClassName('dateMarker');

            // reset revenue report
            document.getElementById('revenueReport').style.display  = 'none';
            document.getElementById('revenueReport').innerHTML      = revenueReport.innerHTML;
            document.getElementById("revenueViewButton").innerHTML  = 'VIEW REPORT';

            // reset revenue report
            document.getElementById('profitReport').style.display  = 'none';
            document.getElementById('profitReport').innerHTML      = profitReport.innerHTML;
            document.getElementById("profitViewButton").innerHTML  = 'VIEW REPORT';

            // reset opex report
            document.getElementById('opexReport').style.display     = 'none';
            document.getElementById('opexReport').innerHTML         = opexReport.innerHTML;
            document.getElementById("opexViewButton").innerHTML     = 'VIEW REPORT';

            var subSelectors = document.getElementsByClassName('keySelectorSub');
            for (var x = 0; x < subSelectors.length; x++){
                subSelectors[x].style.display = 'none';
            }

            var keySelectors = document.getElementsByClassName('keySelector');
            for (var x = 0; x < keySelectors.length; x++){
                keySelectors[x].style.display = 'flex';
            }

            if (type === 'preset') {

                document.getElementById('monthAlert').style.display = 'none';

                var reference = today;

                if (val === 'CURRENT FY'){
                    startDate   = new Date(yearText, 3, 1);
                    endDate     = new Date(yearText + 1, 2, 31);
                    helper.hideChanges(false);
                } else if (val === 'NEXT FY'){
                    startDate   = new Date(yearText + 1, 3, 1);
                    endDate     = new Date(yearText + 2, 2, 31);
                    helper.hideChanges(false);
                } else if (val === 'PREVIOUS FY'){
                    startDate   = new Date(yearText - 1, 3, 1);
                    endDate     = new Date(yearText, 2, 31);
                    helper.hideChanges(false);
                } else if (val === 'PAST AND NEXT 6 MONTHS'){
                    startDate   = new Date(reference.getFullYear(), reference.getMonth() -6, 1);
                    endDate     = new Date(reference.getFullYear(), reference.getMonth() +6, 0);
                    helper.hideChanges(true);
                } else if (val === 'LAST 12 MONTHS'){
                    startDate   = new Date(reference.getFullYear(), reference.getMonth() -12, 1);
                    endDate     = new Date(reference.getFullYear(), reference.getMonth(), 0);
                    helper.hideChanges(true);
                } else if (val === 'NEXT 12 MONTHS'){
                    startDate   = new Date(reference.getFullYear(), reference.getMonth(), 1);
                    endDate     = new Date(reference.getFullYear(), reference.getMonth() + 11, 0);
                    helper.hideChanges(true);
                }

                for (var x = 0; x < markers.length; x++) {
                    markers[x].innerHTML = val;
                }

                document.getElementById('start').value  = getInputDate(startDate);
                document.getElementById('end').value    = getInputDate(endDate);

                doInit();

            } else if (type === 'datePicker'){

                helper.hideChanges(true);

                document.getElementById('snapshots').style.visibility = 'hidden';

                startDate   = new Date(document.getElementById('start').value);
                endDate     = new Date(document.getElementById('end').value);

                document.getElementById('datePicklist').value = 'CUSTOM';

                for (var x = 0; x < markers.length; x++) {
                    markers[x].innerHTML = startDate.getDate() +  ' ' + helper.getMonthText(startDate.getMonth()) + ' ' +
                        startDate.getFullYear() + ' - ' + endDate.getDate() +  ' ' +
                        helper.getMonthText(endDate.getMonth()) + ' ' + endDate.getFullYear();
                }

                if ((startDate.getDate() !== 1) || (endDate.getDate() !== new Date(startDate.getFullYear(), startDate.getMonth(), 0).getDate())){
                    document.getElementById('monthAlert').style.display = 'block';
                } else {
                    document.getElementById('monthAlert').style.display = 'none';
                }

                doInit();

            }
        }

        function showGo(){
            var date1 = document.getElementById('start').value;
            var date2 = document.getElementById('end').value;

            if (date1 == '' || date2 == ''){
                document.getElementById('button').style.display = 'none';
            } else {
                document.getElementById('button').style.display = 'block';
                document.getElementById('snapshots').style.visibility = 'hidden';
            }
        }

        function getInputDate(dateVal){

            var day         = ("0" + dateVal.getDate()).slice(-2);
            var month       = ("0" + (dateVal.getMonth() + 1)).slice(-2);
            var inputDate   = dateVal.getFullYear()+"-"+(month)+"-"+(day) ;

            return inputDate;
        }

        function getSnapshotDates(){

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getSnapshots}',
                endDate,
                function(result, event){
                    if (event.status){
                        snapshotDates = result;
                        if (snapshotDates.length > 0){

                            document.getElementById('snapshots').style.visibility = 'visible';
                            document.getElementById('snapshotDate').value   = null;
                            document.getElementById('snapshotDate').min     = getInputDate(new Date(snapshotDates[0]));
                            document.getElementById('snapshotDate').max     = getInputDate(new Date(snapshotDates[snapshotDates.length -1]));
                        }
                    }
                }
            );
        }

        function showSnapshotGo(){
            document.getElementById('snapshotButton').style.display = 'block';
        }

        function getBarOptions(){

            return {
                fontName: 'Salesforce Sans',
                fontSize: 13,
                height: graphSizer,
                isStacked: true,
                hAxis: {
                    format: 'MMM d',
                    height: '30px',
                    slantedText: true,
                    slantedTextAngle: 30
                },
                vAxis: {
                    format: 'short'
                },
                chartArea: {
                    width: '90%',
                    height: '80%',
                    right: 5,
                    top: 5
                },
                legend: {
                    position: 'none',
                    bold: true,
                    alignment: 'center',
                    fontSize: 8
                },
                animation: {
                    duration: 500,
                    easing: 'inAndOut',
                    startup: true
                }
            }
        }

        function getLineOptions() {

            return {
                fontName: 'Salesforce Sans',
                fontSize: 13,
                height: graphSizer,
                hAxis: {
                    format: 'MMM d',
                    height: '30px',
                    slantedText: true,
                    slantedTextAngle: 30
                },
                vAxis: {
                    format: 'short'
                },
                chartArea: {
                    width: '90%',
                    height: '80%',
                    right: 5,
                    top: 5
                },
                legend: {
                    position: 'none',
                    bold: true,
                    alignment: 'center',
                    fontSize: 8,
                },
                animation: {
                    duration: 500,
                    easing: 'inAndOut',
                    startup: true
                }
            }
        }

        function buildRevenueReport(persist) {

            if (persist || document.getElementById("revenueViewButton").innerHTML === 'VIEW REPORT') {

                document.getElementById("revenueViewButton").innerHTML = 'HIDE REPORT';
                document.getElementById('revenueReport').style.display = 'block';
                document.getElementById('revenueBlockOptions').classList.add('scroll');

                revenueReportVisible = true;

                if (!revenueReportLoaded) {

                    // HEADLINE TOTALS
                    var reportRevTotal    = 0;
                    var reportGPTotal     = 0;
                    var reportInvTotal    = 0;
                    var reportPaidTotal   = 0;

                    var adjustmentsToShow       = [];

                    iterator.forEach(function (element) {

                        var monthData   = oppReportData[element];
                        var length      = monthData['Closed Won'].length +
                            monthData['Costed prospect'].length + monthData['Pipeline prospect'].length +
                            monthData['Repeat Prospect'].length;

                        if (length > 0 && revenueTotals[element]) {

                            var month           = element;
                            var revConf         = (revConfirmed) ? revenueTotals[month][0] : 0;
                            var revUnconfirmed  = (revWeighted || revPipeline) ? revenueTotals[month][1] + revenueTotals[month][2] : 0;
                            var gpConfirmed     = (revConfirmed) ? profitTotals[month][0] : 0;
                            var gpUnconfirmed   = (revWeighted || revPipeline) ? profitTotals[month][1] + profitTotals[month][2] : 0;
                            var revTotal        = revConf + revUnconfirmed;
                            var profitTotal     = gpConfirmed + gpUnconfirmed;

                            var invTotal        = (revConfirmed) ?  '£' + (revenueInvTotals[element][0] +
                                revenueInvTotals[element][1]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                            var paidTotal       = (revConfirmed) ? '£' + (revenueInvTotals[element][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';

                            var margin = (!(revTotal === 0 && profitTotal === 0)) ?
                                ((profitTotal / revTotal) * 100) : 0;

                            var monthEntries = '<div class="reportMonth reportSummaryGrid" >' +
                                '<div style="font-size: 16px;">&nbsp;' + month + '</div>' +
                                '<div>' + '£' + revTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                '<div>' + '£' + profitTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                '<div>' + margin.toFixed(0) + '%</div>' +
                                '<div>' + invTotal + '</div>' +
                                '<div>' + paidTotal + '</div>' +
                                '</div>';

                            var typeIterator = Object.keys(monthData);

                            typeIterator.forEach(function (element) {

                                var randomId            = helper.guid();
                                var oppRows             = monthData[element];
                                var stageName           = element;
                                var adjustmentParentId  = helper.guid();
                                var revenueAdjustments  = 0;
                                var profitAdjustments   = 0;
                                var adjustmentCount     = 0;

                                if ((stageName === 'Closed Won' && revConfirmed) || (stageName !== 'Closed Won' && (revWeighted || revPipeline))) {
                                    if (oppRows.length > 0) {

                                        var revType;
                                        var profitType;
                                        var invoiced    = '';
                                        var paid        = '';

                                        if (stageName === 'Closed Won') {
                                            revType     = 0;
                                            profitType  = 4;
                                            invoiced    = invTotal;
                                            paid        = paidTotal;
                                        } else if (stageName === 'Costed prospect') {
                                            revType     = 1;
                                            profitType  = 5;
                                        } else if (stageName === 'Pipeline prospect') {
                                            revType     = 2;
                                            profitType  = 6;
                                        } else if (stageName === 'Repeat Prospect') {
                                            revType     = 3;
                                            profitType  = 7;
                                        }

                                        var margin = (!(revenueTypeTotals[month][revType] === 0 && revenueTypeTotals[month][profitType] === 0)) ?
                                            ((revenueTypeTotals[month][profitType] / revenueTypeTotals[month][revType]) * 100) : 0;

                                        monthEntries += '<div class="reportStage reportSummaryGrid"  onclick="toggleType(\'' + randomId + '\')">' +
                                            '<div style="font-size:16px;">&nbsp;' + element + ' <i id="' + randomId + '" class="fas fa-angle-up"></i></div>' +
                                            '<div>' + '£' + revenueTypeTotals[month][revType].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                            '<div>' + '£' + revenueTypeTotals[month][profitType].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                            '<div>' + margin.toFixed(0) + '% </div>' +
                                            '<div>' + invoiced + '</div>' +
                                            '<div>' + paid + '</div>' +
                                            '</div>';

                                        monthEntries += '<div class="parentAdjustment" style="display:none;cursor:pointer;" id="' + adjustmentParentId + '"' +
                                            ' onclick="showChildAdjustments(\'' + adjustmentParentId + '\')">' +
                                            '<div style="padding-left: 10px; padding-right: 10px;">' +
                                            '<strong>TOTAL ADJUSTMENTS:</strong></div>' +
                                            '<div id="' + adjustmentParentId + 'Revenue"></div>' +
                                            '<div id="' + adjustmentParentId + 'Profit"></div>' +
                                            '<div id="' + adjustmentParentId + 'Count"></div>' +
                                            '</div>';

                                        var oppIterator = Object.keys(oppRows);

                                        oppIterator.forEach(function (element) {

                                            if (oppRows[element].EventMonthYear__c === month) {

                                                var jobInv = (stageName === 'Closed Won') ?
                                                    '£' + oppRows[element].Amount_Invoiced2__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                                                var invStatus = (jobInv === '') ? '' :
                                                    (Math.round(oppRows[element].Amount_Invoiced2__c) === Math.round(oppRows[element].Amount_Calder__c)) ? '<span><i class="fas fa-check-circle status positive"></i></span> ' :
                                                        (Math.round(oppRows[element].Amount_Invoiced2__c) > 0) ? '<span><i class="fas fa-minus-circle status partial"></i></span> ' :
                                                            (Math.round(oppRows[element].Amount_Invoiced2__c) === 0) ? '<span><i class="fas fa-times-circle status negative"></i></span> ' : '';
                                                var jobPaid = (stageName === 'Closed Won') ?
                                                    '£' + oppRows[element].Amount_Paid__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                                                var paidStatus = (jobPaid === '') ? '' :
                                                    (Math.round(oppRows[element].Amount_Paid__c) === Math.round(oppRows[element].Amount_Calder__c)) ? '<i class="fas fa-check-circle status positive"></i> ' :
                                                        (Math.round(oppRows[element].Amount_Paid__c) > 0) ? '<i class="fas fa-minus-circle status partial"></i> ' :
                                                            (Math.round(oppRows[element].Amount_Paid__c) === 0) ? '<i class="fas fa-times-circle status negative"></i> ' : '';
                                                var probability = (stageName !== 'Closed Won') ? oppRows[element].Probability + '%' : '';
                                                var stageColor = (stageName !== 'Closed Won') ? 'unconfirmed' : '';
                                                var managers = (oppRows[element].Project_Manager__c) ?
                                                    oppRows[element].Owner.FirstName.substr(0, 1) + oppRows[element].Owner.LastName.substr(0,1) +
                                                    '/' + oppRows[element].Project_Manager__r.FirstName.substr(0, 1) + oppRows[element].Project_Manager__r.LastName.substr(0,1) :
                                                    oppRows[element].Owner.FirstName.substr(0, 1) + oppRows[element].Owner.LastName.substr(0,1);

                                                if (oppRows[element].Adjustments__r) {
                                                    probability = '<div id="Revenue' + oppRows[element].Id + 'alert" class="adjustmentAlert">'
                                                        + oppRows[element].Adjustments__r.length +
                                                        '</div>';
                                                }

                                                var adjustmentExposure = (oppRows[element].Adjustments__r) ? 'onclick="showAdjustments(\'Revenue' + oppRows[element].Id + '\')' : '';

                                                monthEntries += '<div class="reportGrid reportRow ' + stageColor + ' ' + randomId + '" ' +
                                                    'id="Revenue' + oppRows[element].Id + '" ' + adjustmentExposure + '" >' +
                                                    '<div>&nbsp;&nbsp;' + managers + '</div>' +
                                                    '<div>' + oppRows[element].Filtered_Job_Number__c + '</div>' +
                                                    '<div>' + oppRows[element].Name + '</div>' +
                                                    '<div>' + oppRows[element].Account.Name + '</div>' +
                                                    '<div class="noSpill">' + (new Date(oppRows[element].Event_start__c)).toString().substr(0, 10) + '</div>' +
                                                    '<div class="noSpill">' + (new Date(oppRows[element].Event_end__c)).toString().substr(0, 10) + '</div>' +
                                                    '<div>' + '£' + oppRows[element].Amount_Calder__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                    '<div>' + '£' + oppRows[element].Gross_profit_2__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                    '<div>' + oppRows[element].Gross_Margin__c.toFixed(0) + '%' + '</div>' +
                                                    '<div>' + invStatus + jobInv + '</div>' +
                                                    '<div>' + paidStatus + jobPaid + '</div>' +
                                                    '<div>' + probability + '</div>' +
                                                    '</div>';

                                                if (oppRows[element].Adjustments__r) {

                                                    monthEntries += '<div class="childAdjustment ' +  ' Revenue' + oppRows[element].Id + '" >' +
                                                        '<div style="padding-left: 10px;padding-right: 10px;">FIGURES COMMITTED TO THE P&L AS AT 1st ' + oppRows[element].EventMonthYear__c + '</div>' +
                                                        '<div>' + '£' + oppRows[element].CommittedRevenue__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                        '<div>' + '£' + oppRows[element].CommittedProfit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' + '</div>';

                                                    for (var x = 0; x < oppRows[element].Adjustments__r.length; x++) {

                                                        var revMovement = (oppRows[element].Adjustments__r[x].Revenue__c !== 0);
                                                        var profMovement = (oppRows[element].Adjustments__r[x].Profit__c !== 0);
                                                        var revTransferred = (oppRows[element].Adjustments__r[x].Revenue__c <= 0) ? '' : '-';
                                                        var profTransferred = (oppRows[element].Adjustments__r[x].Profit__c <= 0) ? '' : '-';
                                                        var revFigure = '£' + oppRows[element].Adjustments__r[x].Revenue__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var profFigure = '£' + oppRows[element].Adjustments__r[x].Profit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var revDescription = '';
                                                        var profDescription = '';
                                                        var inheritance     = (oppRows[element].Adjustments__r[x].EventMonthYear__c === 'None') ? '' :
                                                            ' inherited by ' + oppRows[element].Adjustments__r[x].EventMonthYear__c;

                                                        if (revMovement) {
                                                            var movement = (oppRows[element].Adjustments__r[x].Revenue__c < 0) ? ' decrease of ' : ' increase of ';
                                                            if (oppRows[element].Adjustments__r[x].Revenue__c < 0) {
                                                                revFigure = '£' + (oppRows[element].Adjustments__r[x].Revenue__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            revDescription = 'Revenue ' + movement + revFigure;
                                                        }

                                                        if (profMovement) {
                                                            var movement = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? ' decrease of ' : ' increase of ';
                                                            var prefix = (revMovement) ? ' and ' : '';
                                                            if (oppRows[element].Adjustments__r[x].Profit__c < 0) {
                                                                profFigure = '£' + (oppRows[element].Adjustments__r[x].Profit__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            profDescription = prefix + 'Gross Profit ' + movement + profFigure;
                                                        }

                                                        monthEntries += '<div class="childAdjustment ' + ' Revenue' + oppRows[element].Id + '" >' +
                                                            '<div style="padding-left: 10px;padding-right: 10px;">' + revDescription + profDescription + inheritance + '</div>' +
                                                            '<div>' + revTransferred + revFigure + '</div>' +
                                                            '<div>' + profTransferred + profFigure + '</div>' +
                                                            '</div>';

                                                    }
                                                }

                                                if (oppRows[element].Committed__c) {
                                                    reportRevTotal  += oppRows[element].CommittedRevenue__c;
                                                    reportGPTotal   += oppRows[element].CommittedProfit__c;
                                                    reportInvTotal  += oppRows[element].Amount_Invoiced2__c;
                                                    reportPaidTotal += oppRows[element].Amount_Paid__c;
                                                } else {
                                                    reportRevTotal  += oppRows[element].Amount_Calder__c;
                                                    reportGPTotal   += oppRows[element].Gross_profit_2__c;
                                                    reportInvTotal  += oppRows[element].Amount_Invoiced2__c;
                                                    reportPaidTotal += oppRows[element].Amount_Paid__c;
                                                }

                                            } else if (oppRows[element].Adjustments__r) {

                                                for (var x = 0; x < oppRows[element].Adjustments__r.length; x++) {

                                                    if ((oppRows[element].Adjustments__r[x].EventMonthYear__c === month) &&
                                                        (oppRows[element].Adjustments__r[x].Profit__c !== 0 ||
                                                        oppRows[element].Adjustments__r[x].Revenue__c !== 0)) {

                                                        reportRevTotal  += oppRows[element].Adjustments__r[x].Revenue__c;
                                                        reportGPTotal   += oppRows[element].Adjustments__r[x].Profit__c;

                                                        revenueAdjustments += oppRows[element].Adjustments__r[x].Revenue__c;
                                                        profitAdjustments += oppRows[element].Adjustments__r[x].Profit__c;
                                                        adjustmentCount += 1;

                                                        var revMovement     = (oppRows[element].Adjustments__r[x].Revenue__c !== 0);
                                                        var profMovement    = (oppRows[element].Adjustments__r[x].Profit__c !== 0);
                                                        var revTransferred  = (oppRows[element].Adjustments__r[x].Revenue__c < 0) ? '-' : '';
                                                        var profTransferred = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? '-' : '';
                                                        var revFigure       = '£' + oppRows[element].Adjustments__r[x].Revenue__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var profFigure      = '£' + oppRows[element].Adjustments__r[x].Profit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var revDescription  = '';
                                                        var profDescription = '';
                                                        var source          = (oppRows[element].EventMonthYear__c) ?
                                                            ' brought forward from ' + oppRows[element].EventMonthYear__c : '';

                                                        if (revMovement) {
                                                            var movement = (oppRows[element].Adjustments__r[x].Revenue__c < 0) ? ' decrease of ' : ' increase of ';
                                                            if (oppRows[element].Adjustments__r[x].Revenue__c < 0) {
                                                                revFigure = '£' + (oppRows[element].Adjustments__r[x].Revenue__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            revDescription = 'Revenue ' + movement + revFigure;
                                                        }

                                                        if (profMovement) {
                                                            var movement = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? ' decrease of ' : ' increase of ';
                                                            var prefix = (revMovement) ? ' and ' : '';
                                                            if (oppRows[element].Adjustments__r[x].Profit__c < 0) {
                                                                profFigure = '£' + (oppRows[element].Adjustments__r[x].Profit__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            profDescription = prefix + 'Gross Profit ' + movement + profFigure;
                                                        }

                                                        monthEntries += '<div class="childAdjustment ' + randomId + ' ' + adjustmentParentId + '" >' +
                                                            '<div style="padding-left: 10px; padding-right: 10px;">' +
                                                            '<strong>' + oppRows[element].Filtered_Job_Number__c +
                                                            ' - ' + oppRows[element].Name + ': </strong>' + revDescription + profDescription + source + '</div>' +
                                                            '<div>' + revTransferred + revFigure + '</div>' +
                                                            '<div>' + profTransferred + profFigure + '</div>' +
                                                            '</div>';
                                                    }
                                                }
                                            }
                                        });

                                        if (adjustmentCount > 0) {
                                            adjustmentsToShow.push([adjustmentParentId,revenueAdjustments,profitAdjustments,adjustmentCount]);
                                        }

                                    }
                                }
                            });
                            document.getElementById('revenueReportRows').innerHTML += monthEntries;

                            adjustmentsToShow.forEach(function(element){

                                var revMultiplier = 1;
                                var revDash       = '';
                                if (element[1] < 0){
                                    revMultiplier = -1;
                                    revDash       = '-';
                                }

                                var profMultiplier = 1;
                                var profDash       = '';
                                if (element[2] < 0){
                                    profMultiplier = -1;
                                    profDash       = '-';
                                }

                                document.getElementById(element[0]).style.display            = 'grid';
                                document.getElementById(element[0] + 'Revenue').innerHTML    = revDash + '£' + (element[1] * revMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                document.getElementById(element[0] + 'Profit').innerHTML     = profDash + '£' + (element[2] * profMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                            });
                        }
                    });

                    document.getElementById("reportRevTotal").innerHTML     = '£' + reportRevTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("reportGPTotal").innerHTML      = '£' + reportGPTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("reportMarginTotal").innerHTML  = ((reportGPTotal / reportRevTotal) * 100).toFixed(0) + '%';
                    document.getElementById("reportInvTotal").innerHTML     = '£' + reportInvTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("reportPaidTotal").innerHTML    = '£' + reportPaidTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");

                    revenueReportLoaded = true;

                }

            } else if (document.getElementById("revenueViewButton").innerHTML === 'HIDE REPORT'){

                document.getElementById("revenueViewButton").innerHTML = 'VIEW REPORT';
                document.getElementById('revenueReport').style.display = 'none';
                document.getElementById('revenueBlockOptions').classList.remove('scroll');
                revenueReportVisible = false;

            }
        }

        function buildProfitReport(persist) {

            if (persist || document.getElementById("profitViewButton").innerHTML === 'VIEW REPORT') {

                document.getElementById("profitViewButton").innerHTML = 'HIDE REPORT';
                document.getElementById('profitReport').style.display = 'block';
                document.getElementById('profitBlockOptions').classList.add('scroll');

                profitReportVisible = true;

                if (!profitReportLoaded){

                    // HEADLINE TOTALS
                    var gpReportRevTotal    = 0;
                    var gpReportProfitTotal = 0;
                    var gpReportCOSTotal    = 0;
                    var gpReportBilledTotal = 0;
                    var gpReportPaidTotal   = 0;

                    var adjustmentsToShow       = [];

                    iterator.forEach(function (element) {

                        var monthData = oppReportData[element];
                        var length = monthData['Closed Won'].length + monthData['Costed prospect'].length +
                            monthData['Pipeline prospect'].length + monthData['Repeat Prospect'].length;

                        if (length > 0) {

                            var month = element;

                            var gpConf          = (profitConfirmed) ? profitTotals[month][0] : 0;
                            var gpUnconfirmed   = (profitWeighted || profitPipeline) ?
                                profitTotals[month][1] + profitTotals[month][2] : 0;
                            var cosConfirmed    = (profitConfirmed) ? revenueTotals[month][0] - profitTotals[month][0] : 0;
                            var cosUnconfirmed  = (profitWeighted || profitPipeline) ?
                                (revenueTotals[month][1] - profitTotals[month][1]) +
                                (revenueTotals[month][2] - profitTotals[month][2]) : 0;

                            var profitTotal     = gpConf + gpUnconfirmed;
                            var cosTotal        = cosConfirmed + cosUnconfirmed;
                            var billTotal       = (profitConfirmed) ?  '£' + (revenueInvTotals[element][3] + revenueInvTotals[element][4]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                            var paidTotal       = (profitConfirmed) ? '£' + (revenueInvTotals[element][3]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';

                            var margin = (!(profitTotal === 0 && cosTotal === 0)) ?
                                ((profitTotal / (profitTotal + cosTotal)) * 100) : 0;

                            var monthEntries = '<div class="reportMonth gpReportSummaryGrid" >' +
                                '<div style="font-size: 16px;">&nbsp;' + month + '</div>' +
                                '<div>' + '£' + profitTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                '<div>' + '£' + cosTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                '<div>' + margin.toFixed(0) + '%</div>' +
                                '<div>' + billTotal + '</div>' +
                                '<div>' + paidTotal + '</div>' +
                                '</div>';

                            var typeIterator = Object.keys(monthData);

                            typeIterator.forEach(function (element) {

                                var randomId            = helper.guid();
                                var oppRows             = monthData[element];
                                var stageName           = element;
                                var adjustmentParentId  = helper.guid();
                                var profitAdjustments   = 0;
                                var cosAdjustments      = 0;
                                var adjustmentCount     = 0;

                                if ((stageName === 'Closed Won' && profitConfirmed) ||
                                    (stageName !== 'Closed Won' && (profitWeighted || profitPipeline))) {
                                    if (oppRows.length > 0) {

                                        var profitType;
                                        var cosType;
                                        var billed      = '';
                                        var paid        = '';

                                        if (stageName === 'Closed Won') {
                                            profitType  = 4;
                                            cosType     = 8;

                                            billed      = billTotal;
                                            paid        = paidTotal;
                                        } else if (stageName === 'Costed prospect') {
                                            profitType  = 5;
                                            cosType     = 9;
                                        } else if (stageName === 'Pipeline prospect') {
                                            profitType  = 6;
                                            cosType     = 10;
                                        } else if (stageName === 'Repeat Prospect') {
                                            profitType  = 7;
                                            cosType     = 11;
                                        }

                                        var margin = (!(revenueTypeTotals[month][cosType] === 0 && revenueTypeTotals[month][profitType] === 0)) ?
                                            ((revenueTypeTotals[month][profitType] / (revenueTypeTotals[month][profitType] + revenueTypeTotals[month][cosType])) * 100) : 0;

                                        monthEntries += '<div class="reportStage gpReportSummaryGrid" onclick="toggleType(\'' + randomId + '\')">' +
                                            '<div style="font-size:16px;">&nbsp;' + element + '  <i id="' + randomId + '" class="fas fa-angle-up"></i></div>' +
                                            '<div>' + '£' + revenueTypeTotals[month][profitType].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                            '<div>' + '£' + revenueTypeTotals[month][cosType].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                            '<div>' + margin.toFixed(0) + '% </div>' +
                                            '<div>' + billed + '</div>' +
                                            '<div>' + paid + '</div>' +
                                            '</div>';

                                        monthEntries += '<div class="parentAdjustment" style="display:none;cursor:pointer;" id="' + adjustmentParentId + '"' +
                                            ' onclick="showChildAdjustments(\'' + adjustmentParentId + '\')">' +
                                            '<div style="padding-left: 10px; padding-right: 10px;">' +
                                            '<strong>TOTAL ADJUSTMENTS:</strong></div>' +
                                            '<div id="' + adjustmentParentId + 'Profit"></div>' +
                                            '<div id="' + adjustmentParentId + 'Cos"></div>' +
                                            '<div id="' + adjustmentParentId + 'Count"></div>' +
                                            '</div>';

                                        var oppIterator = Object.keys(oppRows);

                                        oppIterator.forEach(function (element) {

                                            if (oppRows[element].EventMonthYear__c === month) {

                                                var jobBill      = (stageName === 'Closed Won') ?
                                                    '£' + oppRows[element].Quickbooks_COS__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                                                var billStatus   = (jobBill === '') ? '' :
                                                    (oppRows[element].Filtered_Cost_of_Sale__c === oppRows[element].Quickbooks_COS__c) ? '<span><i class="fas fa-check-circle status positive"></i></span> ' :
                                                        (oppRows[element].Quickbooks_COS__c > 0) ? '<span><i class="fas fa-minus-circle status partial"></i></span> ' :
                                                            (oppRows[element].Quickbooks_COS__c === 0) ? '<span><i class="fas fa-times-circle status negative"></i></span> ' :'';
                                                var jobPaid     = (stageName === 'Closed Won') ?
                                                    '£' + oppRows[element].Quickbooks_COS_Paid__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") : '';
                                                var paidStatus   = (jobPaid === '') ? '' :
                                                    (oppRows[element].Quickbooks_COS_Paid__c === oppRows[element].Filtered_Cost_of_Sale__c) ? '<i class="fas fa-check-circle status positive"></i> ' :
                                                        (oppRows[element].Quickbooks_COS_Paid__c > 0) ? '<i class="fas fa-minus-circle status partial"></i> ' :
                                                            (oppRows[element].Quickbooks_COS_Paid__c === 0) ? '<i class="fas fa-times-circle status negative"></i> ' :'';
                                                var probability = (stageName !== 'Closed Won') ? oppRows[element].Probability + '%' : '';
                                                var stageColor  = (stageName !== 'Closed Won') ? 'unconfirmed' : '';
                                                var quoteStatus = (stageName !== 'Closed Won') ? '' :
                                                    (oppRows[element].Quote_Status__c === 'Reconciliation - completed') ? '<span class="quoteStatus complete">COMPLETE</span>' :
                                                        (new Date(oppRows[element].Event_end__c) < new Date(today.getFullYear(),today.getMonth()-1)) ? '<span class="quoteStatus overdue">OVERDUE</span>' :
                                                            '<span class="quoteStatus pending">PENDING</span>';

                                                var managers = (oppRows[element].Project_Manager__c) ?
                                                    oppRows[element].Owner.FirstName.substr(0, 1) + oppRows[element].Owner.LastName.substr(0,1) +
                                                    '/' + oppRows[element].Project_Manager__r.FirstName.substr(0, 1) + oppRows[element].Project_Manager__r.LastName.substr(0,1) :
                                                    oppRows[element].Owner.FirstName.substr(0, 1) + oppRows[element].Owner.LastName.substr(0,1);

                                                if (oppRows[element].Adjustments__r) {
                                                    probability = '<div id="Profit' + oppRows[element].Id + 'alert" class="adjustmentAlert">'
                                                        + oppRows[element].Adjustments__r.length +
                                                        '</div>';
                                                }

                                                var adjustmentExposure = (oppRows[element].Adjustments__r) ? 'onclick="showAdjustments(\'Profit' + oppRows[element].Id + '\')' : '';

                                                monthEntries += '<div class="gpReportGrid reportRow ' + stageColor + ' ' + randomId + '"' +
                                                    'id="Profit' + oppRows[element].Id + '" ' + adjustmentExposure + '" >' +
                                                    '<div>&nbsp;&nbsp;' + managers + '</div>' +
                                                    '<div>' + oppRows[element].Filtered_Job_Number__c + '</div>' +
                                                    '<div>' + oppRows[element].Name + '</div>' +
                                                    '<div>' + oppRows[element].Account.Name + '</div>' +
                                                    '<div class="noSpill">' + (new Date(oppRows[element].Event_start__c)).toString().substr(0, 10) + '</div>' +
                                                    '<div class="noSpill">' + (new Date(oppRows[element].Event_end__c)).toString().substr(0, 10) + '</div>' +
                                                    '<div>' + quoteStatus + '</div>' +
                                                    '<div>' + '£' + oppRows[element].Gross_profit_2__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                    '<div>' + '£' + oppRows[element].Filtered_Cost_of_Sale__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                    '<div>' + oppRows[element].Gross_Margin__c.toFixed(0) + '%' + '</div>' +
                                                    '<div>' + billStatus + jobBill + '</div>' +
                                                    '<div>' + paidStatus + jobPaid + '</div>' +
                                                    '<div>' + probability + '</div>' +
                                                    '</div>';

                                                if (oppRows[element].Adjustments__r) {


                                                    monthEntries += '<div class="childAdjustment ' + randomId + ' Profit' + oppRows[element].Id + '" >' +
                                                        '<div style="padding-left: 10px;padding-right: 10px;">FIGURES COMMITTED TO THE P&L AS AT 1st ' + oppRows[element].EventMonthYear__c + '</div>' +
                                                        '<div>' + '£' + oppRows[element].CommittedProfit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                                                        '<div>' + '£' + oppRows[element].CommittedCOS__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' + '</div>';

                                                    for (var x = 0; x < oppRows[element].Adjustments__r.length; x++) {

                                                        var profMovement    = (oppRows[element].Adjustments__r[x].Profit__c !== 0);
                                                        var cosMovement     = (oppRows[element].Adjustments__r[x].CostOfSale__c !== 0);
                                                        var profTransferred = (oppRows[element].Adjustments__r[x].Profit__c <= 0) ? '' : '-';
                                                        var cosTransferred  = (oppRows[element].Adjustments__r[x].CostOfSale__c <= 0) ? '' : '-';
                                                        var profFigure      = '£' + oppRows[element].Adjustments__r[x].Profit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var cosFigure       = '£' + oppRows[element].Adjustments__r[x].CostOfSale__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var profDescription = '';
                                                        var cosDescription  = '';
                                                        var inheritance     = (oppRows[element].Adjustments__r[x].EventMonthYear__c === 'None') ? '' :
                                                            ' inherited by ' + oppRows[element].Adjustments__r[x].EventMonthYear__c;

                                                        if (profMovement) {
                                                            var movement    = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? ' decrease of ' : ' increase of ';
                                                            if (oppRows[element].Adjustments__r[x].Profit__c < 0) {
                                                                profFigure   = '£' + (oppRows[element].Adjustments__r[x].Profit__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            profDescription  = 'Gross Profit ' + movement + profFigure;
                                                        }

                                                        if (cosMovement) {
                                                            var movement    = (oppRows[element].Adjustments__r[x].CostOfSale__c < 0) ? ' decrease of ' : ' increase of ';
                                                            var prefix      = (cosMovement) ? ' and ' : '';
                                                            if (oppRows[element].Adjustments__r[x].CostOfSale__c < 0) {
                                                                cosFigure = '£' + (oppRows[element].Adjustments__r[x].CostOfSale__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            cosDescription = prefix + 'Cost of sale ' + movement + cosFigure;
                                                        }

                                                        monthEntries += '<div class="childAdjustment ' + randomId + ' Profit' + oppRows[element].Id + '" >' +
                                                            '<div style="padding-left: 10px;padding-right: 10px;">' + profDescription + cosDescription + inheritance + '</div>' +
                                                            '<div>' + profTransferred + profFigure + '</div>' +
                                                            '<div>' + cosTransferred + cosFigure + '</div>' +
                                                            '</div>';

                                                    }
                                                }

                                                if (oppRows[element].Committed__c) {
                                                    gpReportRevTotal    += oppRows[element].CommittedRevenue__c;
                                                    gpReportProfitTotal += oppRows[element].CommittedProfit__c;
                                                    gpReportCOSTotal    += oppRows[element].CommittedCOS__c;
                                                    gpReportBilledTotal += oppRows[element].Quickbooks_COS__c;
                                                    gpReportPaidTotal   += oppRows[element].Quickbooks_COS_Paid__c;
                                                } else {
                                                    gpReportRevTotal    += oppRows[element].Amount_Calder__c;
                                                    gpReportProfitTotal += oppRows[element].Gross_profit_2__c;
                                                    gpReportCOSTotal    += oppRows[element].Filtered_Cost_of_Sale__c;
                                                    gpReportBilledTotal += oppRows[element].Quickbooks_COS__c;
                                                    gpReportPaidTotal   += oppRows[element].Quickbooks_COS_Paid__c;
                                                }

                                            } else if (oppRows[element].Adjustments__r) {

                                                for (var x = 0; x < oppRows[element].Adjustments__r.length; x++) {

                                                    if ((oppRows[element].Adjustments__r[x].EventMonthYear__c === month) &&
                                                        (oppRows[element].Adjustments__r[x].Profit__c !== 0 ||
                                                            oppRows[element].Adjustments__r[x].CostOfSale__c !== 0)) {

                                                        gpReportProfitTotal += oppRows[element].Adjustments__r[x].Profit__c;
                                                        gpReportCOSTotal    += oppRows[element].Adjustments__r[x].CostOfSale__c;

                                                        profitAdjustments   += oppRows[element].Adjustments__r[x].Profit__c;
                                                        cosAdjustments      += oppRows[element].Adjustments__r[x].CostOfSale__c;
                                                        adjustmentCount     += 1;

                                                        var profMovement    = (oppRows[element].Adjustments__r[x].Profit__c !== 0);
                                                        var cosMovement     = (oppRows[element].Adjustments__r[x].CostOfSale__c !== 0);
                                                        var profTransferred = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? '-' : '';
                                                        var cosTransferred  = (oppRows[element].Adjustments__r[x].CostOfSale__c < 0) ? '-' : '';
                                                        var profFigure      = '£' + oppRows[element].Adjustments__r[x].Profit__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var cosFigure       = '£' + oppRows[element].Adjustments__r[x].CostOfSale__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                        var profDescription = '';
                                                        var cosDescription  = '';
                                                        var source          = (oppRows[element].EventMonthYear__c) ?
                                                            ' brought forward from ' + oppRows[element].EventMonthYear__c : '';

                                                        if (profMovement) {
                                                            var movement    = (oppRows[element].Adjustments__r[x].Profit__c < 0) ? ' decrease of ' : ' increase of ';
                                                            if (oppRows[element].Adjustments__r[x].Profit__c < 0) {
                                                                profFigure  = '£' + (oppRows[element].Adjustments__r[x].Profit__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            profDescription = 'Gross Profit ' + movement + profFigure;
                                                        }

                                                        if (cosMovement) {
                                                            var movement    = (oppRows[element].Adjustments__r[x].CostOfSale__c < 0) ? ' decrease of ' : ' increase of ';
                                                            var prefix      = (cosMovement) ? ' and ' : '';
                                                            if (oppRows[element].Adjustments__r[x].CostOfSale__c < 0) {
                                                                cosFigure   = '£' + (oppRows[element].Adjustments__r[x].CostOfSale__c * -1).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                                            }
                                                            cosDescription  = prefix + 'Cost of sale ' + movement + cosFigure;
                                                        }

                                                        monthEntries += '<div class="childAdjustment ' + randomId + ' ' + adjustmentParentId + '" >' +
                                                            '<div style="padding-left: 10px; padding-right: 10px;">' +
                                                            '<strong>' + oppRows[element].Filtered_Job_Number__c +
                                                            ' - ' + oppRows[element].Name + ': </strong>' + profDescription + cosDescription + source + '</div>' +
                                                            '<div>' + profTransferred + profFigure + '</div>' +
                                                            '<div>' + cosTransferred + cosFigure + '</div>' +
                                                            '</div>';

                                                    }
                                                }
                                            }
                                        });

                                        if (adjustmentCount > 0) {
                                            adjustmentsToShow.push([adjustmentParentId,profitAdjustments,cosAdjustments,adjustmentCount]);
                                        }
                                    }
                                }
                            });
                            document.getElementById('profitReportRows').innerHTML += monthEntries;

                            adjustmentsToShow.forEach(function(element){

                                var profMultiplier = 1;
                                var profDash       = '';
                                if (element[1] < 0){
                                    profMultiplier = -1;
                                    profDash       = '-';
                                }

                                var cosMultiplier = 1;
                                var cosDash       = '';
                                if (element[2] < 0){
                                    cosMultiplier = -1;
                                    cosDash       = '-';
                                }

                                document.getElementById(element[0]).style.display         = 'grid';
                                document.getElementById(element[0] + 'Profit').innerHTML  = profDash + '£' + (element[1] * profMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                                document.getElementById(element[0] + 'Cos').innerHTML     = cosDash + '£' + (element[2] * cosMultiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                            });

                        }
                    });

                    document.getElementById("gpReportProfitTotal").innerHTML  = '£' + gpReportProfitTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("gpReportCOSTotal").innerHTML     = '£' + gpReportCOSTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("gpReportMarginTotal").innerHTML  = ((gpReportProfitTotal / gpReportRevTotal) * 100).toFixed(0) + '%';
                    document.getElementById("gpReportBilledTotal").innerHTML  = '£' + gpReportBilledTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
                    document.getElementById("gpReportPaidTotal").innerHTML    = '£' + gpReportPaidTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");

                    profitReportLoaded = true;

                }

            } else if (document.getElementById("profitViewButton").innerHTML === 'HIDE REPORT'){

                document.getElementById("profitViewButton").innerHTML = 'VIEW REPORT';
                document.getElementById('profitReport').style.display = 'none';
                document.getElementById('profitBlockOptions').classList.remove('scroll');
                profitReportVisible = false;

            }
        }

        function showAdjustments(Id){
            document.getElementById(Id + 'alert').classList.toggle('fade');
            Array.from(document.getElementsByClassName(Id)).forEach(function(element){
                element.classList.toggle('display');
            });
        }

        function showChildAdjustments(Id) {
            document.getElementById(Id).classList.toggle('fade');
            Array.from(document.getElementsByClassName(Id)).forEach(function(element){
                element.classList.toggle('display');
            });
        }

        function buildOpexReport() {

            if (document.getElementById("opexViewButton").innerHTML === 'VIEW REPORT') {

                document.getElementById("opexViewButton").innerHTML = 'HIDE REPORT';
                document.getElementById('opexReport').style.display = 'block';

                if (!opexReportLoaded) {

                    var dateHolder          = document.getElementById('opexDates');
                    var totalMonthFigures   = new Array();
                    var totalMonthAmounts   = '';

                    iterator.forEach(function (element) {
                        dateHolder.innerHTML += '<div class="opexColumn opexReportDate opexTopHeader noSpill">' + element + '</div>';
                        totalMonthFigures.push(0);
                    });

                    var groupingKeys = Object.keys(opexReportData);

                    groupingKeys.forEach(function (element) {

                        var grouping                = document.getElementById(element.substr(0, 2));
                        var groupingId              = element.substr(0, 2);
                        var groupingFiguresHolder   = document.getElementById(element.substr(0, 2) + 'Figure');
                        var groupingFiguresTotal    = document.getElementById(element.substr(0, 2) + 'Total');
                        var groupingFigures         = '';
                        var breakdownFigures        = '';
                        var groupingTotals          = new Array();

                        iterator.forEach(function (element) {
                            groupingTotals.push(0);
                        });

                        var parents     = opexReportData[element];
                        var parentKeys  = Object.keys(parents);

                        var groupingRowTotal = 0;
                        var subRowTotals     = '';


                        parentKeys.forEach(function (element) {

                            var nominalKeys     = Object.keys(parents[element]);
                            var nominals        = parents[element];
                            // var parentId        = element.substr(0, 2);
                            var parentId        = helper.guid();
                            var parentFigures   = '';
                            var nominalDivs     = '';
                            var nominalFigures  = '';
                            var totals          = new Array();

                            iterator.forEach(function () {
                                totals.push(0);
                            });

                            var parentRowTotal      = 0;
                            var nominalRowTotals    = '';

                            nominalKeys.forEach(function (element) {

                                var nominalRowTotal = 0;

                                nominalDivs += '<div class="noSpill nominal ' + groupingId + parentId +
                                    '" style="padding-left:4px;font-size:11px;display:none;background-color: white;">' + element + '</div>';
                                var figures = '';

                                for (var x = 0; x < nominals[element].length; x++) {

                                    var color   = null;
                                    var figure  = nominals[element][x];
                                    if (figure < 0) {
                                        figure  = figure * -1;
                                        color   = 'negative';
                                    }

                                    figures += '<div class="opexColumn nominal ' + color + '" style="padding-left: 4px;font-size: 11px;">' +
                                        '£' + figure.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                                    totals[x]               += nominals[element][x];
                                    groupingTotals[x]       += nominals[element][x];
                                    totalMonthFigures[x]    += nominals[element][x];
                                    nominalRowTotal         += nominals[element][x];
                                    parentRowTotal          += nominals[element][x];
                                }

                                nominalFigures += '<div class="opexReportColumnHolder ' + groupingId + parentId + '" style="display:none;">' + figures + '</div>';

                                var color = null;
                                if (nominalRowTotal < 0) {
                                    nominalRowTotal = nominalRowTotal * -1;
                                    color   = 'negative';
                                }

                                nominalRowTotals += '<div style="font-size: 11px; display:none;" class="' + color + ' nominal ' + groupingId + parentId + '">' +
                                    '£' + nominalRowTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                    '</div>';

                            });

                            totals.forEach(function (element) {
                                var color = null;
                                if (element < 0) {
                                    element = element * -1;
                                    color   = 'negative';
                                }

                                parentFigures += '<div class="opexColumn parent noSpill ' + color + '">' +
                                    '£' + element.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                    '</div>';
                            });

                            grouping.innerHTML += '<div>' +
                                '<div id="' + groupingId + parentId + '" class="leftColumn parent noSpill ' + groupingId +
                                'parent" style="display:none;" onclick="toggleNominals(\'' + groupingId + parentId + '\')">'
                                + element + ' <i id="' + groupingId + parentId + 'toggle" class="fas fa-plus-circle" style="color:lightgray;"></i>' +
                                nominalDivs +
                                '</div>' +
                                '</div>';

                            breakdownFigures += '<div class="opexReportColumnHolder ' + groupingId + 'parent"  style="display:none;">' +
                                parentFigures +
                                nominalFigures +
                                '</div>';

                            var color = null;
                            if (parentRowTotal < 0) {
                                parentRowTotal = parentRowTotal * -1;
                                color   = 'negative';
                            }

                            subRowTotals += '<div style="font-size: 14px; font-weight: bold; display:none;" class="' + groupingId + 'parent ' + color + ' ">' +
                                '£' + parentRowTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                                nominalRowTotals +
                                '</div>';


                        });


                        groupingTotals.forEach(function (element) {
                            var color = null;
                            if (element < 0) {
                                element = element * -1;
                                color   = 'negative';
                            }

                            groupingFigures += '<div class="opexColumn noSpill ' + color + '">' +
                                '£' + element.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                            groupingRowTotal   += element;
                        });

                        groupingFiguresHolder.innerHTML += '<div class="opexReportColumnHolder">' +
                            groupingFigures +
                            '</div>' +
                            breakdownFigures;

                        var color = null;
                        if (groupingRowTotal < 0) {
                            groupingRowTotal = groupingRowTotal * -1;
                            color   = 'negative';
                        }

                        groupingFiguresTotal.innerHTML  += '<div class="' + color + '">' +
                            '£' + groupingRowTotal.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +
                            '</div>' +
                            subRowTotals;

                    });

                    totalMonthFigures.forEach(function (element) {
                        var color = null;
                        if (element < 0) {
                            element = element * -1;
                            color   = 'negative';
                        }

                        totalMonthAmounts += '<div class="opexColumn opexReportTotals noSpill ' + color + '" style="padding:5px;">' +
                            '£' + element.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                    });

                    document.getElementById('opexTotalMonthFigures').innerHTML = '<div class="opexReportColumnHolder">' +
                        totalMonthAmounts + '</div>';

                    opexReportLoaded = true;
                }

            } else if (document.getElementById("opexViewButton").innerHTML === 'HIDE REPORT'){
                document.getElementById("opexViewButton").innerHTML = 'VIEW REPORT';
                document.getElementById('opexReport').style.display = 'none';
            }
        }

        function toggleParentGroupings(Id){

            var children    = document.getElementsByClassName(Id + 'parent');

            if (document.getElementById(Id + 'toggle').classList.contains('fa-plus-circle')){

                for (var x = 0; x < children.length; x++){
                    children[x].style.display = 'block';
                }

                document.getElementById(Id + 'toggle').classList.remove('fa-plus-circle');
                document.getElementById(Id + 'toggle').classList.add('fa-minus-circle');
            } else {

                for (var x = 0; x < children.length; x++){
                    children[x].style.display = 'none';
                }

                document.getElementById(Id + 'toggle').classList.remove('fa-minus-circle');
                document.getElementById(Id + 'toggle').classList.add('fa-plus-circle');
            }
        }

        function toggleNominals(Id){

            var children    = document.getElementsByClassName(Id);

            if (document.getElementById(Id + 'toggle').classList.contains('fa-plus-circle')){

                for (var x = 0; x < children.length; x++){
                    children[x].style.display = 'block';
                }

                document.getElementById(Id + 'toggle').classList.remove('fa-plus-circle');
                document.getElementById(Id + 'toggle').classList.add('fa-minus-circle');
            } else {

                for (var x = 0; x < children.length; x++){
                    children[x].style.display = 'none';
                }

                document.getElementById(Id + 'toggle').classList.remove('fa-minus-circle');
                document.getElementById(Id + 'toggle').classList.add('fa-plus-circle');
            }

        }

        function getSnapshot(){

            var createdDate = new Date(document.getElementById('snapshotDate').value);

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getSnapshotData}',
                createdDate,
                endDate,
                function(result, event){
                    if (event.status){

                        document.getElementById('snapshotButton').style.display = 'none';
                        document.getElementById('settingsSwap').style.display   = 'block';

                        var reports = document.getElementsByClassName('reportUtil');
                        for (var x = 0; x < reports.length; x++){
                            reports[x].style.display = 'none';
                        }

                        var snapshotShow = document.getElementsByClassName('past');
                        for (var x = 0; x < snapshotShow.length; x++){
                            snapshotShow[x].style.display = 'inline';
                        }

                        snapshotLoaded = true;

                        var snapshotDates = document.getElementsByClassName('snapshotDate');
                        for (var x = 0; x < snapshotDates.length; x++){
                            snapshotDates[x].innerHTML = new Date(document.getElementById('snapshotDate').value).toString().toUpperCase().substr(0,15);
                        }

                        var snapshot = result;

                        revenueTotalsSnapshot   = {};
                        profitTotalsSnapshot    = {};
                        opexTotalsSnapshot      = {};

                        for (var x = 0; x < iterator.length; x++){
                            revenueTotalsSnapshot[iterator[x]]  = [0,0,0,0,0,0,0];
                            profitTotalsSnapshot[iterator[x]]   = [0,0,0,0,0,0,0];
                            opexTotalsSnapshot[iterator[x]]     = [0,0,0,0,0,0,0];
                        }

                        for (var x =  0; x < iterator.length; x++){

                            revenueTotalsSnapshot[iterator[x]][0] = snapshot['RevConf' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][1] = snapshot['RevWeighted' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][2] = snapshot['RevPipeline' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][3] = snapshot['RevTarget' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][5] += snapshot['RevConf' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][6] += snapshot['RevConf' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][4] += snapshot['RevConf' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][5] += snapshot['RevWeighted' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][6] += snapshot['RevWeighted' + (x +1) + '__c'];
                            revenueTotalsSnapshot[iterator[x]][6] += snapshot['RevPipeline' + (x +1) + '__c'];

                            profitTotalsSnapshot[iterator[x]][0] = snapshot['GPConf' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][1] = snapshot['GPWeighted' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][2] = snapshot['GPPipeline' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][4] += snapshot['GPConf' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][5] += snapshot['GPConf' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][6] += snapshot['GPConf' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][5] += snapshot['GPWeighted' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][6] += snapshot['GPWeighted' + (x +1) + '__c'];
                            profitTotalsSnapshot[iterator[x]][6] += snapshot['GPPipeline' + (x +1) + '__c'];

                            opexTotalsSnapshot[iterator[x]][0] = snapshot['Opex' + (x +1) + '__c'];
                            opexTotalsSnapshot[iterator[x]][3] = snapshot['Budget' + (x +1) + '__c'];
                            opexTotalsSnapshot[iterator[x]][4] += snapshot['Opex' + (x +1) + '__c'];
                            opexTotalsSnapshot[iterator[x]][5] += snapshot['Budget' + (x +1) + '__c'];

                            var y = iterator.length - 1;

                            while (y > x){

                                revenueTotalsSnapshot[iterator[y]][3] += snapshot['RevTarget' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][4] += snapshot['RevConf' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][5] += snapshot['RevConf' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][6] += snapshot['RevConf' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][5] += snapshot['RevWeighted' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][6] += snapshot['RevWeighted' + (x +1) + '__c'];
                                revenueTotalsSnapshot[iterator[y]][6] += snapshot['RevPipeline' + (x +1) + '__c'];

                                profitTotalsSnapshot[iterator[y]][4] += snapshot['GPConf' + (x +1) + '__c'];
                                profitTotalsSnapshot[iterator[y]][5] += snapshot['GPConf' + (x +1) + '__c'];
                                profitTotalsSnapshot[iterator[y]][6] += snapshot['GPConf' + (x +1) + '__c'];
                                profitTotalsSnapshot[iterator[y]][5] += snapshot['GPWeighted' + (x +1) + '__c'];
                                profitTotalsSnapshot[iterator[y]][6] += snapshot['GPWeighted' + (x +1) + '__c'];
                                profitTotalsSnapshot[iterator[y]][6] += snapshot['GPPipeline' + (x +1) + '__c'];

                                opexTotalsSnapshot[iterator[y]][4] += snapshot['Opex' + (x +1) + '__c'];
                                opexTotalsSnapshot[iterator[y]][5] += snapshot['Budget' + (x +1) + '__c'];

                                y--;
                            }
                        }

                        headlineTotalsSnapshot = [snapshot.TotalRevenue__c,
                            snapshot.TotalGrossProfit__c,
                            snapshot.TotalOpex__c,
                            snapshot.TotalNetProfit__c];

                        headlinePriorTotalsSnapshot = [snapshot.PriorRevenue__c,
                            snapshot.PriorGrossProfit__c,
                            snapshot.PriorOpex__c,
                            snapshot.PriorNetProfit__c];

                        balanceTotalsSnapshot = {};

                        var balanceEntries = result.Balance__c.split(':');

                        for (var x = 1; x < balanceEntries.length; x++){
                            var components = balanceEntries[x].split('*');
                            var figures = [components[0], parseFloat(components[1]),
                                parseFloat(components[2]), parseFloat(components[3]), parseFloat(components[4])];
                            balanceTotalsSnapshot[components[0]] = figures;
                        }

                        balanceIteratorSnapshot = Object.keys(balanceTotalsSnapshot);

                        setSnapshot(true);

                    }
                }
            );
        }

        function swapSnapshot(type) {

            if (type === 'revenue') {
                if (document.getElementById('revSnapshotAlert').classList.contains('current')) {
                    isRevSnapshot = true;
                    document.getElementById('revSnapshotText').style.display    = 'inline';
                    document.getElementById('revCurrentText').style.display     = 'none';
                    document.getElementById('revSnapshotAlert').classList.remove('current');
                    document.getElementById('revSnapshotAlert').classList.add('past');
                } else {
                    isRevSnapshot = false;
                    document.getElementById('revSnapshotText').style.display    = 'none';
                    document.getElementById('revCurrentText').style.display     = 'inline';
                    document.getElementById('revSnapshotAlert').classList.remove('past');
                    document.getElementById('revSnapshotAlert').classList.add('current');
                }
                document.getElementById('revPastRotate').classList.toggle('rotate');
                drawRevenueBar();
                drawRevenueLine();
            } else if (type === 'profit') {
                if (document.getElementById('gpSnapshotAlert').classList.contains('current')) {
                    isGPSnapshot = true;
                    document.getElementById('gpSnapshotText').style.display     = 'inline';
                    document.getElementById('gpCurrentText').style.display      = 'none';
                    document.getElementById('gpSnapshotAlert').classList.remove('current');
                    document.getElementById('gpSnapshotAlert').classList.add('past');
                } else {
                    isGPSnapshot = false;
                    document.getElementById('gpSnapshotText').style.display     = 'none';
                    document.getElementById('gpCurrentText').style.display      = 'inline';
                    document.getElementById('gpSnapshotAlert').classList.remove('past');
                    document.getElementById('gpSnapshotAlert').classList.add('current');
                }
                document.getElementById('gpPastRotate').classList.toggle('rotate');
                drawProfitBar();
                drawProfitLine();
            } else if (type === 'opex') {
                if (document.getElementById('opexSnapshotAlert').classList.contains('current')) {
                    isOpexSnapshot = true;
                    document.getElementById('opexSnapshotText').style.display   = 'inline';
                    document.getElementById('opexCurrentText').style.display    = 'none';
                    document.getElementById('opexSnapshotAlert').classList.remove('current');
                    document.getElementById('opexSnapshotAlert').classList.add('past');
                } else {
                    isOpexSnapshot = false;
                    document.getElementById('opexSnapshotText').style.display   = 'none';
                    document.getElementById('opexCurrentText').style.display    = 'inline';
                    document.getElementById('opexSnapshotAlert').classList.remove('past');
                    document.getElementById('opexSnapshotAlert').classList.add('current');
                }
                document.getElementById('opexPastRotate').classList.toggle('rotate');
                drawOpexBar();
                drawOpexLine();
            } else if (type === 'netProfit') {
                if (document.getElementById('npSnapshotAlert').classList.contains('current')) {
                    isNetProfitSnapshot = true;
                    document.getElementById('npSnapshotText').style.display     = 'inline';
                    document.getElementById('npCurrentText').style.display      = 'none';
                    document.getElementById('npSnapshotAlert').classList.remove('current');
                    document.getElementById('npSnapshotAlert').classList.add('past');
                } else {
                    isNetProfitSnapshot = false;
                    document.getElementById('npSnapshotText').style.display     = 'none';
                    document.getElementById('npCurrentText').style.display      = 'inline';
                    document.getElementById('npSnapshotAlert').classList.remove('past');
                    document.getElementById('npSnapshotAlert').classList.add('current');
                }
                document.getElementById('npPastRotate').classList.toggle('rotate');
                drawNetProfitBar();
                drawNetProfitLine();
            } else if (type === 'totals') {
                if (document.getElementById('totalsSnapshotAlert').classList.contains('current')) {
                    isHeadlineTotalsSnapshot = true;
                    document.getElementById('totalsSnapshotText').style.display = 'inline';
                    document.getElementById('totalsCurrentText').style.display  = 'none';
                    document.getElementById('totalsSnapshotAlert').classList.remove('current');
                    document.getElementById('totalsSnapshotAlert').classList.add('past');
                } else {
                    isHeadlineTotalsSnapshot = false;
                    document.getElementById('totalsSnapshotText').style.display = 'none';
                    document.getElementById('totalsCurrentText').style.display  = 'inline';
                    document.getElementById('totalsSnapshotAlert').classList.remove('past');
                    document.getElementById('totalsSnapshotAlert').classList.add('current');
                }
                document.getElementById('totalsPastRotate').classList.toggle('rotate');
                drawHeadlines();
                drawChanges();
            } else if (type === 'balance') {
                if (document.getElementById('balanceSnapshotAlert').classList.contains('current')) {
                    isBalanceSnapshot = true;
                    document.getElementById('balanceSnapshotText').style.display = 'inline';
                    document.getElementById('balanceCurrentText').style.display  = 'none';
                    document.getElementById('balanceSnapshotAlert').classList.remove('current');
                    document.getElementById('balanceSnapshotAlert').classList.add('past');
                } else {
                    isBalanceSnapshot = false;
                    document.getElementById('balanceSnapshotText').style.display = 'none';
                    document.getElementById('balanceCurrentText').style.display  = 'inline';
                    document.getElementById('balanceSnapshotAlert').classList.remove('past');
                    document.getElementById('balanceSnapshotAlert').classList.add('current');
                }
                document.getElementById('balancePastRotate').classList.toggle('rotate');
                drawBalances();
            }
        }

        function closeSnapshot(){

            document.getElementById('settingsSwap').style.display   = 'none';
            document.getElementById('snapshotDate').value           = '';

            var reports = document.getElementsByClassName('reportButton');
            for (var x = 0; x < reports.length; x++){
                reports[x].style.display = 'block';
            }

            document.getElementById('opexSplitButton').style.display = 'block';

            var snapshotShow = document.getElementsByClassName('snapshotAlert');
            for (var x = 0; x < snapshotShow.length; x++){
                snapshotShow[x].style.display = 'none';
            }

            snapshotLoaded = false;

            setSnapshot(false);

        }

        function toggleType(Id){

            var rows = document.getElementsByClassName(Id);

            if (document.getElementById(Id).classList.contains('fa-angle-up')) {
                document.getElementById(Id).classList.remove('fa-angle-up');
                document.getElementById(Id).classList.add('fa-angle-down');

                for (var x = 0; x < rows.length; x++){
                    rows[x].style.display = 'none';
                }

            } else {
                document.getElementById(Id).classList.remove('fa-angle-down');
                document.getElementById(Id).classList.add('fa-angle-up');

                for (var x = 0; x < rows.length; x++){
                    rows[x].style.display = 'grid';
                }
            }
        }

        function setSnapshot(status){

            isRevSnapshot            = status;
            isGPSnapshot             = status;
            isOpexSnapshot           = status;
            isNetProfitSnapshot      = status;
            isHeadlineTotalsSnapshot = status;
            isBalanceSnapshot        = status;

            drawRevenueBar();
            drawRevenueLine();
            drawProfitBar();
            drawProfitLine();
            drawOpexBar();
            drawOpexLine();
            drawNetProfitBar();
            drawNetProfitLine();
            drawHeadlines();
            drawBalances();
            drawChanges();
        }

        function drawChanges() {

            var totals   = (isHeadlineTotalsSnapshot) ? headlineTotalsSnapshot : headlineTotals;
            var prior    = (isHeadlineTotalsSnapshot) ? headlinePriorTotalsSnapshot : headlinePriorTotals;

            var values = [(totals[0] - prior[0]),
                (totals[1] - prior[1]),
                (totals[2] - prior[2]),
                (totals[3] - prior[3])];

            var elements = ['revenueChangeTotal', 'grossProfitChangeTotal','opexChangeTotal','netProfitChangeTotal'];

            for (var x = 0; x < elements.length; x++){

                var icon        = (values[x] < 0) ? 'arrow-down' : (values[x] === 0) ? 'minus' : 'arrow-up';
                var multiplier  = (values[x] < 0) ? -1 : 1;

                var element = document.getElementById(elements[x]);

                element.classList.remove('neutral');
                element.classList.remove('positive');
                element.classList.remove('negative');

                element.innerHTML = '<i class="fas fa-' + icon + '"></i>' +
                    ' £' + (values[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");

                if (icon === 'arrow-down'){
                    if (elements[x] === 'opexChangeTotal'){
                        element.classList.remove('neutral');
                        element.classList.add('positive');
                    } else {
                        element.classList.remove('neutral');
                        element.classList.add('negative');
                    }
                } else if (icon === 'arrow-up'){
                    if (elements[x] === 'opexChangeTotal'){

                        console.log('should be setting the negative value for opex');
                        element.classList.remove('neutral');
                        element.classList.add('negative');
                    } else {
                        element.classList.remove('neutral');
                        element.classList.add('positive');
                    }
                }

            }
        }

        var helper = {

            guid : function() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
                }
                return 'UUID' + s4() + s4() + s4() + s4() + s4() + s4() + 'id';
            },

            getMonthText : function(monthNumber) {
                switch (monthNumber) {

                    case 0: monthText = "Jan";
                        break;
                    case 1: monthText = "Feb";
                        break;
                    case 2: monthText = "Mar";
                        break;
                    case 3: monthText = "Apr";
                        break;
                    case 4: monthText = "May";
                        break;
                    case 5: monthText = "Jun";
                        break;
                    case 6: monthText = "Jul";
                        break;
                    case 7: monthText = "Aug";
                        break;
                    case 8: monthText = "Sep";
                        break;
                    case 9: monthText = "Oct";
                        break;
                    case 10: monthText = "Nov";
                        break;
                    case 11: monthText = "Dec";
                }

                return monthText;
            },

            hideChanges : function(hide){

                var changeBlocks = document.getElementsByClassName('changeBlock');

                for (var x = 0; x < changeBlocks.length; x++){
                    changeBlocks[x].style.display = (hide) ? 'none' : 'block';
                    isSnapshotEligible            = !hide;
                }

                if (!hide) {
                    getSnapshotDates();
                }
            }
        };

        function exportOppReportData(){

            var reportData = [];

            iterator.forEach(function (iteratorElement) {

                var monthData = oppReportData[iteratorElement];
                var typeIterator = Object.keys(monthData);

                typeIterator.forEach(function (monthElement) {

                    var oppRows     = monthData[monthElement];
                    var oppIterator = Object.keys(oppRows);

                    oppIterator.forEach(function (element) {

                        if (oppRows[element].EventMonthYear__c === iteratorElement || !oppRows[element].EventMonthYear__c) {

                            if (oppRows[element].EventMonthYear__c === iteratorElement){

                                var revenue     = (oppRows[element].Committed__c) ? oppRows[element].CommittedRevenue__c : oppRows[element].Amount_Calder__c;
                                var profit      = (oppRows[element].Committed__c) ? oppRows[element].CommittedProfit__c : oppRows[element].Gross_profit_2__c;
                                var costOfSale  = (oppRows[element].Committed__c) ? oppRows[element].CommittedCOS__c : oppRows[element].Filtered_Cost_of_Sale__c;
                                var projectMngr = (oppRows[element].Project_Manager__c) ?
                                    oppRows[element].Project_Manager__r.FirstName.substr(0, 1) + '. ' + oppRows[element].Project_Manager__r.LastName : '';

                                var endDate = new Date(oppRows[element].Event_end__c);
                                endDate.setHours(endDate.getHours() + (endDate.getTimezoneOffset() / 60));

                                reportData.push(
                                    {
                                        AccountManager: oppRows[element].Owner.FirstName.substr(0, 1) + '. ' + oppRows[element].Owner.LastName,
                                        ProjectManager: projectMngr,
                                        Job: oppRows[element].Filtered_Job_Number__c,
                                        Name: '"' + oppRows[element].Name.replace(/,/g, ' ') + '"',
                                        Account: '"' + oppRows[element].Account.Name.replace(/,/g, ' ') + '"',
                                        StartDate: '' + (new Date(oppRows[element].Event_end__c).getMonth() + 1) + '/' +
                                                        new Date(oppRows[element].Event_end__c).getFullYear(),
                                        EndDate: '' + (endDate.getMonth() + 1) + '/' + endDate.getFullYear(),
                                        Stage: oppRows[element].StageName,
                                        Amount: revenue,
                                        GrossProfit: profit,
                                        CostOfSale: costOfSale,
                                        Margin: oppRows[element].Gross_Margin__c,
                                        Invoiced: oppRows[element].Amount_Invoiced2__c,
                                        Paid: oppRows[element].Amount_Paid__c,
                                        RecStatus: oppRows[element].Quote_Status__c,
                                        COSBilled: oppRows[element].Quickbooks_COS__c,
                                        COSPaid: oppRows[element].Quickbooks_COS_Paid__c,
                                        Probability: oppRows[element].Probability
                                    });
                            } else if (!oppRows[element].EventMonthYear__c){
                                if (oppRows[element].Adjustments__r){

                                    var adjustments = oppRows[element].Adjustments__r;
                                    for (var x = 0; x < adjustments.length; x++){

                                        reportData.push(
                                            {
                                                AccountManager: '',
                                                ProjectManager: '',
                                                Job: '',
                                                Name: oppRows[element].Filtered_Job_Number__c + ' ' + oppRows[element].Name,
                                                Account: '',
                                                StartDate: '' + adjustments[x].Month__c.substring(5,7) + '/' +
                                                adjustments[x].Month__c.substring(0,4),
                                                EndDate: '' + adjustments[x].Month__c.substring(5,7) + '/' +
                                                adjustments[x].Month__c.substring(0,4),
                                                Stage: 'Closed Won',
                                                Amount: adjustments[x].Revenue__c,
                                                GrossProfit: adjustments[x].Profit__c,
                                                CostOfSale: adjustments[x].CostOfSale__c,
                                                Margin: '',
                                                Invoiced: '',
                                                Paid: '',
                                                RecStatus: '',
                                                COSBilled: '',
                                                COSPaid: '',
                                                Probability: '100'
                                            });
                                    }
                                }
                            }

                        } else if (oppRows[element].Adjustments__r) {

                            var adjustments = oppRows[element].Adjustments__r;

                            for (var x = 0; x < adjustments.length; x++) {
                                if (adjustments[x].EventMonthYear__c === iteratorElement){

                                    var endDate = new Date(adjustments[x].Month__c);
                                    endDate.setHours(endDate.getHours() + (endDate.getTimezoneOffset() / 60));

                                    reportData.push(
                                        {
                                            AccountManager: '',
                                            ProjectManager: '',
                                            Job: oppRows[element].Filtered_Job_Number__c,
                                            Name: oppRows[element].Name.replace(/,/g, ' '),
                                            Account: oppRows[element].Account.Name.replace(/,/g, ' '),
                                            StartDate: '' + (endDate.getMonth() + 1) + '/' + endDate.getFullYear(),
                                            EndDate: '' + (endDate.getMonth() + 1) + '/' + endDate.getFullYear(),
                                            Stage: oppRows[element].StageName,
                                            Amount: adjustments[x].Revenue__c,
                                            GrossProfit: adjustments[x].Profit__c,
                                            CostOfSale: adjustments[x].CostOfSale__c,
                                            Margin: '',
                                            Invoiced: '',
                                            Paid: '',
                                            RecStatus: '',
                                            COSBilled: '',
                                            COSPaid: '',
                                            Probability: oppRows[element].Probability
                                        });
                                }
                            }

                        }
                    });
                });
            });

            return reportData;

        }

        function convertArrayOfObjectsToCSV(args) {
            var result, ctr, keys, columnDelimiter, lineDelimiter, data;

            data = args.data || null;
            if (data == null || !data.length) {
                return null;
            }

            columnDelimiter = args.columnDelimiter || ',';
            lineDelimiter = args.lineDelimiter || '\n';

            keys = Object.keys(data[0]);

            result = '';
            result += keys.join(columnDelimiter);
            result += lineDelimiter;

            data.forEach(function(item) {
                ctr = 0;
                keys.forEach(function(key) {
                    if (ctr > 0) result += columnDelimiter;

                    result += item[key];
                    ctr++;
                });
                result += lineDelimiter;
            });

            return result;
        }

        function downloadCSV() {

            var args = exportOppReportData();
            var data, filename, link;
            var csv = convertArrayOfObjectsToCSV({
                data: args
            });
            if (csv == null) return;

            filename = args.filename || 'SalesDashboardExport.csv';

            if (!csv.match(/^data:text\/csv/i)) {
                csv = 'data:text/csv;charset=utf-8,' + csv;
            }
            data = encodeURI(csv);

            link = document.createElement('a');
            link.setAttribute('href', data);
            link.setAttribute('download', filename);
            link.click();
        }

        function buildCashFlowManager(){

            var keys            = Object.keys(cashflowData);
            var managerColumns  = '';
            var colDates        = [];

            keys.forEach(function(element){
                var data = cashflowData[element];

                if (element === 'WEEK COMMENCING'){

                    colDates = data;

                    managerColumns += '<div style="position:sticky;top:28px;z-index:100;">' +
                        '<div class="cashFlowManagerRow">' +
                        '<div style="position:sticky;left:0;top:0;background-color:white;z-index:100;">' +
                        '   <div class="leftColumn leftColumnFixed" style="width:200px;">WEEK COMMENCING</div>' +
                        '</div>';
                    for (var x = 0; x < data.length; x++){
                        document.getElementById('weekCommencing').innerHTML += '<div class="figure">' +
                            new Date(data[x]).toString().substr(0, 10) + '</div>';
                        var Id = new Date(data[x]).getTime().toString().substr(0,6);

                        managerColumns +=
                            '<div style="background-color:white;z-index:50;">' +
                            '   <div class="weekColumn">' +
                            '       <div class="entryHolderContainer">' +
                            '           <div class="figure managerFigure">' + new Date(data[x]).toString().substr(0, 10) + '</div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                        if (x === (data.length -1)){
                            cashflowManagerClose = new Date(data[x]);
                        }
                    }

                    managerColumns += '</div></div>';

                } else if (element === 'OPENING BALANCE'){

                    managerColumns += '<div style="position:sticky;top:50px;z-index:100;">' +
                            '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                            '<div style="position:sticky;left:0;top:0;background-color:white;z-index:100;">' +
                            '   <div class="leftColumn leftColumnFixed" style="width:200px;">OPENING BALANCE</div>' +
                            '</div>';

                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : ' ';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('openingBalance').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        managerColumns +=
                            '<div style="background-color:white;z-index:50;">' +
                            '   <div class="weekColumn">' +
                            '       <div class="entryHolderContainer">' +
                            '           <div id="openingBalance' + x.toString() + '" class="' + colorClass + ' figure managerFigure">' +
                                        '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +  '</div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                    }

                    managerColumns += '</div></div>';

                } else if (element === 'IN ENTRIES'){

                    managerColumns += '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                        '<div style="position:sticky;left:0;background-color:white;z-index:50;border-bottom: 0.5px solid #aaaaaa;">' +
                        '   <div class="leftColumn leftColumnFixed" ' +
                        'style="width:200px;border-bottom: none;font-size:90px;color:lightgrey;font-weight: bold;padding-top:20%;position:sticky;top:10px;">IN</div>' +
                        '</div>';

                    for (var x = 0; x < colDates.length; x++){
                        var startingDate    = new Date(colDates[x]);
                        var day             = startingDate.getDay();
                        var offset;

                        if (day < 3){
                            offset = 3 - day;
                            startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
                        } else if (day > 3){
                            offset = 10 - day;
                            startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
                        }

                        var Id = startingDate.getTime() + 'IN';

                        managerColumns +=
                            '<div>' +
                            '   <div class="weekColumn">' +
                            '       <div class="entryHolderContainer">' +
                            '           <div class="dropTarget" id="' + Id + 'target"  ' + ' flowRow1 ' +
                            '           ondragover="allowDrop(event)" ondrop="drop(event,\'' + Id + '\',' + '\'' + startingDate + '\')">' +
                            '               <i class="fas fa-plus-circle dropCircle"></i>' +
                            '           </div>' +
                            '           <div class="entryHolder" id="' + Id + '" ondragover="showTarget(\'' + Id + '\',\'IN\')">' +
                            '           </div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                    }

                    managerColumns += '</div>';

                    var entryKeys = Object.keys(cashflowData[element]);
                    var holder = document.getElementById('inflows');
                    entryKeys.forEach(function(key){
                        var figures = cashflowData[element][key];
                        var values = '';
                        for (var x = 0; x < figures.length; x++){
                            var colorClass = (figures[x] < 0) ? 'negative' : (figures[x] === 0) ? 'noValue' : ' ';
                            var multiplier = (figures[x] < 0) ? -1 : 1;
                            values +=
                                '<div class="' + colorClass + ' figure">' + '£' +
                                (figures[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        }
                        holder.innerHTML += '<div class="cashFlowRow cashFlowDetailRow"><div class="leftColumn noSpill">' +
                            key + '</div>' + values + '</div>';
                    });

                } else if (element === 'TOTAL INFLOW'){

                    managerColumns += '<div style="position:sticky;bottom:23px;z-index:50;">' +
                        '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                        '<div style="position:sticky;left:0;background-color:white;z-index:50;">' +
                        '   <div class="leftColumn leftColumnFixed" style="width:200px;padding-top:4px;">TOTAL INFLOW</div>' +
                        '</div>';

                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : ' ';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('totalInflows').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' +
                            (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        managerColumns +=
                            '<div>' +
                            '   <div class="weekColumn  cashFlowManagerHeader">' +
                            '       <div class="entryHolderContainer">' +
                            '           <div id="totalInflow' + x.toString() + '" class="' + colorClass + ' figure managerFigure">' + '£' +
                                        (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                    }

                    managerColumns += '</div></div>';

                } else if (element === 'OUT ENTRIES'){

                    var entryKeys = Object.keys(cashflowData[element]);

                    entryKeys.forEach(function(element){
                        managerColumns += '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                            '<div style="position:sticky;left:0;background-color:white;z-index:30;border-bottom: 0.5px solid #aaaaaa;">' +
                            '   <div class="leftColumn leftColumnFixed" ' +
                            'style="width:200px;border-bottom: none;font-size:75px;color:lightgrey;font-weight: bold;padding-top:20px;position:sticky;top:10px;">' +
                            '<span style="font-size: 22px;">' + element.toUpperCase() + '</span></div>' +
                            '</div>';

                        for (var x = 0; x < colDates.length; x++){
                            var startingDate    = new Date(colDates[x]);
                            var day             = startingDate.getDay();
                            var offset;


                            if (day < 3){
                                offset = 3 - day;
                                startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
                            } else if (day > 3){
                                offset = 10 - day;
                                startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
                            }

                            var type    = 'OUT' + element.toUpperCase();
                            var Id      = startingDate.getTime() + type;

                            managerColumns +=
                                '<div>' +
                                '   <div class="weekColumn">' +
                                '       <div class="entryHolderContainer">' +
                                '           <div class="dropTarget" id="' + Id + 'target"  ' + ' flowRow1 ' +
                                '               ondragover="allowDrop(event)" ondrop="drop(event,\'' + Id + '\',' + '\'' + startingDate + '\')">' +
                                '               <i class="fas fa-plus-circle dropCircle"></i>' +
                                '           </div>' +
                                '           <div class="entryHolder" id="' + Id + '" ondragover="showTarget(\'' + Id + '\',\'' + type + '\')" ' +
                                '                style="min-height:100px;"></div>' +
                                '       </div>' +
                                '   </div>' +
                                '</div>';
                        }

                        managerColumns += '</div>';

                    });

                    var holder = document.getElementById('outflows');
                    entryKeys.forEach(function(key){
                        var figures = cashflowData[element][key];
                        var values = '';
                        for (var x = 0; x < figures.length; x++){
                            var colorClass = (figures[x] < 0) ? 'negative' : (figures[x] === 0) ? 'noValue' : ' ';
                            var multiplier = (figures[x] < 0) ? -1 : 1;
                            values +=
                                '<div class="' + colorClass + ' figure">' + '£' + (figures[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        }
                        holder.innerHTML += '<div class="cashFlowRow cashFlowDetailRow"><div class="leftColumn noSpill">' + key + '</div>' + values + '</div>';
                    });
                } else if (element === 'TOTAL OUTFLOW'){

                    managerColumns += '<div style="position:sticky;bottom:21px;z-index:45;">' +
                        '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                        '<div style="position:sticky;left:0;background-color:white;z-index:45;">' +
                        '   <div class="leftColumn leftColumnFixed" style="width:200px;">TOTAL OUTFLOW</div>' +
                        '</div>';

                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : ' ';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('totalOutflows').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        managerColumns +=
                            '<div>' +
                            '   <div class="weekColumn">' +
                            '       <div class="entryHolderContainer"  style="background-color: white;">' +
                            '           <div id="totalOutflow' + x.toString() + '" class="' + colorClass + ' figure managerFigure">' +
                                        '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                    }
                    managerColumns += '</div></div>';
                } else if (element === 'CLOSING BALANCE'){
                    managerColumns += '<div style="position:sticky;bottom:0;z-index:100;">' +
                            '<div class="cashFlowManagerRow cashFlowManagerHeader">' +
                            '<div style="position:sticky;left:0;background-color:white;z-index:100;">' +
                            '   <div class="leftColumn leftColumnFixed" style="width:200px;">CLOSING BALANCE</div>' +
                            '</div>';
                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : ' ';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('closingBalance').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        managerColumns +=
                            '<div>' +
                            '   <div class="weekColumn">' +
                            '       <div class="entryHolderContainer" style="background-color: white;">' +
                            '           <div id="closingBalance' + x.toString() + '" class="' + colorClass + ' figure managerFigure">' +
                                        '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") +  '</div>' +
                            '       </div>' +
                            '   </div>' +
                            '</div>';
                    }
                    managerColumns += '</div></div>';
                }
            });

            document.getElementById('cashFlowRowManager').innerHTML += managerColumns;
            document.getElementById('cashFlowRowManager').style.height = document.getElementById('cashFlowReport').offsetHeight + 'px';

            loadCashflowEntries();
        }

        function loadCashflowEntries(){

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getCashflowEntries}',
                cashflowManagerClose,
                function (result, event) {
                    if (event.status) {
                        for (var x = 0; x < result.length; x++){
                            addEntry(result[x]);
                        }
                    }
                }
            );
        }

        function updateCashFlowManager(){

            document.getElementById('cashFlowReport').innerHTML = cashFlowReport.innerHTML;
            var keys            = Object.keys(cashflowData);

            keys.forEach(function(element){
                var data = cashflowData[element];

                if (element === 'WEEK COMMENCING'){
                    for (var x = 0; x < data.length; x++){
                        document.getElementById('weekCommencing').innerHTML += '<div class="figure">' +
                            new Date(data[x]).toString().substr(0, 10) + '</div>';
                    }

                } else if (element === 'OPENING BALANCE'){
                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : 'default';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('openingBalance').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        document.getElementById('openingBalance' + x).innerHTML = '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        if (colorClass === 'negative'){
                            document.getElementById('openingBalance' + x).classList.add(colorClass);
                        } else {
                            document.getElementById('openingBalance' + x).classList.remove(colorClass);
                        }
                    }
                } else if (element === 'IN ENTRIES'){
                    var entryKeys = Object.keys(cashflowData[element]);
                    var holder = document.getElementById('inflows');
                    entryKeys.forEach(function(key){
                        var figures = cashflowData[element][key];
                        var values = '';
                        for (var x = 0; x < figures.length; x++){
                            var colorClass = (figures[x] < 0) ? 'negative' : (figures[x] === 0) ? 'noValue' : 'default';
                            var multiplier = (figures[x] < 0) ? -1 : 1;
                            values +=
                                '<div class="' + colorClass + ' figure">' + '£' +
                                (figures[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        }
                        holder.innerHTML += '<div class="cashFlowRow cashFlowDetailRow"><div class="leftColumn noSpill">' +
                            key + '</div>' + values + '</div>';
                    });

                } else if (element === 'TOTAL INFLOW'){
                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : 'default';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('totalInflows').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' +
                            (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        document.getElementById('totalInflow' + x).innerHTML = '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        if (colorClass === 'negative'){
                            document.getElementById('totalInflow' + x).classList.add(colorClass);
                        } else {
                            document.getElementById('totalInflow' + x).classList.remove(colorClass);
                        }
                    }
                } else if (element === 'OUT ENTRIES'){
                    var entryKeys = Object.keys(cashflowData[element]);
                    var holder = document.getElementById('outflows');
                    entryKeys.forEach(function(key){
                        var figures = cashflowData[element][key];
                        var values = '';
                        for (var x = 0; x < figures.length; x++){
                            var colorClass = (figures[x] < 0) ? 'negative' : (figures[x] === 0) ? 'noValue' : 'default';
                            var multiplier = (figures[x] < 0) ? -1 : 1;
                            values +=
                                '<div class="' + colorClass + ' figure">' + '£' + (figures[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        }
                        holder.innerHTML += '<div class="cashFlowRow cashFlowDetailRow"><div class="leftColumn noSpill">' + key + '</div>' + values + '</div>';
                    });
                } else if (element === 'TOTAL OUTFLOW'){

                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : 'default';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('totalOutflows').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        document.getElementById('totalOutflow' + x).innerHTML = '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        if (colorClass === 'negative'){
                            document.getElementById('totalOutflow' + x).classList.add(colorClass);
                        } else {
                            document.getElementById('totalOutflow' + x).classList.remove(colorClass);
                        }
                    }
                } else if (element === 'CLOSING BALANCE'){
                    for (var x = 0; x < data.length; x++){
                        var colorClass = (data[x] < 0) ? 'negative' : 'default';
                        var multiplier = (data[x] < 0) ? -1 : 1;
                        document.getElementById('closingBalance').innerHTML +=
                            '<div class="' + colorClass + ' figure">' + '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        document.getElementById('closingBalance' + x).innerHTML = '£' + (data[x] * multiplier).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + '</div>';
                        if (colorClass === 'negative'){
                            document.getElementById('closingBalance' + x).classList.add(colorClass);
                        } else {
                            document.getElementById('closingBalance' + x).classList.remove(colorClass);
                        }
                    }
                }
            });
        }

        function toggleManager(){
            if (document.getElementById('cashFlowReport').style.display === 'block'){
                document.getElementById('cashFlowReport').style.display = 'none';
                document.getElementById('cashFlowRowManager').style.display = 'block';
            } else {
                document.getElementById('cashFlowReport').style.display = 'block';
                document.getElementById('cashFlowRowManager').style.display = 'none';
            }
        }

        function showDetails(Id){

            var detailDivs = document.getElementsByClassName('entryDetails');
            for (var x = 0; x < detailDivs.length; x++){
                if (detailDivs[x].id !== (Id + 'details')){
                    detailDivs[x].style.display = 'none';
                }
            }

            var inputDivs = document.getElementsByClassName('amountInput');
            for (var x = 0; x < inputDivs.length; x++){
                inputDivs[x].style.display = 'none';
            }

            var amountDivs = document.getElementsByClassName('entryAmount');
            for (var x = 0; x < amountDivs.length; x++){
                amountDivs[x].style.display = 'block';
            }

            if (document.getElementById(Id + 'details').style.display === 'block'){
                document.getElementById(Id + 'details').style.display = 'none';
            } else {
                document.getElementById(Id + 'details').style.display = 'block';
            }

        }

        function showAmountInput(Id, event){
            event.stopPropagation();
            document.getElementById(Id + 'amount').style.display = 'none';
            document.getElementById(Id + 'amountInput').style.display = 'block';
        }

        function changeAmount(Id, type, event){

            if (event.keyCode === 13) {

                document.getElementById(Id + 'amountInput').style.display = 'none';
                document.getElementById(Id + 'amount').style.display = 'block';

                var amount = document.getElementById(Id + 'amountInput').value;

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.SalesDashboardRemoter.updateEntryAmount}',
                    Id,
                    amount,
                    type,
                    function (result, event) {
                        if (event.status) {
                            document.getElementById(Id).remove();
                            addEntry(result);
                            resetBalances();
                        }
                    });
            }
        }

        function allowDrop(event) {
            event.preventDefault();
        }

        function showTarget(Id, type){

            var dropTargets = document.getElementsByClassName('dropTarget');
            for (var x = 0; x < dropTargets.length; x++){
                dropTargets[x].style.display = 'none';
            }

            if (type === currentEntryType){
                document.getElementById(Id + 'target').style.display = 'block';
            }
        }

        function drag(event,sourceId,type) {
            event.dataTransfer.setData("text", event.target.id);
            currentEntryType = type;
        }

        function drop(event, Id, date) {

            document.getElementById(Id + 'target').style.display = 'none';
            var data = event.dataTransfer.getData("text");
            date = new Date(date);

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.updateEntryDate}',
                data,
                new Date(date.getFullYear(), date.getMonth(), date.getDate()),
                currentEntryType,
                function (result, event) {
                    if (event.status) {
                        document.getElementById(data).remove();
                        addEntry(result);
                        resetBalances();
                    }
                }
            );
        }

        function markAsPaid(Id, type, event){

            event.stopPropagation();

            if (confirm('By marking this record as paid it\'s value will be removed from the cashflow. ' +
                'Do you want to proceed?')){

                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.SalesDashboardRemoter.markAsPaid}',
                    Id,
                    type,
                    function (result, event) {
                        if (event.status) {
                            document.getElementById(Id).remove();
                            resetBalances();
                        }
                    }
                );
            }
        }

        function addEntry(result){

            var startingDate    = new Date(result.Date__c);
            var day             = startingDate.getDay();
            var offset;

            if (day < 3){
                offset = 3 - day;
                startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
            } else if (day > 3){
                offset = 10 - day;
                startingDate = new Date(startingDate.setDate(startingDate.getDate() + offset));
            }

            var type        = (result.OutFlow__c) ? 'OUT' + result.Category__c.toUpperCase() : 'IN';
            var Id          = startingDate.getTime() + type;
            var draggable   = (result.Source__c === 'Overheads' ||
                result.Source__c === 'Quickbooks' ||
                result.Source__c === 'Custom');
            var amountEditable = (result.Category__c === 'VAT' ||
                result.Category__c === 'Credit card' ||
                result.Category__c === 'Payroll / pension' ||
                result.Category__c === 'Direct debit' ||
                result.Category__c === 'Management fees');

            var editIcon = (amountEditable) ? '<i class="far fa-edit" style="margin-left: 3px;color:grey;"' +
                'onclick="showAmountInput(\'' + result.Id + '\',event)" ></i>' : '';

            var amountInput = (amountEditable) ?
                '<input style="display:none;width:95%;" id="' +
                result.Id + 'amountInput" class="amountInput" type="number" value="' +
                (result.Amount__c).toFixed(0) + '" onclick="event.stopPropagation()"' +
                'onkeyup="changeAmount(\'' + result.Id + '\',\'' + type + '\',event)"/>' : '';

            var removeEntry = (amountEditable) ?
                '<div class="paidButton" onclick="markAsPaid(\'' + result.Id + '\',\'' + type + '\',event)">MARK AS PAID</div>' : '';

            // console.log('trying to find the id ' + Id);

            if (document.getElementById(Id)){

                document.getElementById(Id).innerHTML +=
                    '<div class="cashFlowEntry ' + result.Source__c + '"' +
                    '   id="' + result.Id + '" draggable="' + draggable + '" ' +
                    '   ondragstart="drag(event,' + result.Id + ',\'' + type + '\')" ' +
                    '   onclick="showDetails(\'' + result.Id + '\',' + amountEditable + ')">' +
                    '   <div>' + result.Description__c + '</div>' +
                    '   <div  style="text-align: right;">' +
                    '       <div id="' + result.Id + 'amount" class="entryAmount">' + '£' +
                    (result.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") + editIcon +
                    '       </div>' +
                    amountInput +
                    '   </div>' +
                    '   <div id="' + result.Id + 'details" class="entryDetails noSpill" style="white-space: pre-wrap;">' +
                    '       <div>-------------------</div>' +
                    '   <div style="font-weight: normal" id="' + result.Id + 'date">' +
                    new Date(result.Date__c).toString().substr(0, 10) +
                    '   </div>' +
                    result.Details__c + removeEntry +
                    '   </div>' +
                    '</div>';
            }

        }

        function resetBalances(){

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getCashflowData}',
                function(result, event){
                    if (event.status){
                        cashflowData = result;
                        updateCashFlowManager();
                    }
                }
            );

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.getBalances}',
                startDate,
                endDate,
                function (result, event) {
                    if (event.status) {
                        balanceTotals   = result;
                        balanceIterator = Object.keys(balanceTotals);
                        drawBalances();
                    }
                }
            );
        }

        function getBudgetOptions() {

            if (!document.getElementById('quickbooksBudget').classList.contains('updated')){
                if (document.getElementById('datePicklist').value === 'CURRENT FY' ||
                    document.getElementById('datePicklist').value === 'NEXT FY') {

                    var year        = document.getElementById('datePicklist').value;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.SalesDashboardRemoter.getQBBudgets}',
                        year,
                        function (result, event) {
                            if (event.status) {

                                console.log(result);

                                var forecastList    = document.getElementById('forecastList');
                                var budgetList      = document.getElementById('budgetList');
                                var queryResponse   = result['budgets']['QueryResponse'];
                                var budgets         = queryResponse['Budget'];
                                var budgetAlert     = '';
                                var forecastAlert   = '';

                                budgets.forEach(function (budget) {
                                    var startDate   = new Date(budget['StartDate']);
                                    var endDate     = new Date(budget['EndDate']);

                                    if (budget['BudgetEntryType'] === 'Monthly' && startDate.getMonth() === 3
                                        && startDate.getDate() === 1 && endDate.getMonth() === 2 && endDate.getDate() === 31){
                                        if (budget['Name'] === result['budgetSource'] &&
                                            new Date(budget['MetaData'].LastUpdatedTime) > new Date(result['budgetUpdate'])){
                                            budgetAlert = '<i style="color:red;" class="fas fa-exclamation-triangle"></i>';
                                        }
                                        if (budget['Name'] === result['forecastSource'] &&
                                            new Date(budget['MetaData'].LastUpdatedTime) > new Date(result['forecastUpdate'])){
                                            forecastAlert = '<i style="color:red;" class="fas fa-exclamation-triangle"></i>';
                                        }

                                        var selectedBudget      = (budget['Name'] === result['budgetSource']) ? 'selected ' : '';
                                        var selectedForecast    = (budget['Name'] === result['forecastSource']) ? 'selected ' : '';

                                        forecastList.innerHTML += '<option value="' + budget['Id'] + '" ' + selectedForecast + '>' +
                                            budget['Name'] + forecastAlert + '</option>';
                                        budgetList.innerHTML += '<option value="' + budget['Id'] + '" ' + selectedBudget + '>' +
                                            budget['Name'] + budgetAlert +'</option>';
                                    }
                                });

                                var monthList = document.getElementById('closedMonth');

                                if (document.getElementById('datePicklist').value === 'NEXT FY'){
                                    monthList.innerHTML += '<option value="">UNAVAILABLE</div>';
                                    monthList.disabled = true;
                                    document.getElementById('closedOpex').innerHTML = 'Closed';
                                } else {
                                    var closeDate = new Date(result['closedMonth']);
                                    closeDate.setHours(closeDate.getHours() + (closeDate.getTimezoneOffset() / 60));
                                    var closeText = closeDate.toDateString();
                                    document.getElementById('closedOpex').innerHTML = 'Closed (' + closeText.substr(4,4) +
                                        closeText.substring(closeText.length -4, closeText.length) + ')';

                                    var startingDate = new Date(closeDate);
                                    startingDate.setMonth(startingDate.getMonth() - 1);

                                    while (startingDate < today){
                                        var selected = (startingDate.getMonth() === closeDate.getMonth()) ? 'selected' : '';

                                        monthList.innerHTML += '<option value="' + startingDate + '" ' + selected + '>' +
                                            startingDate.toLocaleString('en-us', { month: 'long' }) + ' ' + startingDate.getFullYear() +
                                            '</option>';
                                        startingDate.setMonth(startingDate.getMonth() + 1);
                                    }
                                }

                                document.getElementById('budget').innerHTML = result['budgetSource'] + ' ' + budgetAlert;
                                document.getElementById('forecast').innerHTML = result['forecastSource'] + ' ' + forecastAlert;


                                document.getElementById('quickbooksBudget').classList.add('updated');
                            }
                        }
                    );
                } else {
                    document.getElementById('budget').innerHTML     = 'Budget';
                    document.getElementById('forecast').innerHTML   = 'Forecast';
                    document.getElementById('closedOpex').innerHTML = 'Closed';
                }
            }
        }

        function showBudgetOptions() {

            if (document.getElementById('datePicklist').value === 'CURRENT FY' ||
                document.getElementById('datePicklist').value === 'NEXT FY') {

                document.getElementById('dimmer').style.display = 'block';
                var budgetBlock = document.getElementById('quickbooksBudget');
                budgetBlock.style.display = 'block';
            }
        }

        function showUpdateOption() {
            if (document.getElementById('qbBudgetButton').style.display === 'none'){
                document.getElementById('qbBudgetButton').style.display = 'inline';
            }
        }

        function updateBudgetForecasts(){

            document.getElementById('qbBudgetButton').style.display     = 'none';
            document.getElementById('qbBudgetPending').style.display    = 'block';
            document.getElementById('budgetList').disabled              = 'true';
            document.getElementById('forecastList').disabled            = 'true';
            document.getElementById('closedMonth').disabled             = 'true';

            var budgetId    = document.getElementById('budgetList').value;
            var forecastId  = document.getElementById('forecastList').value;
            var year        = document.getElementById('datePicklist').value;
            var closeDate   = null;
            if (document.getElementById('closedMonth').value){
                var monthVal    = new Date(document.getElementById('closedMonth').value);
                var day         = (monthVal.getDate()) < 10 ? '0' + monthVal.getDate() : monthVal.getDate();
                var month       = (monthVal.getMonth() < 10) ? '0' + (monthVal.getMonth() + 1) : (monthVal.getMonth() + 1);
                closeDate   = monthVal.getFullYear() + '-' + month + '-' + day;
            }

            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.SalesDashboardRemoter.updateBudgets}',
                budgetId,
                forecastId,
                year,
                closeDate,
                function(result, event) {
                    if (event.status) {
                        hideAll();
                        doInit();
                        document.getElementById('qbBudgetButton').style.display     = 'none';
                        document.getElementById('qbBudgetPending').style.display    = 'none';
                        document.getElementById('budgetList').removeAttribute('disabled');
                        document.getElementById('forecastList').removeAttribute('disabled');
                    }
                }
            );

        }


    </script>

</apex:page>