<!--
 - Created by Ronan Williams on 19/05/2019.
 -->
<apex:page id="Insights" controller="InsightsController" lightningStylesheets="true">

    <html xmlns:v-bind="http://vue.org" xmlns:v-on="http://vue.org">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
        <script src="https://cdn.jsdelivr.net/npm/vue"></script>
        <script src="https://unpkg.com/vue-numeric"></script>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>
    </head>

    <style>

        body {
            background-image: url("{!$Site.BaseUrl}/_slds/images/themes/lightning_blue/lightning_blue_background.png");
            background-size: 100%;
            background-repeat: no-repeat;
            background-position: top;
            background-color: #B0C4DF;
            background-attachment: fixed;
        }
        .box {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            padding: 10px;
            background-color: white;
            border: 0.5px solid grey;
            margin-bottom: 10px;
            position: relative;
            width: 100%;
        }
        .controlHolder {
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        .control {
            display: flex;
            justify-content: center;
        }
        .dateHolder {
            display: flex;
            overflow: hidden;
            font-size: 11px;
            padding-left: 10px;
            padding-right: 10px;
            font-weight: lighter;
            position:absolute;
            left:0;
        }
        .viewOptionHolder {
            display: flex;
            font-size: 15px;
            margin-left: 30px;
            border-radius: 5px;
            overflow: hidden;
        }
        .viewOption {
            padding: 6px;
            padding-left: 10px;
            padding-right: 10px;
            background-color: #d7d7d7;
            font-weight: lighter;
            cursor: pointer;
            opacity: 0.5;
        }
        .viewOption:hover {
            opacity: 1;
        }
        .activeSetting {
            opacity: 1 !important;
            background-color: #c1c1c1;
        }
        .dimmer {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
            top: 0;
            margin: auto;
            height: 100vh;
            width: 100vw;
            background-color: white;
            opacity: 0.75;
        }
        .boxLite {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            border-radius: 3px;
            padding: 5px;
            background-color: white;
            border: 0.5px solid lightgrey;
            margin:4px;
            position:relative;
        }
        .labelBlock {
            width: 100%;
            text-align: center;
            font-size: 16px;
        }
        .valueBlock {
            position: relative;
            text-align: center;
            justify-content: center;
            align-items: center;
            font-size: 28px;
            margin-bottom: 6px;
        }
        .splitTwo {
            display: grid;
            grid-template-columns: 50% 50%;
        }
        .splitFour {
            display: grid;
            grid-template-columns: 25% 25% 25% 25%;
        }
        .title {
            font-size: 18px;
            display: flex;
        }
        .optionsHolder {
            position: relative;
            width: 100%;
            display: flex;
            justify-content: flex-end;
        }
        .options {
            display: flex;
            border-radius: 3px;
            overflow: hidden;
            width: auto;
            font-size: 11px;
            height: 22px;
        }
        .option {
            padding-top: 4px;
            width: 100px;
            color: white;
            text-align: center;
            cursor: pointer;
            font-weight: lighter;
        }
        .optionLong {
            padding-top: 4px;
            width: 200px;
            color: white;
            text-align: center;
            cursor: pointer;
            font-size: 9px;
            position: relative;
        }
        .miniOptions {
            display: flex;
            font-size: 9px;

        }
        .miniOption {
            width: 50px;
        }
        .inactive {
            opacity : 0.5;
        }
        .report {
            width: 90%;
            height: 90%;
            background-color: white;
        }
        .graph {
            position: relative;
            /*height: 380px;*/
            height: 300px;
        }
        .confirmed {
            background-color: #262d3f;
        }
        .weighted {
            background-color: #2d7175;
        }
        .pipeline{
            background-color: #60c5c1;
        }
        .budget {
            background-color: #575858;
        }
        .target {
            background-color: green;
        }
        .opex{
            background-color: #b86267;
        }
        .budget {
            background-color: #575858;
        }
        .dim {
            opacity : 0.3;
        }
        .customButton{
            border-radius: 10px;
            cursor: pointer;
        }
        .customDates {
            display: flex;
        }
        .customDates > * {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 100%;
            padding-left: 6px;
            padding-right: 6px;
            vertical-align: middle;
        }
        .row {
            border-bottom: 0.5px solid lightgrey;
            min-height: 25px;
            position: relative;
            display: flex;
            cursor: default;
        }
        .rowTight {
            width: 100%;
        }
        .rowGrow {
            width: 3800px;
            font-size: 17px;
        }
        .recordRow{
            /*min-height:120px;*/
            min-height:132px;
            position: relative;
        }
        .column {
            margin: 1px;
            margin-right: 5px;
            height: auto;
            min-height: 23px;
            width: 200px;
            padding-left: 5px;
            position: sticky;
            left: 4px;
            background: white ;
            z-index: 501;
            box-shadow: 0 4px 8px 0 rgba(255,255,255, 0.1), 0 6px 20px 0 rgba(255,255,255, 0.1);
        }
        .week {
            margin: 1px;
            height: auto;
            min-height: 23px;
            text-align: right;
            padding-right: 5px;
            position: relative;
            transition: opacity 0.5s;
            transition-property: opacity;

        }
        .weekSmall {
            width: calc((100% - 200px) / 12);
        }
        .weekLarge {
            width: 280px;
        }
        .scroll {
            overflow-x: scroll;
            position: relative;
        }
        .bold {
            font-weight: bold;
        }
        .noSpill {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }



        .flowDate{
            background-color: white;
            position: sticky;
            top: 2px;
        }
        .icon {
            position: absolute;
            right: -7px;
            bottom: -6px;
            opacity: 0.4;
        }
        .iconImg {
            width: 30px;
        }
        .sortable {
            height: 100%;
            position: relative;
            /*z-index: 1;*/

            /*z-index: 1;*/
            /*margin-bottom: 72px;*/
        }
        .largeCol {
            font-weight: bolder;
            color: #b1b1b1;
            width: 200px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            z-index: 0;
        }
        .manageFlowIcon {
            opacity: 0.3;
            cursor: pointer;
            font-size: 24px;
            margin-left: 5px;
        }
        .manageFlowIcon:hover {
            opacity: 1;
        }
        .dropZone {
            position: absolute;
            width: 100%;
            bottom:0;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
        }
        .dropZoneActive {
            height: 100%;
            border: 0.5px solid #bcbcbc;
            background-image: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,1));
            z-index: 1;
        }
        .dropText {
            width: 97%;
            font-weight: bolder;
            opacity: 0.15;
            color: #686868;
            margin-right: 40px;
        }
        .dropTextDate {
            font-size: 21px;
        }
        .dropTextNumber {
            font-size: 34px;
            margin-top: -12px;
        }
        .selectOpt {
            height: 2px;
        }
        .colDivider {
            display: grid;
            grid-template-columns: 5% 6% 15% 13% 8% 8% 10% 10% 10% 7% 8%;
            padding-left: 4px;
            padding-right: 4px;
        }
        .headerDivider {
            display: grid;
            grid-template-columns: 55% 10% 10% 10% 6% 9%;
            padding-left: 4px;
            padding-right: 4px;
        }
        .sourceIndicator {
            position: absolute;
            right: 0;
            bottom: 0;
            font-weight: bold;
            text-align: right;
            opacity: 1;
            font-size: 10px;
            width: 64%;
            padding: 3px;
            color: white;
            border-top-left-radius: 3px;
        }
        .Quickbooks {
        }
        .QuickbooksIndicator {
            color: white;
            background-image: linear-gradient(to right, #fefdfd 40%, green);
        }
        .SalesforceIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , blue);
        }
        .SalesforcePIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , grey);
        }
        .BudgetIndicator, .VATIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , #b1a657);
        }
        .up {
            color: green;
        }
        .down {
            color: red;
        }
        .yearGrid {
            display: grid;
            grid-template-columns: 13% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 8%;
            justify-content: space-evenly;
            font-weight: lighter;
        }
        .yearEntry {
            width:100%;
            padding-right: 4px;
            text-align: right;
        }
        .header {
            font-weight: bold;
        }
        .monthTile {
            /*border-left: 0.5px solid lightgrey;*/
            text-align: right;
            /*padding: 4px;*/
            cursor: pointer;
            position: relative;
        }
        .figureTile:hover {
            background-color: #f2f2f2;
        }
        .reportCols {
            position: sticky;
            top: 0;
            background-color: #c1c1c1;
            /* color: white; */
            padding: 4px;
            z-index: 4;
            /*font-weight: lighter;*/
            padding-left: 9px;
        }
        .reportHeader {
            font-size: 17px;
            padding-left: 9px;
        }
        .reportMonth {
            /*font-weight: bold;*/
            background-color: #262d3f;
            color: white;
            position: sticky;
            top: 27px;
            z-index:3;
        }
        .stage {
            /*padding: 3px;*/
            font-size: 16px;
            /*border-top: 0.5px solid black;*/
            position: sticky;
            top: 51px;
            /*background-color: white;*/
            color: white;
            z-index: 2;
        }
        .reportRecord {
            cursor: pointer;
            border-bottom: 0.5px solid #e4e4e4;
            padding: 3px;
            min-height: 31px;
            color: black;
            font-size: 12px;
            position: relative;
        }
        .reportRecord:hover {
            background-color: #f4f4f4;
        }
        .inheritanceRow {
            cursor: pointer;
            border-bottom: 0.5px solid #e4e4e4;
            padding: 3px;
            min-height: 31px;
            color: black;
            font-size: 12px;
            position: relative;
            /*background-color: #2c7495;*/
        }
        .reportTotals {
            font-size: 16px;
            font-weight: bold;
        }
        .dragPrevent {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 1000000;
            /*background-color: grey;*/
            background-color: white;
            opacity: 0.8;
        }
        .record {
            margin-top: 2px;
            margin-bottom: -32px;
            width: 100%;
            border-radius: 3px;
            text-align: left;
            background-color: white;
            padding: 5px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            cursor: pointer;
            display: grid;
            grid-template-columns: 7% 66% 6% 21%;
            position: relative;
            color: black;
            font-size:10px;
            z-index: 1;
        }
        .recordDetails {
            position: absolute;
            margin-top: 9px;
            margin-left: -8px;
            border-radius: 3px;
            width: 100%;
            height: auto;
            padding: 5px;
            z-index: 50;
            background-color: white;
            border: 0.5px solid grey;
            /*box-shadow: 0 4px 8px 0 rgba(255,255,255, 0.4), 0 6px 20px 0 rgba(255,255,255, 0.4);*/
        }
        .recordDetailsHidden {
            display : none;
        }
        .recordOptionButton {
            font-size: 15px;
            margin: 3px;
            padding: 4px;
            background-color: white;
            border: 0.5px solid grey;
            border-radius: 3px;
            position: relative;
            display: grid;
            grid-template-columns: 10% 90%;
        }
        .recordOptionGrid {
            display: grid;
            grid-template-columns: 10% 90%;
        }
        .selectedRecord {
            z-index: 100000000000 !important;
        }
        .recordOptionButton > input {
            border: none;
        }
        .recordOptionButton > .fas, .far {
            padding-top: 3px;
        }
        .recordOptionButton:hover {
            background-color: #f7f7f7;
        }

        .flowOptionButton {
            font-size: 15px;
            margin: 3px;
            padding: 4px;
            background-color: white;
            border: 0.5px solid grey;
            border-radius: 3px;
            cursor: pointer;
        }
        @-webkit-keyframes example {
            from {height: 0;width:0;}
            to {height: auto;width: 100%;}
        }
        @keyframes example {
            from {height: 0px;width:0;}
            to {height: auto;width: 100%;}
        }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        .gapConcealer {
            position: absolute;
            height: 100%;
            width: 20px;
            top:0;
            left:-10px;
            background-color: white;
        }
        .faAbsolute {
            font-size: 17px;
            position: absolute;
            margin-left: 10px;
            margin-bottom: -6px;
            bottom: 13px;
        }
        body textarea, .slds-vf-scope textarea {
            border: 1px solid rgb(255, 255, 255);
            font-size: 13px;
            padding: 1px;
        }

        .ddSetup {
            display: grid;
            grid-template-columns: 40% 60%;
            padding: 5px;
            font-size: 13px;

        }
        body select, body select[size="0"], body select[size="1"],
        .slds-vf-scope select, .slds-vf-scope select[size="0"],
        .slds-vf-scope select[size="1"] {
            border: 1px solid rgb(221, 219, 218);
            max-width: 100%;
            width: 100%;
            border-radius: .25rem;
            background-color: rgb(255, 255, 255);
            color: rgb(8, 7, 7);
            -webkit-transition: border .1s linear, background-color .1s linear;
            transition: border .1s linear, background-color .1s linear;
        }

        .ddSetup > input, .ddSetup > select {
            width: 100%;

        }
        .adjustmentCount {
            position: absolute;
            right: -16px;
            color: white;
            width: 65px;
            height: 65px;
            font-weight: bold;
            border-bottom: 77px solid #b2a5d1;
            border-left: 25px solid transparent;
        }
        .rowContent {
            width: 100%;
            margin-left: -2px;
            position: absolute;
            background-color: white;
            z-index: 4;
            padding: 2px;
            border-radius: 4px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
        }
        .reportFilter {
            display: flex;
            justify-content: center;
            overflow: hidden;
            border-radius: 3px;
            position: relative;
            margin-right:5px;
            margin-left:5px;
        }
        .reportFilterOption {
            cursor: pointer;
            padding: 3px;
            padding-top: 8px;
            padding-bottom: 8px;
            color: white;
        }
        .flowManagerIcons {
            display: flex;
            justify-content: center;
            overflow: hidden;
            border-radius: 3px;
            /*position: absolute;*/
            top: 11px;
            margin-right: 5px;
            font-size: 24px;
            opacity: 0.5;

        }
        .flowManagerIcon {
            padding: 4px;
            border-radius: 4px;
            margin-left:4px;
            cursor: pointer;
        }
        .flowManagerIcon:hover {
            color: white;
            background: grey;
        }

        /*.reportStage {*/
            /*color: white;*/
        /*}*/
        .Closed {
            background-color: #2c7495;
            /*border-left: 5px solid #2c7495;*/
        }
        .Costed {
            background-color: #21a5ab;
            /*border-left: 5px solid #21a5ab;*/
        }
        .Pipeline {
            background-color: #5fc6c3;
            /*border-left: 5px solid #5fc6c3;*/
        }
        .Repeat {
            background-color: #8194bb;
            /*border-left: 5px solid #8194bb;*/
        }
        .Closedborder {
            border-left: 5px solid #2c7495;
        }
        .Costedborder {
            border-left: 5px solid #21a5ab;
        }
        .Pipelineborder {
            border-left: 5px solid #5fc6c3;
        }
        .Repeatborder {
            border-left: 5px solid #8194bb;
        }

        #app {
            width: 100%;
            max-width: 1500px;
            padding: 10px;
            position:relative;
        }

        .fadeIn {
            opacity: 0;
            background-color: white;
        }
        .fadeIn:hover {
            opacity:1;
        }
        .fade {
            -webkit-transition: opacity 0.3s;
            transition: opacity 0.3s;
        }
        .switch {
            font-size: 30px;
            cursor: pointer;
            position: absolute;
        }
        input[type=date]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            display: none;
        }
        .indicator {
            font-weight: bold;
            border-radius: 50%;
            color: white;
            height: 15px;
            width: 15px;
            text-align: center;
        }
        .QuickbooksCircle {
            background-color: green;
        }
        .SalesforceCircle {
            background-color: blue;
        }
        .SalesforcePCircle {
            background-color: grey;
        }
        .BudgetCircle {
            background-color: #b1a657;
        }
        .CustomCircle {
            background-color: #e6a8ff;
        }
        .DirectDebitCircle {
            background-color: black;
        }
        .commentIcon {
            padding-left: 4px;
            font-size: 15px;
            margin-top: -3px;
        }
        .description {
            height: 35px;
        }
        .amount {
            text-align: right;
        }
        .modalBackdrop {
            position: fixed;
            width: 100%;
            height: 100%;
            background-color: white;
            opacity: 0.8;
            z-index: 1000000;
            top:0;
            left:0;
        }
        .newEntryFormHolder {
            position:fixed;
            width:100%;
            display: flex;
            justify-content: center;
            top: 90px;
            z-index: 1000001;
        }
        .newEntryForm {
            width: 360px;
            padding: 10px;
            background-color: white;
            border-radius: 4px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            z-index: 1000001;
            position: relative;
            font-size: 16px;
        }
        .entryFormTitle {
            width: 100%;
            display: flex;
            justify-content: center;
            font-size: 18px;
            /*font-weight: bold;*/
        }
        .entryGrid {
            display : grid;
            grid-template-columns: 30% 70%;
            margin-top:11px;
        }
        .managerGrid {
            display : grid;
            grid-template-columns: 40% 60%;
            margin-top:11px;
        }

        .recordButtons {
            width: 100%;
            display: flex;
            justify-content: center;
            /* grid-template-columns: 50% 50%; */
            color: white;
            font-size: 18px;
            cursor: pointer;
            padding: 1px;
        }
        .recordButtonsSmall {
            position: relative !important;
            font-size: 15px !important;
        }
        .recordButton {
            height: 36px;
            width: 90%;
            display: flex;
            justify-content: center;
            padding-top: 4px;
            border-radius: 7px;
            /* padding: 5px; */
            margin: 5px;
        }
        .recordButtonSmall {
            height: 30px !important;
        }
        .recordButtonIcon {
            padding-top: 4px;
        }
        .save {
            background-color: #9f9d9d;
        }
        .cancel {
            background-color: #cecccc;
        }
        .save:hover {
            background-color: #2d7175;
        }
        .cancel:hover {
            background-color: #60c5c1;
        }
        .flowTypeIndicator {
            /*font-size: 83px;*/
            /*font-size: 75px;*/
            font-size: 63px;
            opacity: 0.2;
            position: absolute;
            /*bottom: -18px;*/
            top: -18px;
            width: 100vw;
        }
        .warnText {
            padding: 5px;
            font-size: 12px;
        }
        .amountInput {
            width: 100%;
            padding-left: 4px;
            border-radius: 4px;
            border: 1px solid lightgrey;
            height: 26px;
        }
        .loader {
            color: black;
            font-size: 90px;
            text-indent: -9999em;
            overflow: hidden;
            width: 1em;
            height: 1em;
            border-radius: 50%;
            margin: 72px auto;
            position: fixed;
            left: 46%;
            top: 23%;
            z-index: 10000000000;
            -webkit-transform: translateZ(0);
            -ms-transform: translateZ(0);
            transform: translateZ(0);
            -webkit-animation: load6 1.7s infinite ease, round 1.7s infinite ease;
            animation: load6 1.7s infinite ease, round 1.7s infinite ease;
        }
        @-webkit-keyframes load6 {
            0% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
            5%,
            95% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
            10%,
            59% {box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em;}
            20% {box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em;}
            38% {box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em;}
            100% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
        }
        @keyframes load6 {
            0% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
            5%,
            95% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
            10%,
            59% {box-shadow: 0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em, -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em, -0.297em -0.775em 0 -0.477em;}
            20% {box-shadow: 0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em, -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em, -0.749em -0.34em 0 -0.477em;}
            38% {box-shadow: 0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em, -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em, -0.82em -0.09em 0 -0.477em;}
            100% {box-shadow: 0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em, 0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em;}
        }
        @-webkit-keyframes round {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        @keyframes round {
            0% {
                -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
            }
            100% {
                -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
            }
        }
        .pendingMessage {
            position: fixed;
            top: 58%;
            left: 0;
            color: black;
            z-index: 10000000000;
            font-size: 24px;
            width: 100%;
            display: flex;
            justify-content: center;
            text-align: center;
        }
        .probabilityIndicator {
            position: absolute;
            left: 0;
            top: 0;
            border-bottom: 1px solid grey;
            text-align: right;
            /*padding-right: 2px;*/
            /*text-shadow: 0px 0px 2px #000000;*/
            /*color: white;*/
        }
        .recIndicator {
            position: absolute;
            left: 0;
            top: 0;
            display: flex;
            width: 100%;
            height: 15px;
        }
        .recCostOfSale {
            background-color: #f0b4b6;
            height: 100%;
        }
        .recProfit {
            background-color: #04ca04;
            height: 100%;
        }
        .hiddenTab {
            position: absolute;
            left: -1000%;
        }
        .hiddenTabLong {
            position: absolute;
            left: -1000%;
            width: 98%;
            max-width:1500px;
        }

        .billframe {
            position: fixed;
            top: 0;
            padding-top:30px;
            left:0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            z-index: 1000000000000;
        }
        .billframeHidden {
            display : none;
        }
        .manageIcon {
            position: absolute;
            top: 6px;
        }
        .triangle-right {
            width: 0;
            height: 0;
            border-top: 25px solid transparent;
            border-left: 20px solid #555;
            border-bottom: 25px solid transparent;
            position:absolute;
            right:-20px;
            top:0;
        }
        .historyIcon {
            margin-right: 8px;
            margin-left: 5px;
            font-size: 24px;
            opacity:0.5;
            cursor:pointer;
            padding: 4px;
            border-radius: 4px;
            -webkit-transition: opacity 0.5s;
            transition: opacity 0.5s;
        }
        .historyIcon:hover {
            color: white;
            background: grey;
        }
        .forbidden {
            background-color: lightcoral;
        }
        .faflow {
            color: grey;
            font-size: 12px;
        }
        .imageText {
            height: 25px;
            width: 25px;
            background-color: #c7c5c5;
            border-radius: 50%;
            color: white;
            font-size: 14px;
            text-align: center;
            padding-top: 2px;
            font-weight: bold;
        }
        .selectedTile {
            font-weight: bold;
            /*background-color: lightgrey;*/
        }
        .controlRight {
            position:absolute;
            right:10px;
            top:4px;
            background-color: white;
            border-radius: 12px;
            padding:5px;
            display: flex;
            flex-direction: row-reverse;
            cursor: pointer;
        }
        .controlRightBordered {
            border: 0.5px solid lightgrey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            -webkit-transition: opacity 0.5s;
            transition: opacity 0.5s;
            opacity: 0.6;
        }
        .controlRightBordered:hover {
            opacity: 1;
        }
        .reportIcon {
            opacity: 0.5;
        }
        .ageIndicator {
            color: white;
            padding-left: 2px;
            padding-right: 2px;
            border-radius: 2px;
            margin-right: 3px;
            text-align: center;
        }
        .newIndicator {
            background-color: green;
        }
        .oldIndicator {
            background-color: grey;
        }
        .stageHistoryBlock {
            height:100%;
            position:absolute;
            right:0;
            top:0;
            background-color: white;
        }
        .REPEAT {
            background-image: linear-gradient(rgb(129, 148, 187), rgba(255, 255, 255, 0));
        }
        .REPEATline {
            background-color: rgb(129, 148, 187);
        }
        .PIPELINE {
            background-image: linear-gradient(rgb(95, 197, 194), rgba(255, 255, 255, 0));
        }
        .PIPELINEline {
            background-color: rgb(95, 197, 194);
        }
        .COSTED {
            background-image: linear-gradient(rgb(33, 164, 170), rgba(255, 255, 255, 0));
        }
        .COSTEDline {
            background-color: rgb(33, 164, 170);
        }
        .CLOSED {
            background-image: linear-gradient(rgb(44, 116, 148), rgba(255, 255, 255, 0));
        }
        .CLOSEDline {
            background-color: rgb(44, 116, 148);
        }
        .RECONCILIATION {
            background-image: linear-gradient(rgb(211, 59, 142), rgba(255, 255, 255, 0));
        }
        .RECONCILIATIONline {
            background-color: rgb(211, 59, 142);
        }
    </style>

    <div style="width: 100%;display:flex;justify-content: center;">
    <div id="app">

        <div class="controlHolder">
            <div class="box control"  v-bind:style="hideNav ? 'opacity:0' : ''"
                 style="-webkit-transition: opacity 1s;transition: opacity 1s;">
                <!-- DATE SELECTOR -->
                <div class="dateHolder">

                    <template v-if="configurePreset">
                        <div class="switch presetDate fade fadeOut" >
                            <i class="fas fa-bars"
                               v-on:click="configurePreset = false;app.startDate = '';app.endDate = '';"></i>
                        </div>
                    </template>
                    <template v-if="!configurePreset">
                        <div class="switch customDate fade fadeOut" >
                            <i class="fas fa-calendar-alt"
                               v-on:click="configurePreset = true;"></i>
                        </div>
                    </template>

                    <div style="margin-left: 34px;">
                        <template v-if="configurePreset">
                            <select v-model="period" v-on:change="changeDate('preset')">
                                <option>CURRENT FY</option>
                                <option>PREVIOUS FY</option>
                                <option>NEXT FY</option>
                                <option>PAST &amp; NEXT 6 MONTHS</option>
                                <option>LAST 12 MONTHS</option>
                                <option>NEXT 12 MONTHS</option>
                            </select>
                        </template>
                        <template v-if="!configurePreset">
                            <div style="display: flex;">
                                <input type="date" style="width: 130px;" v-model="startDate" min="2015-10-01" />
                                <input type="date" style="width: 130px;" v-model="endDate" min="2015-10-01" />
                                <template v-if="(app.startDate && app.endDate) && (app.startDate < app.endDate)">
                                    <div v-on:click="changeDate('datePicker')">
                                        <i class="fas flowManagerIcon fa-check-circle" style="font-size: 24px;opacity: 0.5;margin-top: 1px;"></i>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>
                </div>

                <!-- VIEWING OPTIONS -->
                <div>
                    <div  class="viewOptionHolder">
                        <div class="viewOption" v-on:click="app.setting = 'graph';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'graph'}">
                            <i class="fas fa-chart-bar"></i> GRAPHS </div>
                        <div class="viewOption" v-on:click="app.setting = 'report';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'report'}">
                            <i class="fas fa-list"></i> REPORT </div>
                        <template v-if="showChanges && preset">
                            <div class="viewOption" v-on:click="app.setting = 'changes';window.scrollTo(0,0);"
                                 v-bind:class="{ activeSetting : setting === 'changes'}">
                                <i class="fas fa-arrows-alt-v"></i> CHANGES </div>
                            <div class="viewOption" v-on:click="app.setting = 'manage';window.scrollTo(0,0);"
                                 v-bind:class="{ activeSetting : setting === 'manage'}">
                                <i class="fas fa-cog"></i> MANAGE </div>
                        </template>
                        <div class="viewOption" v-on:click="app.setting = 'cashflow';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'cashflow'}">
                            <i class="fas fa-pound-sign"></i> CASH FLOW</div>
                    </div>
                </div>
            </div>


            <!-- LOGO -->
            <div class="controlRight" v-bind:class="hideNav ? 'controlRightBordered' : ''"
                 v-on:mouseover="showSideOptions = true;" v-on:mouseout="showSideOptions = false;">
                <apex:image url="{!$Resource.LiveGroupNewLogo}" height="36" />

                <template v-if="setting === 'report'">
                    <div style="display: flex;justify-content: center;width:100%;"
                         v-show="!hideNav || showSideOptions">
                        <div class="reportFilter">
                            <div class="reportFilterOption Closed left"
                                 v-bind:style="{ opacity : !reportFilter['Closed Won'] ? '0.2' : ''}"
                                 v-on:click="reportFilter['Closed Won'] = !reportFilter['Closed Won']">WON</div>
                            <div class="reportFilterOption Costed"
                                 v-bind:style="{ opacity : !reportFilter['Costed prospect'] ? '0.2' : ''}"
                                 v-on:click="reportFilter['Costed prospect'] = !reportFilter['Costed prospect']">COSTED</div>
                            <div class="reportFilterOption Pipeline"
                                 v-bind:style="{ opacity : !reportFilter['Pipeline prospect'] ? '0.2' : ''}"
                                 v-on:click="reportFilter['Pipeline prospect'] = !reportFilter['Pipeline prospect']">PIPELINE</div>
                            <div class="reportFilterOption Repeat"
                                 v-bind:style="{ opacity : !reportFilter['Repeat Prospect'] ? '0.2' : ''}"
                                 v-on:click="reportFilter['Repeat Prospect'] = !reportFilter['Repeat Prospect']">REPEAT</div>
                        </div>
                    </div>
                </template>
                <template v-if="showChanges && setting === 'graph'">
                    <div class="historyIcon"  v-show="!hideNav || showSideOptions">
                        <i class="fas fa-camera"></i>
                    </div>
                </template>
                <template v-if="showChanges && setting === 'report'">
                    <div class="historyIcon"  v-show="!hideNav || showSideOptions" v-on:click="downloadCSV()">
                        <i class="fas fa-download"></i>
                    </div>
                </template>
                <template v-if="showChanges && setting === 'manage'">
                    <div class="historyIcon" v-on:click="getQBSourceOptions();">
                        <i class="fas fa-cog" style="margin-top: 2px;"></i>
                    </div>
                </template>
                <template v-if="setting === 'cashflow' && showManager && manageAllowed">
                    <div class="flowManagerIcons" v-show="!hideNav || showSideOptions">
                        <template v-if="manageAllowed && showManager">
                            <i class="fas flowManagerIcon" v-bind:class="managing ? 'fa-times-circle' : 'fa-edit'"
                               v-on:click="toggleManaging()"></i>
                        </template>
                        <template v-if="managing">
                            <i class="fas fa-redo-alt flowManagerIcon" v-on:click="rerunningFlow = true;"></i>
                            <i class="fas fa-plus-circle flowManagerIcon" v-on:click="addingEntry = true;"></i>
                        </template>
                    </div>
                </template>
            </div>
        </div>

        <span v-bind:class="{hiddenTab : setting !== 'graph'}">

            <!--REVENUE GRAPHS-->
            <div class="box" >
                <div class="splitTwo">
                    <div class="title">REVENUE {{period}} </div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                            <div class="option target">TARGET</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="revenueBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="revenueLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--GROSS PROFIT GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">GROSS PROFIT {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                            <div class="option opex">OPEX</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="profitBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="profitLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--OPEX GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">OPERATING COSTS {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <template v-if="splitOpex">
                                <div style="height: 100%;" v-on:click="renderOpex()">
                                    <div style="display: flex;height: 100%;">
                                        <div style="background-color:#522B2D;" class="option">PAYROLL</div>
                                        <div style="background-color:#764144;" class="option">IT</div>
                                        <div style="background-color:#D45057;" class="option">BUS DEV</div>
                                        <div style="background-color:#F85D65;" class="option">OTHER</div>
                                    </div>
                                </div>
                            </template>
                            <template v-if="!splitOpex">
                                <div class="option" v-on:click="renderOpex()"
                                     style="width: 160px;background-color:#b86267">ACTUAL &amp; FORECAST OPEX</div>
                            </template>
                            <div class="option budget">BUDGETED OPEX</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="opexBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="opexLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--NET PROFIT GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">NET PROFIT {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="netProfitBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="netProfitLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--TOTAL CONFIRMED FIGURES -->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">TOTAL CONFIRMED FIGURES {{period}}</div>
                    <div class="optionsHolder" v-if="showChanges && graphData.SNAPSHOTS">
                        <span>SHOW CHANGES IN THE LAST </span>
                        <div style="width:100px;">
                            <select style="margin-left: 5px;width: 89px;height: 21px;" v-model="activeSnapshot">
                                <template v-for="snapshot,index in graphData.SNAPSHOTS">
                                    <option v-bind:value="index">{{snapshot.Age__c + (snapshot.Age__c === 1 ? ' DAY' : ' DAYS')}}</option>
                                </template>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="splitFour">
                    <div class="boxLite">
                        <div class="labelBlock">Revenue</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.TOTALS.revenue < 0 ? 'red' : ''}">
                            {{'£' + Math.abs(graphData.TOTALS.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Gross profit</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.TOTALS.profit < 0 ? 'red' : ''}">
                            {{'£' + Math.abs(graphData.TOTALS.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Operating cost</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.TOTALS.opex < 0 ? 'red' : ''}" >
                            {{'£' + Math.abs(graphData.TOTALS.opex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Net profit</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.TOTALS.netProfit < 0 ? 'red' : ''}" >
                            {{'£' + Math.abs(graphData.TOTALS.netProfit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                </div>
                <span v-if="showChanges && graphData.SNAPSHOTS">
                    <div class="splitFour">
                        <div class="boxLite">
                            <div class="labelBlock">Change last {{graphData.SNAPSHOTS[activeSnapshot].Age__c}} days</div>
                            <div class="valueBlock" v-bind:class="(graphData.TOTALS.revenue - graphData.SNAPSHOTS[activeSnapshot].TotalRevenue__c) > 0 ? 'up' :
                                                                    (graphData.TOTALS.revenue - graphData.SNAPSHOTS[activeSnapshot].TotalRevenue__c) == 0 ? '' : 'down'">
                                <span><i v-bind:class="(graphData.TOTALS.revenue - graphData.SNAPSHOTS[activeSnapshot].TotalRevenue__c) > 0 ? 'fas fa-arrow-up' :
                                            (graphData.TOTALS.revenue - graphData.SNAPSHOTS[activeSnapshot].TotalRevenue__c) == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.TOTALS.revenue - graphData.SNAPSHOTS[activeSnapshot].TotalRevenue__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last {{graphData.SNAPSHOTS[activeSnapshot].Age__c}} days</div>
                            <div class="valueBlock" v-bind:class="(graphData.TOTALS.profit - graphData.SNAPSHOTS[activeSnapshot].TotalGrossProfit__c) > 0 ? 'up' :
                                                                    (graphData.TOTALS.profit - graphData.SNAPSHOTS[activeSnapshot].TotalGrossProfit__c) == 0 ? '' : 'down'">
                                <span><i v-bind:class="(graphData.TOTALS.profit - graphData.SNAPSHOTS[activeSnapshot].TotalGrossProfit__c) > 0  ? 'fas fa-arrow-up' :
                                            (graphData.TOTALS.profit - graphData.SNAPSHOTS[activeSnapshot].TotalGrossProfit__c) == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.TOTALS.profit - graphData.SNAPSHOTS[activeSnapshot].TotalGrossProfit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last {{graphData.SNAPSHOTS[activeSnapshot].Age__c}} days</div>
                            <div class="valueBlock" v-bind:class="(graphData.TOTALS.opex - graphData.SNAPSHOTS[activeSnapshot].TotalOpex__c) > 0 ? 'down' :
                                                                    (graphData.TOTALS.opex - graphData.SNAPSHOTS[activeSnapshot].TotalOpex__c) == 0 ? '' : 'up'">
                                <span><i v-bind:class="(graphData.TOTALS.opex - graphData.SNAPSHOTS[activeSnapshot].TotalOpex__c) > 0  ? 'fas fa-arrow-up' :
                                            (graphData.TOTALS.opex - graphData.SNAPSHOTS[activeSnapshot].TotalOpex__c) == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.TOTALS.opex - graphData.SNAPSHOTS[activeSnapshot].TotalOpex__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last {{graphData.SNAPSHOTS[activeSnapshot].Age__c}} days</div>
                            <div class="valueBlock" v-bind:class="(graphData.TOTALS.netProfit - graphData.SNAPSHOTS[activeSnapshot].TotalNetProfit__c) > 0 ? 'up' :
                                                                    (graphData.TOTALS.netProfit - graphData.SNAPSHOTS[activeSnapshot].TotalNetProfit__c) == 0 ? '' : 'down'">
                                <span><i v-bind:class="(graphData.netProfit.profit - graphData.SNAPSHOTS[activeSnapshot].TotalNetProfit__c) > 0  ? 'fas fa-arrow-up' :
                                            (graphData.TOTALS.netProfit - graphData.SNAPSHOTS[activeSnapshot].TotalNetProfit__c) == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.TOTALS.netProfit - graphData.SNAPSHOTS[activeSnapshot].TotalNetProfit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                    </div>
                </span>
            </div>

        </span>

        <span v-show="setting === 'report'">
            <div class="box" style="padding: 7px;">
                <div class="colDivider reportCols">
                    <div>AM/PM</div>
                    <div>JOB</div>
                    <div>NAME</div>
                    <div>ACCOUNT</div>
                    <div>START</div>
                    <div>END</div>
                    <div>REVENUE</div>
                    <div>COS</div>
                    <div>PROFIT</div>
                    <div>MARGIN</div>
                    <div>STATUS</div>
                </div>

                <template v-for="month,monthIndex in graphData['REPORTDATA']">
                    <div>
                        <div class="headerDivider reportHeader reportMonth">
                            <div>
                                <span>{{ ' ' + monthIndex.toUpperCase() }}</span>
                                <span v-if="new Date(monthIndex) < new Date(graphData.SFCOMMIT.Month__c)">
                                    <i class="fas fa-lock" style="opacity: 0.5;"></i>
                                </span>
                            </div>
                            <div>{{ '£' + Math.abs(
                                (reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won Revenue'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect Revenue'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect Revenue'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect Revenue'] : 0)
                                ).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{ '£' + Math.abs(
                                (reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won COS'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect COS'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect COS'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect COS'] : 0)
                                ).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{ '£' + Math.abs(
                                (reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won Profit'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect Profit'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect Profit'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect Profit'] : 0)
                                ).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                            <div>{{
                                (reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won Revenue'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect Revenue'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect Revenue'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect Revenue'] : 0) > 0 ?

                                ((((reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won Profit'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect Profit'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect Profit'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect Profit'] : 0)) /
                                ((reportFilter['Closed Won'] ? graphData.REPORTVALUES[monthIndex]['Closed Won Revenue'] : 0 ) +
                                (reportFilter['Costed prospect'] ? graphData.REPORTVALUES[monthIndex]['Costed prospect Revenue'] : 0) +
                                (reportFilter['Pipeline prospect'] ? graphData.REPORTVALUES[monthIndex]['Pipeline prospect Revenue'] : 0) +
                                (reportFilter['Repeat Prospect'] ? graphData.REPORTVALUES[monthIndex]['Repeat Prospect Revenue'] : 0)))
                                * 100).toFixed(0) + '%' : '0%'
                                }}</div>
                            <div></div>
                        </div>


                        <template v-for="stage,stageIndex in graphData['REPORTDATA'][monthIndex]">

                            <template v-if="stage.length > 0 && reportFilter[stageIndex]">
                                <div v-bind:class="stageIndex.split(' ')[0] + 'border'">
                                <div class="headerDivider stage reportStage" v-bind:class="stageIndex.split(' ')[0]">
                                    <div> {{ stageIndex.toUpperCase() }}</div>
                                    <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex][stageIndex + ' Revenue']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex][stageIndex + ' COS']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex][stageIndex + ' Revenue'] - graphData['REPORTVALUES'][monthIndex][stageIndex + ' COS']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ (Math.abs((graphData.REPORTVALUES[monthIndex][stageIndex + ' Revenue'] - graphData['REPORTVALUES'][monthIndex][stageIndex + ' COS']) / graphData['REPORTVALUES'][monthIndex][stageIndex + ' Revenue'] * 100).toFixed(0)) + '%'}}</div>
                                    <div></div>
                                </div>

                                <template v-if="stageIndex === 'Closed Won'">
                                    <div class="headerDivider inheritanceRow"
                                         v-on:click="activeReportRow = activeReportRow !== (stage + ' ' + month) ? (stage + ' ' + month) : ''"
                                         v-bind:style="{fontWeight: activeReportRow === (stage + ' ' + month) ? 'bold' : ''}">
                                        <div>INHERITANCE, COMMISSIONS AND CUSTOM ADJUSTMENTS</div>
                                        <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex]['Adjustment Revenue']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                        <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex]['Adjustment COS']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                        <div>{{ '£' + Math.abs(graphData.REPORTVALUES[monthIndex]['Adjustment Profit']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    </div>
                                    <template v-if="activeReportRow === (stage + ' ' + month)">
                                        <div class="rowContent inheritanceContent" style="width: 98.5%;" >
                                            <template v-for="record in stage">
                                                <template v-if="!record.StageName">
                                                    <div class="headerDivider reportRecord" v-if="record.Opportunity__c">
                                                        <div>
                                                            <a v-bind:href=" '/' + record.Opportunity__c " target="_blank" v-on:click="event.stopPropagation();">
                                                                {{ record.Opportunity__r.Filtered_Job_Number__c + ' - ' + record.Opportunity__r.Name }}
                                                            </a>brought forward from {{record.Opportunity__r.EventMonthYear__c}}
                                                        </div>
                                                        <div>{{ '£' + Math.abs(record.Revenue__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div>{{ '£' + Math.abs(record.CostOfSale__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div>{{ '£' + Math.abs(record.Profit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                    </div>
                                                    <div class="headerDivider reportRecord" v-if="!record.Opportunity__c">
                                                        <div>
                                                            <span v-if="record.Calder__c">Calder commission for {{record.Opportunity__r.EventMonthYear__c}}</span>
                                                            <span v-if="!record.Calder__c">Statutory adjustment added on {{ new Date(record.CreatedDate).toString().substring(4,15) }} by {{ record.CreatedBy.Name }}</span>
                                                        </div>
                                                        <div>{{ '£' + Math.abs(record.Revenue__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div>{{ '£' + Math.abs(record.CostOfSale__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div>{{ '£' + Math.abs(record.Profit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                    </template>
                                </template>

                                <template v-for="record in stage">

                                    <template v-if="record.StageName">
                                        <div class="colDivider reportRecord" v-bind:class="record.IsClosed ? 'closed' : 'open'"
                                             v-on:click="toggleActiveRow(record, this)"
                                             v-bind:style="{fontWeight: activeReportRow === record.Id ? 'bold' : '',
                                                                opacity : (activeReportRow && activeReportRow !== record.Id) ? '0.5' : ''}">
                                            <div style="display: flex;">
                                                <span v-if="record.Owner.ImageLink__c">
                                                    <img v-bind:src="record.Owner.ImageLink__c" height="25px" style="border-radius: 50%;"/>
                                                </span>
                                                <span v-if="!record.Owner.ImageLink__c">
                                                    <div class="imageText">{{ record.Owner.FirstName.substring(0,1) + record.Owner.LastName.substring(0,1)}}</div>
                                                </span>
                                                <span v-if="record.Project_Manager__c && record.Project_Manager__r.ImageLink__c">
                                                    <img v-bind:src="record.Project_Manager__r.ImageLink__c" height="25px"
                                                         style="border-radius: 50%;margin-left: -4px;"/>
                                                </span>
                                                <span v-if="record.Project_Manager__c && (!record.Project_Manager__c || !record.Project_Manager__r.ImageLink__c)">
                                                    <div class="imageText" style="margin-left: -4px;background-color: grey;">{{ record.Project_Manager__r.FirstName.substring(0,1) + record.Project_Manager__r.LastName.substring(0,1)}}</div>
                                                </span>
                                            </div>

                                            <div>{{ record.Filtered_Job_Number__c }}</div>
                                            <div>
                                                <span v-if="new Date(record.CreatedDate) > new Date().setDate(new Date(record.CreatedDate).getDate() - 5)"
                                                      class="ageIndicator newIndicator">NEW</span>
                                                <span v-if="!record.IsClosed && new Date(record.LastModifiedDate) <
                                                            new Date().setDate(new Date(record.LastModifiedDate).getDate() - 45)"
                                                      class="ageIndicator oldIndicator">AGEING</span>
                                                <a v-bind:href=" '/' + record.Id " target="_blank" v-on:click="event.stopPropagation();">
                                                    {{ record.Name }}
                                                </a>
                                            </div>
                                            <div >
                                                <span v-if="!record.Calder_Opportunity__c">{{ record.Account.Name }}</span>
                                                <span v-if="record.Calder_Opportunity__c" style="display:grid;grid-template-columns: 80% 20%;">
                                                    <span>{{ record.Account.Name }}</span>
                                                    <img height="25px" style="border-radius: 50%;" src="{!$Resource.CalderLogo}"/>
                                                </span>
                                            </div>
                                            <div>{{ new Date(record.Event_start__c).toDateString().substring(0,10) }}</div>
                                            <div>{{ new Date(record.Event_end__c).toDateString().substring(0,10) }}</div>
                                            <div>
                                                <span v-if="record.IsClosed" class="reportIcon">
                                                    <i v-if="record.Amount_Paid__c === record.Amount_Calder__c" class="fas fa-check-circle" style="color:green;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c === record.Amount_Calder__c" class="far fa-check-circle" style="color:green;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c > 0" class="fas fa-minus-circle" style="color:orange;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c <= 0" class="fas fa-times-circle" style="color:red;"></i>
                                                </span>
                                                {{ '£' + Math.abs(record.Amount_Calder__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}
                                            </div>
                                            <div>
                                                <span v-if="record.IsClosed" class="reportIcon">
                                                    <i v-if="record.Amount_Paid__c === record.Amount_Calder__c" class="fas fa-check-circle" style="color:green;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c === record.Amount_Calder__c" class="far fa-check-circle" style="color:green;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c > 0" class="fas fa-minus-circle" style="color:orange;"></i>
                                                    <i v-else-if="record.Amount_Invoiced2__c <= 0" class="fas fa-times-circle" style="color:red;"></i>
                                                </span>
                                                {{ '£' + Math.abs(record.Filtered_Cost_of_Sale__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}
                                            </div>
                                            <div>
                                               <span v-if="record.IsClosed" class="reportIcon">
                                                    <i v-if="record.RecStatus__c === 'COMPLETE'" class="fas fa-check-circle" style="color:green;"></i>
                                                    <i v-else-if="record.RecStatus__c === 'IN PROGRESS'" class="far fa-clock" style="color:grey;"></i>
                                                    <i v-else-if="record.RecStatus__c === 'OVERDUE'" class="fas fa-exclamation-circle" style="color:red;"></i>
                                               </span>
                                                {{ '£' + Math.abs(record.Gross_profit_2__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}
                                            </div>
                                            <div>{{ record.Gross_Margin__c }}%</div>
                                            <div style="position: relative;">
                                                <!--<template v-if="record.IsClosed">-->
                                                <template v-if="record.IsClosed">
                                                    <span class="recIndicator" v-bind:style="'width:' + ((record.Amount_Calder__c < 100000 ? record.Amount_Calder__c : 100000) / 1000) + '%'">
                                                        <div class="recCostOfSale" v-bind:style="{ width: (100 - record.Gross_Margin__c) + '%'}"></div>
                                                        <div class="recProfit" v-bind:style="{ width: (record.Gross_Margin__c) + '%'}"></div>
                                                    </span>
                                                </template>
                                                <template v-if="!record.IsClosed">
                                                    <span class="recIndicator" v-bind:style="'width:' + ((record.Amount_Calder__c < 100000 ? record.Amount_Calder__c : 100000) / 1000) + '%'">
                                                        <div class="recCostOfSale"
                                                             v-bind:style="{ width: (100 - record.Gross_Margin__c) + '%', opacity : !record.IsClosed ? '0.' + record.Probability : ''}"></div>
                                                        <div class="recProfit"
                                                             v-bind:style="{ width: (record.Gross_Margin__c) + '%', opacity : !record.IsClosed ? '0.' + record.Probability : ''}"></div>
                                                    </span>

                                                    <div class="probabilityIndicator"
                                                         v-bind:style="'width:' + record.Probability + '%'">
                                                        <span style="margin-right:-12px;">{{ record.Probability + '%'}}</span>
                                                    </div>
                                                </template>
                                            </div>
                                        </div>

                                        <div class="rowContent" v-show="activeReportRow === record.Id" style="position: relative;">
                                            <div style="width:84.2%;height:55px;margin-left:9.7%;display: flex;color:white;position: relative;">
                                                <template v-if="record.figuresHistory">
                                                    <template v-for="stage in record.figuresHistory.HISTORY">
                                                        <template v-if="stage.type === 'stage'">
                                                            <div class="stageHistoryBlock" v-bind:class="stage.name.split(' ')[0]" v-bind:style="{width : stage.width + '%'}">
                                                                <span v-if="stage.name !== 'RECONCILIATION'" style="height:364px;width:1.5px;position:absolute;left:0;z-index:1;"
                                                                       v-bind:class="stage.name.split(' ')[0] + 'line'" >
                                                                    <span style="position:absolute;bottom:-5px;left:-4px;width:10px;height:10px;border-radius: 50%;background-color: white;border:1px solid black;"></span>
                                                                </span>
                                                                <div style="padding: 4px;">{{stage.name}}</div>
                                                                <span v-if="stage.imageLink !== 'null'" style="margin-left: 4px;">
                                                                    <img v-bind:src="stage.imageLink" height="25px" style="position:absolute;top:22px;border-radius: 50%;"/>
                                                                </span>
                                                                <span v-if="stage.imageLink === 'null'" style="position:absolute;top:22px;border-radius: 50%;margin-left: 4px;">
                                                                    <div class="imageText">{{ stage.firstName.substring(0,1) + stage.lastName.substring(0,1)}}</div>
                                                                </span>
                                                                <span style="position: absolute;top:20px;left:33px;"> {{ new Date(stage.createdDate).toString().substring(0,15)}}</span>

                                                            </div>
                                                        </template>
                                                        <template v-if="stage.type === 'eventDate'">
                                                            <div v-bind:style="{width : stage.width + '%'}" style="position:absolute;top:58px;right:0;min-width:50px;">
                                                                <span style="height:284px;margin-top:22px;width:1.5px;position:absolute;left:0;z-index:1;background-color: black;">
                                                                    <span style="position:absolute;bottom:-5px;left:-4px;width:10px;height:10px;border-radius: 50%;background-color: white;border:1px solid black;"></span>
                                                                </span>
                                                                <span style="padding: 4px;background-color: white;border: 1px solid black;color:black;border-radius: 3px;margin-left:-34px;">Event end</span>
                                                            </div>
                                                        </template>
                                                        <template v-if="stage.type === 'eventDateFuture'">
                                                            <div style="position:absolute;top:58px;right:0;">
                                                                <span style="padding: 4px;background-color: white;border: 1px solid black;color:black;border-radius: 3px;margin-left:-34px;">{{ stage.days + ' days until the event'}}</span>
                                                            </div>
                                                        </template>
                                                    </template>
                                                </template>
                                            </div>
                                            <div class="figuresHistory" v-bind:id="record.Id" style="height: 350px;padding: 10px;width:95%;margin-top:30px;">
                                            </div>
                                        </div>

                                        <template v-if="record.Adjustments__r">
                                        </template>

                                    </template>
                                </template>
                                </div>
                            </template>
                        </template>
                    <br/>
                    </div>
                </template>

                <div class="headerDivider reportCols reportTotals" style="z-index:3;">
                    <div>{{ period }} TOTAL</div>
                    <div>{{'£' + Math.abs((reportFilter['Closed Won'] ? graphData.TOTALSMAP.revenue[0] : 0 ) +
                        (reportFilter['Costed prospect'] ? graphData.TOTALSMAP.revenue[1] : 0 ) +
                        (reportFilter['Pipeline prospect'] ? graphData.TOTALSMAP.revenue[2] : 0 ) +
                        (reportFilter['Repeat Prospect'] ? graphData.TOTALSMAP.revenue[3] : 0 )).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                    <div>{{'£' + Math.abs((reportFilter['Closed Won'] ? graphData.TOTALSMAP.cos[0] : 0 ) +
                        (reportFilter['Costed prospect'] ? graphData.TOTALSMAP.cos[1] : 0 ) +
                        (reportFilter['Pipeline prospect'] ? graphData.TOTALSMAP.cos[2] : 0 ) +
                        (reportFilter['Repeat Prospect'] ? graphData.TOTALSMAP.cos[3] : 0 )).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                    <div>{{'£' + Math.abs((reportFilter['Closed Won'] ? graphData.TOTALSMAP.profit[0] : 0 ) +
                        (reportFilter['Costed prospect'] ? graphData.TOTALSMAP.profit[1] : 0 ) +
                        (reportFilter['Pipeline prospect'] ? graphData.TOTALSMAP.profit[2] : 0 ) +
                        (reportFilter['Repeat Prospect'] ? graphData.TOTALSMAP.profit[3] : 0 )).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                    <div>{{ (((reportFilter['Closed Won'] ? graphData.TOTALSMAP.profit[0] : 0 ) +
                        (reportFilter['Costed prospect'] ? graphData.TOTALSMAP.profit[1] : 0 ) +
                        (reportFilter['Pipeline prospect'] ? graphData.TOTALSMAP.profit[2] : 0 ) +
                        (reportFilter['Repeat Prospect'] ? graphData.TOTALSMAP.profit[3] : 0 )) /
                        ((reportFilter['Closed Won'] ? graphData.TOTALSMAP.revenue[0] : 0 ) +
                        (reportFilter['Costed prospect'] ? graphData.TOTALSMAP.revenue[1] : 0 ) +
                        (reportFilter['Pipeline prospect'] ? graphData.TOTALSMAP.revenue[2] : 0 ) +
                        (reportFilter['Repeat Prospect'] ? graphData.TOTALSMAP.revenue[3] : 0 )) * 100).toFixed(0) + '%'
                        }}</div>
                    <div></div>
                </div>

            </div>
        </span>

        <span v-show="setting === 'changes'">

            <div class="box">
                <template v-for="entry in changeData">
                    <div class="boxLite">
                        <!--{{ entry }}-->

                        <!--<div style="position:absolute;top:0;right:0;">-->
                            <!--<span>{{ entry.VALUE[0].TotalRevenue__c  }}</span>-->
                            <!--<span>{{ entry.VALUE[0].TotalGrossProfit__c }}</span>-->
                            <!--<span>{{ entry.VALUE[0].TotalOpex__c }}</span>-->
                            <!--<span>{{ entry.VALUE[0].TotalNetProfit__c }}</span>-->

                        <!--</div>-->


                    </div>
                </template>
            </div>
        </span>


        <span v-show="setting === 'manage'">

            <div class="box">
                <!-- SALESFORCE FIGURES -->

                <div class="boxLite">
                    <div class="manageIcon">
                        <img src="{!$Resource.SalesforceCF}" height="25px" />
                    </div>
                    <div class="yearGrid">
                        <div></div>
                        <template v-for="month,index in graphData.MONTHS">
                            <div style="height:25px;display: flex;padding-top:5px;padding-left:4px;"
                                 v-bind:style="new Date(month) < graphData.SFCOMMIT.Month__c ?
                                        'background-color:#00a1e0;' : 'background-color:#ebeaea;'"   >
                                <i v-if="new Date(month) < graphData.SFCOMMIT.Month__c"
                                   class="fas fa-lock" style="font-size: 15px;opacity: 0.4;"></i>
                                <i v-if="new Date(month) < graphData.SFCOMMIT.Month__c" v-on:click="configureAdjustment(month)"
                                   class="fas fa-edit" style="font-size: 15px;opacity: 0.4;cursor:pointer;margin-left: 5px;"></i>
                            </div>
                        </template>
                    </div>
                    <div class="yearGrid">
                        <div>
                            <div >&nbsp;</div>
                            <div>REVENUE</div>
                            <div>COST OF SALE</div>
                            <div>PROFIT</div>
                        </div>
                        <template v-for="month,index in graphData.MONTHS">
                            <div class="monthTile">
                                <div style="font-weight: bold;">{{month}}
                                </div>
                                <div class="figureTile" v-on:mouseenter="hoverTile = index + 'revenue'" v-on:mouseout="hoverTile = ''"
                                           v-bind:style="{ backgroundColor : (new Date(month) < graphData.SFCOMMIT.Month__c &&
                                                            (graphData['revenue'][month][0] < (graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - 1000) ||
                                                            graphData['revenue'][month][0] > (graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] + 1000)))?
                                                            '#fbe5e5' : ''}">
                                    {{'£' + Math.abs(graphData['revenue'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile" v-on:mouseenter="hoverTile = index + 'cos'" v-on:mouseout="hoverTile = ''"
                                            v-bind:style="{ backgroundColor : (new Date(month) < graphData.SFCOMMIT.Month__c &&
                                                            ((graphData['revenue'][month][0] - graphData['profit'][month][0]) < graphData.QUICKBOOKSFIGURES.qbCOS[month][0] - 100 ||
                                                            (graphData['revenue'][month][0] - graphData['profit'][month][0]) > graphData.QUICKBOOKSFIGURES.qbCOS[month][0] + 100))?
                                                            '#fbe5e5' : ''}">
                                    {{'£' + Math.abs(graphData['revenue'][month][0] - graphData['profit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile" v-on:mouseenter="hoverTile = index + 'profit'" v-on:mouseout="hoverTile = ''"
                                            v-bind:style="{ backgroundColor : (new Date(month) < graphData.SFCOMMIT.Month__c &&
                                                            (graphData['profit'][month][0] < (graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - graphData.QUICKBOOKSFIGURES.qbCOS[month][0] - 1000) ||
                                                            graphData['profit'][month][0] > (graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - graphData.QUICKBOOKSFIGURES.qbCOS[month][0] + 1000)))?
                                                            '#fbe5e5' : ''}">
                                    {{'£' + Math.abs(graphData['profit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </div>
                        </template>
                        <div class="monthTile" style="font-weight: bold;">
                            <div >TOTAL</div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.revenue - graphData.TOTALS.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- QUICKBOOKS ONLINE FIGURES -->
                <div class="boxLite">
                    <div class="manageIcon">
                        <img src="{!$Resource.QuickbooksCF}" height="25px" />
                    </div>
                    <div class="yearGrid">
                        <div></div>
                        <template v-for="month,index in graphData.MONTHS">
                            <div style="height:25px;display: flex;padding-top:5px;padding-left:4px;"
                                 v-bind:style="new Date(month) < graphData.SFCOMMIT.Month__c ?
                                        'background-color:green' : 'background-color:#ebeaea;'"   >
                                <i class="fas " style="font-size: 15px;opacity: 0.4;color:white;"
                                   v-bind:class="new Date(month) < graphData.SFCOMMIT.Month__c ? 'fa-lock' : ''"></i>
                            </div>
                        </template>
                    </div>
                    <div class="yearGrid">
                        <div>
                            <div >&nbsp;</div>
                            <div>REVENUE</div>
                            <div>COST OF SALE</div>
                            <div>PROFIT</div>
                            <div>OPEX</div>
                        </div>
                        <template v-for="month,index in graphData.MONTHS">
                            <div class="monthTile">
                                <div style="font-weight: bold;">{{month}}
                                </div>
                                <div class="figureTile"  v-bind:class="hoverTile === index + 'revenue' ? 'selectedTile' : ''">
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.qbRevenue[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile"  v-bind:class="hoverTile === index + 'cos' ? 'selectedTile' : ''">
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.qbCOS[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile" v-bind:class="hoverTile === index + 'profit' ? 'selectedTile' : ''" >
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - graphData.QUICKBOOKSFIGURES.qbCOS[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile">
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.qbOpex[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </div>
                        </template>
                        <div class="monthTile" style="font-weight: bold;">
                            <div >TOTAL</div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.qbRevenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.qbCOS).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.qbRevenue - graphData.TOTALS.qbCOS).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.qbOpex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </div>
                    </div>
                </div>


                <!-- BUDGET FIGURES -->
                <div class="boxLite">
                    <div class="manageIcon" style="font-weight: bold;">
                        BUDGET {{ period }}
                    </div>
                    <div class="yearGrid">
                        <div>
                            <div >&nbsp;</div>
                            <div>REVENUE</div>
                            <div>COST OF SALE</div>
                            <div>PROFIT</div>
                            <div>OPEX</div>
                        </div>
                        <template v-for="month,index in graphData.MONTHS">
                            <div class="monthTile">
                                <div style="font-weight: bold;">{{month}}
                                </div>
                                <div class="figureTile"  v-bind:class="hoverTile === index + 'revenue' ? 'selectedTile' : ''"
                                     v-bind:style="{ backgroundColor : new Date(month) < graphData.SFCOMMIT.Month__c ?
                                                    graphData.QUICKBOOKSFIGURES.budgetRevenue[month][0] > graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] ?
                                                    '#fbe5e5' : '#cbfacb' : ''}">
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.budgetRevenue[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile"  v-bind:class="hoverTile === index + 'cos' ? 'selectedTile' : ''"
                                     v-bind:style="{ backgroundColor : new Date(month) < graphData.SFCOMMIT.Month__c ?
                                                    graphData.QUICKBOOKSFIGURES.budgetCOS[month][0] > graphData.QUICKBOOKSFIGURES.qbCOS[month][0] ?
                                                    '#fbe5e5' : '#cbfacb' : ''}">
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.budgetCOS[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile" v-bind:class="hoverTile === index + 'profit' ? 'selectedTile' : ''"
                                     v-bind:style="{ backgroundColor : new Date(month) < graphData.SFCOMMIT.Month__c ?
                                                    (graphData.QUICKBOOKSFIGURES.budgetRevenue[month][0] - graphData.QUICKBOOKSFIGURES.budgetCOS[month][0])
                                                    < (graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - graphData.QUICKBOOKSFIGURES.qbCOS[month][0]) ?
                                                    '#fbe5e5' : '#cbfacb' : ''}" >
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.budgetRevenue[month][0] - graphData.QUICKBOOKSFIGURES.budgetCOS[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                                <div class="figureTile"
                                     v-bind:style="{ backgroundColor : new Date(month) < graphData.SFCOMMIT.Month__c ?
                                                    (graphData.QUICKBOOKSFIGURES.budgetOpex[month][0] < graphData.QUICKBOOKSFIGURES.qbOpex[month][0]) ?
                                                    '#fbe5e5' : '#cbfacb' : ''}" >
                                    {{'£' + Math.abs(graphData.QUICKBOOKSFIGURES.budgetOpex[month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </div>
                        </template>
                        <div class="monthTile" style="font-weight: bold;">
                            <div >TOTAL</div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.budgetRevenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.budgetCOS).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.budgetRevenue - graphData.TOTALS.budgetCOS).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                            <div class="figureTile">
                                {{'£' + Math.abs(graphData.TOTALS.budgetOpex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </span>

        <span v-bind:class="{hiddenTabLong : setting !== 'cashflow'}">
        <!--CASH FLOW AND MANAGER-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title" id="flowManagerTitle" >
                        <span>CASH FLOW </span>
                        <span class="viewOptionHolder" style="margin-left: 5px;">
                            <span style="padding: 0;font-size: 18px;padding-left: 6px;padding-right: 6px;" class="viewOption" v-bind:style="{ opacity : showManager ? '0.5' : '1'}"
                                  v-on:click="showManagerSection(false)">{{ period}}</span>
                            <span style="padding: 0;font-size: 18px;padding-left: 6px;padding-right: 6px;" class="viewOption"  v-bind:style="{ opacity : showManager ? '1' : '0.5'}"
                                  v-on:click="showManagerSection(true)">NEXT 3 MONTHS</span>
                        </span>
                    </div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed">PAST</div>
                            <div class="option weighted">CONFIRMED</div>
                            <div class="option pipeline">WEIGHTED PIPELINE</div>
                            <div class="option target">TARGET</div>
                        </div>
                    </div>
                </div>
                <div class="boxLite" style="width: 100%;position:relative;">
                    <div id="cashFlowLine" class="graph" style="width:100%;"></div>
                </div>

                <div v-bind:class="(responsePending || expandId) && !draggingId ? 'dragPrevent' : ''" v-on:click="abortEdit()"></div>

                <span v-show="showManager">
                    <div class="boxLite" v-bind:class="managing ? 'scroll' : ''">
                        <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="week" style="">
                            <div class="column ">WEEK COMMENCING</div>
                            <template v-for="week in cashflowData['WEEK COMMENCING']">
                                <div class="week flowDate" v-bind:class="managing ? 'weekLarge' : 'weekSmall'">
                                    {{ new Date(week).toDateString().substring(0,10)}}
                                </div>
                            </template>
                        </div>
                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                            <div class="column">OPENING BALANCE</div>
                            <template v-for="balance in cashflowData['OPENING BALANCE']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" balance < 0 ? 'color: red;' : ''">
                                    {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>

                        <span v-bind:style="!managing ? '' : 'display:none;' ">
                            <template v-for="value in Object.keys(cashflowData['IN ENTRIES'])">
                                <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'">
                                    <div class="column noSpill">{{value}}</div>
                                    <template v-for="week in Object.keys(cashflowData['IN ENTRIES'][value])">
                                        <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                             v-bind:style=" !cashflowData['IN ENTRIES'][value][week] ? 'color: white;' :
                                                            cashflowData['IN ENTRIES'][value][week] < 0 ? 'color: red;' : '' ">
                                            <div>{{'£' + Math.abs(parseFloat(cashflowData['IN ENTRIES'][value][week])).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                        </div>
                                    </template>
                                </div>
                            </template>
                        </span>

                        <!--MONEY IN-->
                        <span v-bind:style="managing && (activeCategory === 'in' || manageAll) ? '' : 'display:none;' ">
                            <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'"
                                 v-on:click="!manageAll ? activeCategory = 'in' : ''">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">REVENUE</div>
                                </div>
                                <template v-for="(balance,index) in Object.keys(cashflowData['WEEK COMMENCING'])">
                                    <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                         v-bind:id="'IN' + index">
                                        <div class="sortable in" v-bind:data-week="balance" v-bind:data-type="'IN'">
                                            <template v-for="record,recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'IN' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'IN'" v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id || draggingId === record.Id ?
                                                                        'selectedRecord ' : ' ') + record.Source__c + ' ' +
                                                                        (record.Source__c !== 'Budget' ? ' draggable' : '')">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.Source__c === 'Budget'" class="fas fa-map-pin faflow">&nbsp;</i>
                                                            <i v-show="record.Source__c === 'Budget' && record.AmountAdjusted__c" class="fas fa-pound-sign faflow">&nbsp;</i>
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{ record.Description__c }}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount" v-bind:style="record.Amount__c < 0 ? 'color:red' :''">{{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="(record.Source__c === 'Custom' || record.Source__c === 'Budget')">
                                                                        <div class="recordOptionButton"  v-if="(entryEditConfig === 'amount' || entryEditConfig === '')">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c"
                                                                                   v-bind:precision="2" type="number"
                                                                                   v-on:keyup="entryEditConfig = 'amount'" />
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall"
                                                                                 v-show="entryEditConfig === 'amount'">
                                                                            <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateAmount(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                        <div  v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                              class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'in' + index" v-bind:data-type="'in'"
                                             v-bind:data-week="index" v-bind:class="dragging === 'in' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                <div class="dropTextNumber" >{{'£' + Math.abs(parseFloat(cashflowData['TOTAL INFLOW'][index])).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </span>

                        <span v-bind:style="managing && activeCategory !== 'in' && !manageAll ? '' : 'display:none;'">
                            <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'">
                                <div class="column">Revenue</div>
                                <template v-for="balance in cashflowData['TOTAL INFLOW']">
                                    <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                         v-bind:style=" balance < 0 ? 'color: red;' : '', responsePending ? 'opacity : 0' : 'opacity: 1' ">
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </div>
                                </template>
                            </div>
                        </span>

                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'">
                            <div class="column">TOTAL INFLOWS</div>
                            <template v-for="balance in cashflowData['TOTAL INFLOW']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '', responsePending ? 'opacity : 0' : 'opacity: 1' ">
                                    {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>

                        <!-- PAYMENT RUN -->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'paymentRun' || (manageAll && managing)) ? 'recordRow' : '']" >
                            <template v-if="!managing || activeCategory !== 'paymentRun' && !manageAll"><div class="column noSpill">Payment run</div></template>
                            <template v-if="managing && (activeCategory === 'paymentRun' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">PAYMENT RUN</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>

                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payment run']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'paymentRun' && !manageAll" >
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </template>
                                    <span v-bind:style="managing && (activeCategory === 'paymentRun' || manageAll) ? '' : 'display:none;'">

                                        <div class="sortable paymentRun" v-bind:data-week="index" v-bind:data-type="'paymentRun'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Payment run' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'paymentRun'" v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord ' : ' ') + record.Source__c + ' ' +
                                                                        (record.Source__c !== 'Budget' && record.Source__c !== 'Salesforce' &&
                                                                        record.Source__c !== 'SalesforceP' ? ' draggable' : '')">

                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.Source__c === 'Budget'" class="fas fa-map-pin faflow">&nbsp;</i>
                                                            <i v-show="record.Source__c === 'Budget' && record.AmountAdjusted__c" class="fas fa-pound-sign faflow">&nbsp;</i>
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount"  v-bind:style="record.Amount__c < 0 ? 'color:red' :''">{{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                                                        <div style="padding: 3px;">
                                                            <template v-if="record.Source__c !== 'Salesforce' && record.Source__c != 'SalesforceP'">
                                                                <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                    <div style="width:100%;">
                                                                        <template v-if="(record.Source__c === 'Custom' || record.Source__c === 'Budget') &&
                                                                                        (entryEditConfig === 'amount' || entryEditConfig === '')">
                                                                            <div class="recordOptionButton" v-if="(entryEditConfig === 'amount' || entryEditConfig === '')">
                                                                                <i class="fas fa-pound-sign"></i>
                                                                                <input v-model.number="record.Amount__c"
                                                                                       v-bind:precision="2" type="number"
                                                                                       v-on:keyup="entryEditConfig = 'amount'" />
                                                                            </div>
                                                                            <div class="recordButtons recordButtonsSmall"
                                                                                 v-show="entryEditConfig === 'amount'">
                                                                                <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                     class="recordButton recordButtonSmall cancel">
                                                                                    <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                                </div>
                                                                                <div v-on:click="updateAmount(record)"
                                                                                     class="recordButton recordButtonSmall save">
                                                                                    <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                                </div>
                                                                            </div>
                                                                            <div v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                                 class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                                <i class="fas fa-trash"></i>
                                                                                <div>DELETE ENTRY</div>
                                                                            </div>
                                                                        </template>
                                                                        <template v-if="record.Source__c === 'Quickbooks'">
                                                                            <div class="recordOptionButton" v-if="entryEditConfig === ''"
                                                                                    v-on:click="getAttachmentLink(record.QuickbooksId__c)">
                                                                                <i class="fas fa-file-pdf "></i>
                                                                                <div>VIEW BILL</div>
                                                                            </div>
                                                                            <template v-if="(entryEditConfig === 'freelancer' || entryEditConfig === '')">
                                                                                <div class="recordOptionButton" style="display: block;">
                                                                                    <div class="recordOptionGrid"  v-on:click="entryEditConfig = 'freelancer'">
                                                                                        <i class="fas fa-user"></i>
                                                                                        <div>CONVERT TO FREELANCER</div>
                                                                                    </div>
                                                                                    <template v-if="entryEditConfig === 'freelancer'">
                                                                                        <div class="warnText">
                                                                                            By converting this bill to a freelancer, this bill and all future bills
                                                                                            from the same supplier will appear under 'Freelancers'.
                                                                                        </div>
                                                                                        <div class="recordButtons recordButtonsSmall">
                                                                                            <div v-on:click="entryEditConfig = '';" class="recordButton recordButtonSmall cancel">
                                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                                            </div>
                                                                                            <div v-on:click="toggleFreelancer()" class="recordButton recordButtonSmall save">
                                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                                            </div>
                                                                                        </div>
                                                                                    </template>
                                                                                </div>
                                                                            </template>
                                                                            <template v-if="(entryEditConfig === 'directDebit' || entryEditConfig === '')">
                                                                                <div class="recordOptionButton"  style="display: block;">
                                                                                    <div style="display: grid;grid-template-columns: 10% 90%;"
                                                                                         v-on:click="entryEditConfig = 'directDebit'">
                                                                                        <i class="fas fa-money-check-alt"></i>
                                                                                        <div>CONVERT TO DIRECT DEBIT</div>
                                                                                    </div>
                                                                                    <div v-show="entryEditConfig === 'directDebit'">
                                                                                        <div class="warnText">
                                                                                            By converting this bill to a direct debit, this bill and all future bills from the
                                                                                            same supplier will be calculated based on the parameters set below, and will appear
                                                                                            under 'Direct debit'.
                                                                                        </div>
                                                                                        <div class="ddSetup">
                                                                                            <div>Frequency:</div>
                                                                                            <div>
                                                                                                <select v-model="ddConfig.frequency"
                                                                                                        v-on:change="ddConfig.day = '';ddConfig.month = '';ddConfig.weekDay = '';">
                                                                                                    <option selected="true" ></option>
                                                                                                    <option value="weekly">Weekly</option>
                                                                                                    <option value="monthly">Monthly</option>
                                                                                                    <option value="quarterly">Quarterly</option>
                                                                                                </select>
                                                                                            </div>
                                                                                        </div>
                                                                                        <template v-if="ddConfig.frequency === 'weekly'">
                                                                                            <div class="ddSetup">
                                                                                                <div>Day of week: </div>
                                                                                                <div>
                                                                                                    <select v-model="ddConfig.occurence">
                                                                                                        <option selected="true"></option>
                                                                                                        <template v-for="day,dayIndex in weekDays">
                                                                                                            <option v-bind:value="dayIndex + 1">{{day}}</option>
                                                                                                        </template>
                                                                                                    </select>
                                                                                                </div>
                                                                                            </div>
                                                                                        </template>
                                                                                        <template v-if="ddConfig.frequency === 'monthly'">
                                                                                            <div class="ddSetup">
                                                                                                <div>Day:</div>
                                                                                                <div>
                                                                                                    <select v-model="ddConfig.occurence">
                                                                                                        <option selected="true"></option>
                                                                                                        <template v-for="number in 31">
                                                                                                            <option v-bind:value="number">{{number}}</option>
                                                                                                        </template>
                                                                                                    </select>
                                                                                                </div>
                                                                                            </div>
                                                                                        </template>
                                                                                        <template v-if="ddConfig.frequency === 'quarterly'">
                                                                                            <div class="ddSetup">
                                                                                                <div>Starting month:</div>
                                                                                                <div>
                                                                                                    <select v-model="ddConfig.occurence">
                                                                                                        <option selected="true"></option>
                                                                                                        <template v-for="month,monthIndex in months">
                                                                                                            <option v-bind:value="monthIndex + 1">{{month}}</option>
                                                                                                        </template>
                                                                                                    </select>
                                                                                                </div>
                                                                                            </div>
                                                                                        </template>
                                                                                        <div class="ddSetup">
                                                                                            <div>Amount:</div>
                                                                                            <div>
                                                                                                <input v-model="ddConfig.amount" type="number" class="amountInput" />
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="ddSetup">
                                                                                            <div>Duration: </div>
                                                                                            <div>
                                                                                                <input type="date" v-model="ddConfig.date"
                                                                                                       v-bind:min="globalConfig.min"/>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="ddSetup">
                                                                                            <div>Category: </div>
                                                                                            <div>
                                                                                                <select v-model="ddConfig.category">
                                                                                                    <template v-for="category in graphData.NOMINALSTRINGS">
                                                                                                        <option >{{ category }}</option>
                                                                                                    </template>
                                                                                                </select>
                                                                                            </div>
                                                                                        </div>
                                                                                        <div class="recordButtons recordButtonsSmall">
                                                                                            <div v-on:click="entryEditConfig = ''" class="recordButton recordButtonSmall cancel">
                                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                                            </div>
                                                                                            <div v-on:click="convertToDirectDebit(record.VendorRef__c,record.Description__c)"
                                                                                                 class="recordButton recordButtonSmall save"
                                                                                                 v-show="ddConfig.frequency && ddConfig.occurence && ddConfig.amount
                                                                                                && ddConfig.date && ddConfig.category">
                                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                                            </div>
                                                                                        </div>
                                                                                    </div>
                                                                                </div>
                                                                            </template>
                                                                        </template>
                                                                        <div class="recordOptionButton"
                                                                             v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                            <i class="far fa-comment"></i>
                                                                            <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                      v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall"
                                                                             v-show="entryEditConfig === 'comment'">
                                                                            <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateComment(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </template>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'paymentRun' + index" v-bind:data-type="'paymentRun'"
                                             v-bind:data-week="index"  v-bind:class="dragging === 'paymentRun' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                <div class="dropTextNumber" >{{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <!-- CREDIT CARD -->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'creditCard' || (manageAll && managing)) ? 'recordRow' : '']" >
                            <template v-if="!managing || activeCategory !== 'creditCard' && !manageAll"><div class="column noSpill">Credit card</div></template>
                            <template v-if="managing && (activeCategory === 'creditCard' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">CREDIT CARD</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Credit card']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'creditCard' && !manageAll">{{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <span v-bind:style="managing  && (activeCategory === 'creditCard' || manageAll) ? '' : 'display:none;'">
                                        <div class="sortable creditCard" v-bind:data-week="index" v-bind:data-type="'creditCard'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Credit card' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c" v-bind:data-type="'creditCard'"
                                                         v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord ' : ' ') + record.Source__c + ' ' +
                                                                        (record.Source__c !== 'Budget' ? ' draggable' : '')">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount" v-bind:style="record.Amount__c < 0 ? 'color:red' :''">{{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c"
                                                                                   v-bind:precision="2" type="number"
                                                                                   v-on:keyup="entryEditConfig = 'amount'" />
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall" v-show="entryEditConfig === 'amount'">
                                                                            <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateAmount(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                        <div  v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                              class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <template v-if="record.Source__c === 'Quickbooks'">
                                                                        <div class="recordOptionButton" v-on:click="getAttachmentLink(record.QuickbooksId__c)">
                                                                            <i class="fas fa-file-pdf "></i>
                                                                            <div>VIEW BILL</div>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="toggleFreelancer()">
                                                                            <i class="fas fa-undo"></i>
                                                                            <div>UNALLOCATE FREELANCER</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'creditCard' + index" v-bind:data-type="'creditCard'"
                                             v-bind:data-week="index"  v-bind:class="dragging === 'creditCard' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <!-- DIRECT DEBIT -->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'directDebit' || (manageAll && managing)) ? 'recordRow' : '']" >
                            <template v-if="!managing || activeCategory !== 'directDebit' && !manageAll"><div class="column noSpill">Direct debit</div></template>
                            <template v-if="managing  && (activeCategory === 'directDebit' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">DIRECT DEBIT</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>

                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Direct debit']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'directDebit' && !manageAll">
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </template>
                                    <span v-bind:style="managing  && (activeCategory === 'directDebit' || manageAll) ? '' : 'display:none;'">

                                        <div class="sortable directDebit" v-bind:data-week="index" v-bind:data-type="'directDebit'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Direct debit' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c" v-bind:data-type="'directDebit'"
                                                         v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord ' : ' ') + record.Source__c + ' ' +
                                                                        (record.Source__c === 'Custom' ? ' draggable' : '')">

                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.Source__c !== 'Custom'" class="fas fa-map-pin faflow">&nbsp;</i>
                                                            <i v-show="record.Source__c !== 'Custom' && record.AmountAdjusted__c" class="fas fa-pound-sign faflow">&nbsp;</i>
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount"  v-bind:style="record.Amount__c < 0 ? 'color:red' :''">{{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <div class="recordOptionButton" v-show="entryEditConfig === 'amount' || entryEditConfig === ''">
                                                                        <i class="fas fa-pound-sign"></i>
                                                                        <input v-model.number="record.Amount__c"
                                                                               v-bind:precision="2" type="number"
                                                                               v-on:keyup="entryEditConfig = 'amount'" />
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'amount'">
                                                                        <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateAmount(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                    <div  v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                          class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                        <i class="fas fa-trash"></i>
                                                                        <div>DELETE ENTRY</div>
                                                                    </div>
                                                                    <div class="recordOptionButton" v-show="entryEditConfig === 'managingProfile' ||
                                                                                                            entryEditConfig === ''" style="display: block;">
                                                                        <div style="display: grid;grid-template-columns: 10% 90%;" v-on:click="entryEditConfig = 'managingProfile'">
                                                                            <i class="fas fa-money-check-alt"></i>
                                                                            <div>MANAGE PROFILE</div>
                                                                        </div>
                                                                        <div v-show="entryEditConfig === 'managingProfile'">
                                                                            <div class="warnText">
                                                                                Any changes to the direct debit profile for this supplier
                                                                                will force a mass re-calculation of the cashflow and will
                                                                                override any adjusted amounts and comments for this supplier.
                                                                            </div>
                                                                            <div class="ddSetup">
                                                                                <div>Frequency:</div>
                                                                                <div>
                                                                                    <select v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Terms__c">
                                                                                        <option value="Weekly" >Weekly</option>
                                                                                        <option value="Monthly">Monthly</option>
                                                                                        <option value="Quarterly">Quarterly</option>
                                                                                    </select>
                                                                                </div>
                                                                            </div>
                                                                            <template v-if="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Terms__c === 'Weekly'">
                                                                                <div class="ddSetup">
                                                                                    <div>Day of week: </div>
                                                                                    <div>
                                                                                        <select v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Day__c">
                                                                                            <option selected="true"></option>
                                                                                            <template v-for="day,dayIndex in weekDays">
                                                                                                <option v-bind:value="dayIndex + 1">{{day}}</option>
                                                                                            </template>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                            </template>
                                                                            <template v-if="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Terms__c === 'Monthly'">
                                                                                <div class="ddSetup">
                                                                                    <div>Day:</div>
                                                                                    <div>
                                                                                        <select v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Day__c">
                                                                                            <option selected="true"></option>
                                                                                            <template v-for="number in 31">
                                                                                                <option v-bind:value="number">{{number}}</option>
                                                                                            </template>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                            </template>
                                                                            <template v-if="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Terms__c === 'Quarterly'">
                                                                                <div class="ddSetup">
                                                                                    <div>Starting month:</div>
                                                                                    <div>
                                                                                        <select v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Day__c">
                                                                                            <option selected="true"></option>
                                                                                            <template v-for="month,monthIndex in months">
                                                                                                <option v-bind:value="monthIndex + 1">{{month}}</option>
                                                                                            </template>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                            </template>
                                                                            <div class="ddSetup">
                                                                                <div>Amount:</div>
                                                                                <div>
                                                                                    <input v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Amount__c"
                                                                                           type="number" class="amountInput" />
                                                                                </div>
                                                                            </div>
                                                                            <div class="ddSetup">
                                                                                <div>Duration: </div>
                                                                                <div>
                                                                                    <input type="date"
                                                                                           v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].EndDateInput__c"
                                                                                           v-bind:min="globalConfig.min"/>
                                                                                </div>
                                                                            </div>
                                                                            <div class="ddSetup">
                                                                                <div>Category:</div>
                                                                                <div>
                                                                                    <select v-model="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Category__c">
                                                                                        <template v-for="category in graphData.NOMINALSTRINGS">
                                                                                            <option >{{ category }}</option>
                                                                                        </template>
                                                                                    </select>
                                                                                </div>
                                                                            </div>

                                                                            <div class="recordButtons recordButtonsSmall">
                                                                                <div v-on:click="entryEditConfig = ''"
                                                                                     class="recordButton recordButtonSmall cancel">
                                                                                    <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                                </div>
                                                                                <div v-on:click="convertToDirectDebit(record.VendorRef__c,record.Description__c,true)"
                                                                                     class="recordButton recordButtonSmall save"
                                                                                     v-show="cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Terms__c &&
                                                                                             cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Day__c &&
                                                                                             cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Amount__c &&
                                                                                             cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].EndDateInput__c &&
                                                                                             cashflowData['SUPPLIER PROFILES'][record.VendorRef__c].Category__c">
                                                                                    <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; UPDATE
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="recordOptionButton" v-show="entryEditConfig === 'disable' || entryEditConfig === ''"
                                                                         style="display: block;">
                                                                        <div class="recordOptionGrid" v-on:click="entryEditConfig = 'disable'" >
                                                                            <i class="fas fa-undo"></i>
                                                                            <div>DISABLE DIRECT DEBITS</div>
                                                                        </div>
                                                                        <template v-if="entryEditConfig === 'disable'">
                                                                            <div class="warnText">
                                                                                By disabling direct debits for this supplier, all existing
                                                                                direct debits will be removed, and any unpaid bills from the supplier
                                                                                will appear under the payment run.
                                                                            </div>
                                                                            <div class="recordButtons recordButtonsSmall">
                                                                                <div v-on:click="entryEditConfig = ''"
                                                                                     class="recordButton recordButtonSmall cancel">
                                                                                    <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                                </div>
                                                                                <div v-on:click="disableDirectDebit(record.VendorRef__c)"
                                                                                     class="recordButton recordButtonSmall save">
                                                                                    <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                                </div>
                                                                            </div>
                                                                        </template>
                                                                    </div>
                                                                    <div class="recordOptionButton" v-show="entryEditConfig === ''"
                                                                         v-on:click="markAsPaid(record.Id)">
                                                                        <i class="fas fa-receipt"></i>
                                                                        <div>MARK AS PAID</div>
                                                                    </div>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'directDebit' + index" v-bind:data-type="'directDebit'"
                                             v-bind:data-week="index"  v-bind:class="dragging === 'directDebit' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <!--PAYROLL-->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'payroll' || (manageAll && managing)) ? 'recordRow' : '']">
                            <template v-if="!managing || activeCategory !== 'payroll' && !manageAll"><div class="column noSpill">Payroll</div></template>
                            <template v-if="managing  && (activeCategory === 'payroll' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">PAYROLL</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payroll']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'payroll' && !manageAll">
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </template>
                                    <span v-bind:style="managing  && (activeCategory === 'payroll' || manageAll) ? '' : 'display:none;'">
                                        <div class="sortable payroll" v-bind:data-week="index" v-bind:data-type="'payroll'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Payroll' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c" v-bind:data-type="'payroll'"
                                                         v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord ' : ' ') + record.Source__c + ' draggable'">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            <i v-show="record.Source__c !== 'Custom' && record.AmountAdjusted__c" class="fas fa-pound-sign faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount"  v-bind:style="record.Amount__c < 0 ? 'color:red' :''">{{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c"
                                                                                   v-bind:precision="2" type="number"
                                                                                   v-on:keyup="entryEditConfig = 'amount'" />
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall" v-show="entryEditConfig === 'amount'">
                                                                            <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateAmount(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                        <div v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                             class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton" v-show="record.Source__c === 'Budget' && entryEditConfig === ''"
                                                                        v-on:click="markAsPaid(record.Id)">
                                                                        <i class="fas fa-receipt"></i>
                                                                        <div>MARK AS PAID</div>
                                                                    </div>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'payroll' + index" v-bind:data-type="'payroll'"
                                             v-bind:data-week="index" v-bind:class="dragging === 'payroll' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <!--FREELANCERS-->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'freelancer' || (manageAll && managing)) ? 'recordRow' : '']">
                            <template v-if="!managing || activeCategory !== 'freelancer' && !manageAll"><div class="column noSpill">Freelancers</div></template>
                            <template v-if="managing  && (activeCategory === 'freelancer' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">FREELANCERS</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Freelancers']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'freelancer' && !manageAll">{{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <span v-bind:style="managing  && (activeCategory === 'freelancer' || manageAll) ? '' : 'display:none;'">
                                        <div class="sortable freelancers" v-bind:data-week="index" v-bind:data-type="'freelancers'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Freelancers' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c" v-bind:data-type="'freelancer'"
                                                         v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord ' : ' ') + record.Source__c + ' ' +
                                                                        (record.Source__c !== 'Budget' && record.Source__c !== 'Salesforce' &&
                                                                        record.Source__c !== 'SalesforceP' ? ' draggable' : '')">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">
                                                            {{record.Source__c.substring(0,1)}}
                                                        </div>
                                                        <div class="description">
                                                            <i v-show="record.Source__c === 'Budget'" class="fas fa-map-pin faflow">&nbsp;</i>
                                                            <i v-show="record.Source__c === 'Budget' && record.AmountAdjusted__c" class="fas fa-pound-sign faflow">&nbsp;</i>
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount"  v-bind:style="record.Amount__c < 0 ? 'color:red' :''">
                                                            {{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                        </div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id  && !dragging ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton" v-show="entryEditConfig === 'amount' || entryEditConfig === ''">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c"
                                                                                   v-bind:precision="2" type="number"
                                                                                   v-on:keyup="entryEditConfig = 'amount'" />
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall" v-show="entryEditConfig === 'amount'">
                                                                            <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateAmount(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                        <div v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                             class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <template v-if="record.Source__c === 'Quickbooks' && entryEditConfig === ''">
                                                                        <div class="recordOptionButton" v-on:click="getAttachmentLink(record.QuickbooksId__c)">
                                                                            <i class="fas fa-file-pdf "></i>
                                                                            <div>VIEW BILL</div>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="toggleFreelancer()">
                                                                            <i class="fas fa-undo"></i>
                                                                            <div>UNALLOCATE FREELANCER</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'freelancers' + index" v-bind:data-type="'freelancers'"
                                             v-bind:data-week="index" v-bind:class="dragging === 'freelancers' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <!--VAT-->
                        <div class="row" v-bind:class="[managing ? 'rowGrow' : 'rowTight', (activeCategory === 'vat' || (manageAll && managing)) ? 'recordRow' : '']">
                            <template v-if="!managing || activeCategory !== 'vat' && !manageAll"><div class="column noSpill">VAT {{dragging}}</div></template>
                            <template v-if="managing  && (activeCategory === 'vat' || manageAll)">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">VAT</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['VAT']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing || activeCategory !== 'vat' && !manageAll">
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </template>
                                    <span v-bind:style="managing  && (activeCategory === 'vat' || manageAll) ? '' : 'display:none;'">
                                        <div class="sortable vat" v-bind:data-week="index" v-bind:data-type="'vat'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'VAT' + index">
                                                    <div class="record" v-if="!(record.Source__c === 'Budget' && record.Amount__c < 0)"
                                                         v-on:dblclick="openRecord(record.Id,record.Amount__c,record.Comment__c)"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c" v-bind:data-type="'vat'"
                                                         v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="(expandId === record.Id ? 'selectedRecord draggable ' : 'draggable ') + record.Source__c">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">
                                                            <i v-show="record.AdjustedDate__c" class="fas fa-calendar-check faflow">&nbsp;</i>
                                                            {{record.Description__c}}
                                                        </div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount"  v-bind:style="record.Amount__c < 0 ? 'color:red' :''">
                                                            {{'£' + Math.abs(record.Amount__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                        </div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="expandId === record.Id ? 'recordDetails' : 'recordDetailsHidden'" style="bottom:52px;">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton"  v-show="entryEditConfig === 'amount' || entryEditConfig === ''">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c"
                                                                                   v-bind:precision="2" type="number"
                                                                                   v-on:keyup="entryEditConfig = 'amount'" />
                                                                        </div>
                                                                        <div class="recordButtons recordButtonsSmall" v-show="entryEditConfig === 'amount'">
                                                                            <div v-on:click="entryEditConfig = '';record.Amount__c = cancelValues.amount;"
                                                                                 class="recordButton recordButtonSmall cancel">
                                                                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                            </div>
                                                                            <div v-on:click="updateAmount(record)"
                                                                                 class="recordButton recordButtonSmall save">
                                                                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                            </div>
                                                                        </div>
                                                                        <div v-show="entryEditConfig === '' && record.Source__c === 'Custom'"
                                                                             class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton"
                                                                         v-show="(entryEditConfig === 'comment' || entryEditConfig === '')">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:keyup="entryEditConfig = 'comment'"></textarea>
                                                                    </div>
                                                                    <div class="recordButtons recordButtonsSmall"
                                                                         v-show="entryEditConfig === 'comment'">
                                                                        <div v-on:click="entryEditConfig = '';record.Comment__c = cancelValues.comment;"
                                                                             class="recordButton recordButtonSmall cancel">
                                                                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                                                                        </div>
                                                                        <div v-on:click="updateComment(record)"
                                                                             class="recordButton recordButtonSmall save">
                                                                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <div class="dropZone" v-bind:id="'vat' + index" v-bind:data-type="'vat'"
                                             v-bind:data-week="index" v-bind:class="dragging === 'vat' ? 'dropZoneActive' : ''">
                                            <div class="dropText">
                                                <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                            </div>
                                        </div>
                                    </span>
                                </div>
                            </template>
                        </div>

                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="outflowsTotal">
                            <div class="column">TOTAL OUTFLOWS</div>
                            <template v-for="balance in cashflowData['TOTAL OUTFLOW']">
                                <div class="week" v-bind:class="[managing ? 'weekLarge' : 'weekSmall']"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                    {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>
                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="closing">
                            <div class="column">CLOSING BALANCE</div>
                            <template v-for="balance in cashflowData['CLOSING BALANCE']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                    {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>
                    </div>
                </span>
            </div>
        </span>

        <template v-if="manager.configuring">
            <div class="modalBackdrop" v-on:click="manager.configuring = false;"></div>
            <div class="newEntryFormHolder">
                <div class="newEntryForm">
                    <div class="entryFormTitle">CONFIGURE SOURCE INFORMATION</div>
                    <span v-if="!QBSourceOptions" style="margin-left:10px;">retrieving settings...</span>
                    <span v-if="QBSourceOptions">
                        <div class="managerGrid">
                            <div>Salesforce commit date: </div>
                            <select v-model="QBSourceOptions.sfCommit">
                                <!--<option selected="true">{{QBSourceOptions.sfCommit}}</option>-->
                                <template v-for="month in graphData.MONTHS">
                                    <option v-if="new Date(month) >= new Date(graphData.SFCOMMIT.Month__c) &&
                                                  new Date(month) >= new Date(QBSourceOptions.qbCommit)">{{month}}</option>
                                </template>
                            </select>
                        </div>
                        <div class="managerGrid">
                            <div>Quickbooks close date:</div>
                            <select v-model="QBSourceOptions.qbCommit">
                                <!--<option selected="true">{{QBSourceOptions.qbCommit}}</option>-->
                                <template v-for="month in graphData.MONTHS">
                                    <option v-if="new Date(month) >= new Date(graphData.QBCLOSE.Month__c)">{{month}}</option>
                                </template>
                            </select>
                        </div>
                        <div class="managerGrid" v-if="QBSourceOptions">
                            <div>Forecast source:</div>
                            <select v-model="QBSourceOptions.forecastSource">
                                <template v-for="Budget in QBSourceOptions.budgets.QueryResponse.Budget">
                                    <option v-bind:value="Budget.Id">{{Budget.Name}}</option>
                                </template>
                            </select>
                        </div>
                        <div class="managerGrid" v-if="QBSourceOptions">
                            <div>Budget source:</div>
                            <select v-model="QBSourceOptions.budgetSource">
                                <template v-for="Budget in QBSourceOptions.budgets.QueryResponse.Budget">
                                    <option  v-bind:value="Budget.Id">{{Budget.Name}}</option>
                                </template>
                            </select>
                        </div>
                        <br/>
                        <div class="recordButtons" v-if="QBSourceOptions.sfCommit && QBSourceOptions.qbCommit &&
                                                         QBSourceOptions.forecastSource && QBSourceOptions.budgetSource">
                            <div v-on:click="manager.configuring = false;" class="recordButton cancel">
                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                            </div>
                            <div v-on:click="setQBSourceOptions()" class="recordButton save">
                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; UPDATE
                            </div>
                        </div>
                    </span>
                </div>
            </div>
        </template>

        <template v-if="manager.adjusting">
            <div class="modalBackdrop" v-on:click="manager.adjusting = false;"></div>
            <div class="newEntryFormHolder">
                <div class="newEntryForm">
                    <div class="entryFormTitle">ADJUSTMENT TO {{ manager.adjustmentMonth.toUpperCase() }}</div>
                    <div class="managerGrid">
                        <div>Revenue: </div>
                        <input type="number" v-model="manager.adjustmentRevenue" v-bind:step="0.01"
                               v-on:keyup="manager.adjustmentProfit = (manager.adjustmentRevenue - manager.adjustmentCOS).toFixed(2)"
                               class="amountInput" style="height: 32px;"
                               v-bind:style="{color : manager.adjustmentRevenue < 0 ? 'red' : ''}" />
                    </div>
                    <div class="managerGrid">
                        <div>Cost of sale:</div>
                        <input type="number" v-model="manager.adjustmentCOS" v-bind:step="0.01"
                               v-on:keyup="manager.adjustmentProfit = (manager.adjustmentRevenue - manager.adjustmentCOS).toFixed(2)"
                               class="amountInput" style="height: 32px;"
                               v-bind:style="{color : manager.adjustmentCOS < 0 ? 'red' : ''}"/>
                    </div>
                    <div class="managerGrid">
                        <div>Gross profit:</div>
                        <input type="number" v-model="manager.adjustmentProfit" v-bind:step="0.01"
                               class="amountInput" style="height: 32px;" disabled="true"
                               v-bind:style="{color : manager.adjustmentProfit < 0 ? 'red' : ''}"/>
                    </div>
                    <div class="managerGrid">
                        <div>Comment:</div>
                        <input type="text" v-model="manager.adjustmentComment"/>
                    </div>
                    <br/>
                    <div class="recordButtons">
                        <div v-on:click="manager.adjusting = false;" class="recordButton cancel">
                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                        </div>
                        <div v-on:click="postAdjustment()" class="recordButton save">
                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; POST
                        </div>
                    </div>
                </div>
            </div>
        </template>

        <template v-if="addingEntry">
            <div class="modalBackdrop" v-on:click="addingEntry = false;"></div>
            <div class="newEntryFormHolder">
                <div class="newEntryForm">
                    <div class="entryFormTitle">CUSTOM ENTRY FORM</div>
                    <div class="entryGrid">
                        <div>Type: </div>
                        <select v-model="newEntryConfig.type">
                            <template v-for="type in types">
                                <option >{{type}}</option>
                            </template>
                        </select>
                    </div>
                    <div class="entryGrid">
                        <div>Description:</div>
                        <input type="text" v-model="newEntryConfig.description"/>
                    </div>
                    <div class="entryGrid">
                        <div>Amount:</div>
                        <input type="number" v-model="newEntryConfig.amount" v-bind:step="0.01"
                               class="amountInput" style="height: 32px;"/>
                    </div>
                    <div class="entryGrid">
                        <div>Date:</div>
                        <input type="date" v-model="newEntryConfig.date" v-bind:min="globalConfig.min"
                               v-bind:max="globalConfig.max"/>
                    </div>
                    <div class="entryGrid" v-if="newEntryConfig.type">
                        <div>Budget: </div>
                        <div v-if="newEntryConfig.type === 'Payment run' || newEntryConfig.type === 'Credit card' ||
                                   newEntryConfig.type === 'Direct debit'">
                            <select v-model="newEntryConfig.category">
                                <template v-for="category in graphData.NOMINALSTRINGS">
                                    <template v-if="category !== 'Revenue' && category !== 'Freelancers'
                                                   && category !== 'Pension Costs' && category !== 'Gross Salaries'
                                                   && category !== 'Employers National Insurance'
                                                   && category !== 'Depreciation / Amortisation' ">
                                        <option>{{ category }}</option>
                                    </template>
                                </template>
                            </select>
                        </div>
                        <div v-if="newEntryConfig.type === 'VAT'">
                            <select v-model="newEntryConfig.category">
                                <option selected="true">Not applicable</option>
                            </select>
                        </div>
                        <div v-if="newEntryConfig.type === 'Revenue'">
                            <select v-model="newEntryConfig.category">
                                <option selected="true">Revenue</option>
                            </select>
                        </div>
                        <div v-if="newEntryConfig.type === 'Freelancers'">
                            <select v-model="newEntryConfig.category">
                                <option >Freelancers</option>
                                <option >Cost of sales</option>
                            </select>
                        </div>
                        <div v-if="newEntryConfig.type === 'Payroll'">
                            <select v-model="newEntryConfig.category">
                                <option >Pension Costs</option>
                                <option >Gross Salaries</option>
                                <option >Employers National Insurance</option>
                            </select>
                        </div>
                    </div>
                    <br/>
                    <template v-if="newEntryConfig.type && newEntryConfig.description &&
                                    newEntryConfig.amount && newEntryConfig.date && newEntryConfig.category">
                        <div class="recordButtons">
                            <div v-on:click="clearCustomEntry()" class="recordButton cancel">
                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                            </div>
                            <div v-on:click="addCustomEntry()" class="recordButton save">
                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </template>

        <template v-if="rerunningFlow">
            <div class="modalBackdrop" v-on:click="rerunningFlow = false;"></div>

            <div class="newEntryFormHolder">
                <div class="newEntryForm">
                    <div class="entryFormTitle">FLOW RECALCULATION</div>
                    <br/>
                    <div style="cursor: pointer;">
                        <input type="checkbox" v-model="rerunConfig.resetDates"/>
                        <span v-on:click="rerunConfig.resetDates = !rerunConfig.resetDates">Override date adjustments</span>
                    </div>
                    <div style="cursor: pointer;">
                        <input type="checkbox" v-model="rerunConfig.resetBudgets"/>
                        <span v-on:click="rerunConfig.resetBudgets = !rerunConfig.resetBudgets">Override budget adjustments</span>
                    </div>
                    <br/>
                    <div class="recordButtons">
                        <div v-on:click="rerunningFlow = false;" class="recordButton cancel">
                            <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                        </div>
                        <div v-on:click="rerunFlow()" class="recordButton save">
                            <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; EXECUTE
                        </div>
                    </div>
                </div>
            </div>
        </template>

        <div v-bind:class="showAttachment ? 'billframe' : 'billframeHidden'"
             v-on:click="attachmentLink = '';showAttachment = false;">
            <div class="box" style="height:422px;position:relative;width:auto;" v-on:click="event.stopPropagation();">
                <div style="z-index:1">
                    <iframe width="700" height="400" v-bind:src="attachmentLink" frameborder="0" allowfullscreen="allowfullscreen">
                    </iframe>
                </div>
            </div>
        </div>

        <div v-if="responsePending" style="display: flex;flex-direction: row;">
            <div class="loader"></div>
            <div class="pendingMessage">{{ message }}</div>
        </div>

    </div>
    </div>
    <script>


        var app = new Vue({
            el: '#app',
            data: {
                hideNav : '',
                showSideOptions : false,
                activeSnapshot : 6,
                period : 'CURRENT FY',
                today : '',
                yearText : '',
                startDate : '',
                endDate : '',
                reportData : '',
                graphData : '',
                cashGraphData : '',
                cashflowData : '',
                changeData : '',
                setting : 'graph',
                hoverTile : '',
                hoverAmount : '',
                showGo : false,
                showReport : false,
                showChanges : true,
                preset : true,
                configurePreset : true,
                manageAllowed : true,
                showManager : false,
                managing : false,
                activeCategory : '',
                manageAll : true,
                manageOut : false,
                sortable : false,
                showAttachment : false,
                dragging : '',
                draggingId : '',
                dragId : '',
                expandId : '',
                dragProhibited: false,
                confirmed : true,
                weighted : true,
                pipeline : true,
                splitOpex : false,
                manager : {
                    configuring : false,
                    adjusting : false,
                    adjustmentMonth : '',
                    adjustmentRevenue : 0,
                    adjustmentCOS : 0,
                    adjustmentProfit : 0,
                    adjustmentComment : ''
                },
                QBSourceOptions : '',
                responsePending : false,
                rerunningFlow : '',
                addingEntry : false,
                managingProfile : false,
                entryEditConfig : '',
                newEntryConfig : {
                    description: '',
                    amount : 0,
                    date : '',
                    type : '',
                    category : ''
                },
                ddConfig : {
                    frequency : '',
                    occurence : '',
                    amount : '',
                    duration : '',
                    date : '',
                    category : ''
                },
                rerunConfig : {
                    resetDates : false,
                    resetBudgets : false,
                    clearCustom : false
                },
                globalConfig : {
                    min : '',
                    max : ''
                },
                cancelValues : {
                    comment : '',
                    amount : ''
                },
                weekDays : ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],
                months : ['January','February','March','April','May','June','July','August', 'September','October','November','December'],
                types : ['Revenue','Payment run','Credit card','Direct debit','Freelancers','Payroll','VAT'],
                attachmentLink : '',
                activeReportRow : '',
                reportFilter : {
                    'Closed Won' : true,
                    'Costed prospect' : true,
                    'Pipeline prospect' : true,
                    'Repeat Prospect' : true
                },
                message : '',
                brand : {
                    main : '#262d3f',
                    second : '#2d7175',
                    third : '#60c5c1',
                    payroll : '#5e3134',
                    iT : '#7b4447',
                    busDev : '#D45057',
                    other : '#F85D65',
                    opex : '#b86267',
                    profit : '#b86267',
                    budget : '#575858',
                    revenue : 'green',
                    netProfit : 'white',
                    cashFlow : 'darkGreen'
                }
            },
            methods: {
                toggleManaging : function(){
                    app.managing = !app.managing;
                    if (app.managing){
                        this.$nextTick(function() {
                            this.makeDraggable();
                        });
                    }
                },
                showManagerSection : function(show){
                    if (show && !app.showManager){
                        app.showManager = true;
                        app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                    } else if (!show && app.showManager){
                        app.showManager = false;
                        app.drawLine('cashFlow', app.cashGraphData,true);
                    }
                },
                changeDate : function(type){
                    if (type === 'preset') {

                        app.responsePending = true;
                        app.message         = 'Retrieving figures for ' + app.period;

                        if (app.period === 'CURRENT FY'){
                            app.startDate   = new Date(app.yearText, 3, 1);
                            app.endDate     = new Date(app.yearText + 1, 2, 31);
                            app.showChanges = true;
                        } else if (app.period === 'NEXT FY'){
                            app.startDate   = new Date(app.yearText + 1, 3, 1);
                            app.endDate     = new Date(app.yearText + 2, 2, 31);
                            app.showChanges = true;
                        } else if (app.period === 'PREVIOUS FY'){
                            app.startDate   = new Date(app.yearText - 1, 3, 1);
                            app.endDate     = new Date(app.yearText, 2, 31);
                            app.showChanges = true;
                        } else if (app.period === 'PAST & NEXT 6 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -6, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() +6, 0);
                            app.showChanges = false;
                        } else if (app.period === 'LAST 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -12, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth(), 0);
                            app.showChanges = false;
                        } else if (app.period === 'NEXT 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth(), 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() + 11, 0);
                            app.showChanges = false;
                        }
                        app.loadData();

                    } else if (type === 'datePicker'){
                        app.period = new Date(app.startDate).toString().substring(4,15).toUpperCase() +
                            ' - ' + new Date(app.endDate).toString().substring(4,15).toUpperCase();
                        app.showChanges     = false;
                        app.responsePending = true;
                        app.message         = 'Retrieving figures for ' + app.period;
                        app.loadData();
                    }
                },
                toggle : function(stage, type){
                    app[stage] = !app[stage];
                    app.drawData(false);
                },
                renderOpex : function(){
                    app.splitOpex = !app.splitOpex;
                    app.drawBar('opex',app.graphData['opex']);
                },
                getOppRecords : function(){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.getOppRecords}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            app.responsePending = false;
                            app.message         = '';
                            app.graphData       = result;
                            console.log(result);
                            app.drawData(true);
                        },
                        {escape: false});
                },
                getCashflowLong : function(renderGraph){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.getBalances}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            app.cashGraphData = result;
                            console.log(result);
                            if (renderGraph){
                                app.drawLine('cashFlow', app.cashGraphData,true);
                            }
                        },
                        {escape: false});
                },
                getCashflowShort : function(){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.getCashflowData}',true,
                        function (result) {
                            app.cashflowData = result;
                            console.log(result);
                        },
                        {escape: false});
                },
                getRecordChanges : function(){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.getRecordChanges}',
                        this.startDate,
                        this.endDate,
                        20,
                        10909,
                        function (result) {
                            app.changeData = result;
                            console.log(result);
                        },
                        {escape: false});
                },
                loadData : function(){

                    // step 1: get all performance figures
                    this.getOppRecords();

                    // step 2: get all cashflow figures for the current period
                    this.getCashflowLong(true);

                    // step 3: get all cashflow data for the next three months
                    this.getCashflowShort();

                    // step 4: get all database changes
                    this.getRecordChanges();
                },
                drawData : function(includeOpex){
                    this.drawBar('revenue',this.graphData['revenue']);
                    this.drawLine('revenue', this.graphData['revenue']);
                    this.drawBar('profit', this.graphData['profit']);
                    this.drawLine('profit', this.graphData['profit']);
                    if (includeOpex){
                        this.drawBar('opex', this.graphData['opex']);
                        this.drawLine('opex', this.graphData['opex']);
                    }
                    this.drawBar('netProfit', this.graphData['netProfit']);
                    this.drawLine('netProfit', this.graphData['netProfit']);
                },
                drawBar : function(type, graphData) {

                    google.charts.load('current', {
                        'packages': ['corechart', 'bar'], 'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            if (type === 'opex'){
                                if (app.splitOpex){
                                    chartData.addColumn('string', 'Amount');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    Object.keys(graphData).forEach(function (date) {
                                        chartData.addRow([date, graphData[date][6],
                                            graphData[date][7], graphData[date][8],graphData[date][9]]);
                                    });
                                } else {
                                    chartData.addColumn('string', 'Amount');
                                    chartData.addColumn('number', '');
                                    Object.keys(graphData).forEach(function (date) {
                                        chartData.addRow([date, graphData[date][1]]);
                                    });
                                }
                            } else {
                                chartData.addColumn('string', 'Amount');
                                chartData.addColumn('number', 'Confirmed');
                                chartData.addColumn('number', 'Weighted');
                                chartData.addColumn('number', 'Pipeline');
                                Object.keys(graphData).forEach(function (date) {
                                    var confirmed   = (app.confirmed) ? graphData[date][0] : null;
                                    var weighted    = (app.weighted) ? graphData[date][1] : null;
                                    var pipeline    = (app.pipeline) ? graphData[date][2] +
                                        (!app.weighted ? graphData[date][1] : 0)
                                        : null;
                                    chartData.addRow([date, confirmed, weighted, pipeline]);
                                });
                            }

                            var options = {
                                annotations: {
                                    stem: {
                                        color: "transparent"
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5
                                    }
                                },
                                tooltip: "none",
                                format: '£#,###',
                                enableInteractivity: false,
                                series: {
                                    0: {color: (type === 'opex' && app.splitOpex) ? app.brand.payroll :
                                            (type === 'opex' && !app.splitOpex) ? app.brand.opex : app.brand.main},
                                    1: {color: (type === 'opex') ? app.brand.iT : app.brand.second},
                                    2: {color: (type === 'opex') ? app.brand.busDev : app.brand.third},
                                    3: {color: (type === 'opex') ? app.brand.other : "transparent"},
                                    4: {color: "transparent"}
                                },
                                isStacked: true
                            };

                            options = Object.assign(app.getOptions(), options);
                            var chart = new google.visualization.ColumnChart(document.getElementById(type + 'Bar'));
                            var formatter = new google.visualization.NumberFormat({prefix: '£'});

                            var view = new google.visualization.DataView(chartData);
                            if (type === 'opex'){
                                if (app.splitOpex){
                                    view.setColumns([0,1, 2, 3, 4,{
                                        calc: function () {return 0},
                                        label: "Total",
                                        type: "number"
                                    },
                                        {
                                            calc: function (dt, row) {
                                                var figure      = (dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3) + dt.getValue(row, 4)) / 1000;
                                                var minusSign   = figure < 0 ? '-' : '';
                                                return minusSign + '£' + Math.abs(figure).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                            },
                                            type: "string",
                                            role: "annotation"
                                        }
                                    ]);
                                    formatter.format(chartData, 1);
                                    formatter.format(chartData, 2);
                                    formatter.format(chartData, 3);

                                } else {
                                    view.setColumns([0,1, {
                                        calc: function () {return 0},
                                        label: "Total",
                                        type: "number"
                                    },
                                        {
                                            calc: function (dt, row) {
                                                var figure      = (dt.getValue(row, 1)) / 1000;
                                                var minusSign   = figure < 0 ? '-' : '';
                                                return minusSign + '£' + Math.abs(figure).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                            },
                                            type: "string",
                                            role: "annotation"
                                        }
                                    ]);
                                    formatter.format(chartData, 1);

                                }

                            } else {
                                view.setColumns([0,1,2, 3, {
                                    calc: function () {return 0;},
                                    type: "number"
                                },
                                    {
                                        calc: function (dt, row) {
                                            var figure      = (dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000;
                                            var minusSign   = figure < 0 ? '-' : '';
                                            return minusSign + '£' + Math.abs(figure).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                        },
                                        type: "string",
                                        role: "annotation"
                                    }
                                ]);

                                formatter.format(chartData, 1);
                                formatter.format(chartData, 2);
                                formatter.format(chartData, 3);
                            }

                            chart.draw(view, options);
                        }
                    });
                },
                drawLine : function(type, graphData, viewMin){
                    google.charts.load('current', {
                        packages: ['corechart', 'line'],'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            if (type === 'cashFlow'){
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Budget');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Confirmed');
                                chartData.addColumn('number', 'Past');

                                Object.keys(graphData).forEach(function (element) {
                                    var elOne   = graphData[element][4] ? graphData[element][4] : null;
                                    var elTwo   = graphData[element][3] ? graphData[element][3] : null;
                                    var elThree = graphData[element][2] ? graphData[element][2] : null;
                                    var elFour  = graphData[element][1] ? graphData[element][1] : null;

                                    chartData.addRow([graphData[element][0], elOne, elTwo, elThree, elFour]);
                                });
                            } else if (type === 'opex'){
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Budget');
                                chartData.addColumn('number', 'Forecast');
                                chartData.addColumn('number', '');
                                chartData.addColumn('number', '');

                                var opexBudget   = 0;
                                var opexActual   = 0;

                                Object.keys(graphData).forEach(function (element) {
                                    opexBudget   += graphData[element][1];
                                    opexActual   += graphData[element][2];
                                    chartData.addRow([element, opexBudget, opexActual, null, null]);
                                });
                            } else {

                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Target');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Weighted');
                                chartData.addColumn('number', 'Confirmed');

                                var confirmed   = 0;
                                var weighted    = 0;
                                var pipeline    = 0;
                                var measure     = 0;

                                Object.keys(graphData).forEach(function (element) {

                                    confirmed   += graphData[element][0];
                                    weighted    += graphData[element][1] + graphData[element][0];
                                    pipeline    += graphData[element][2] + graphData[element][1] + graphData[element][0];
                                    measure     += graphData[element][3];

                                    var confirmedEntry  = app.confirmed? confirmed : null;
                                    var weightedEntry   = app.weighted? weighted : null;
                                    var pipelineEntry   = app.pipeline? pipeline : null;

                                    chartData.addRow([element, measure, pipelineEntry, weightedEntry, confirmedEntry]);
                                });
                            }

                            var options = {
                                lineWidth: 1,
                                vAxis: {
                                    format: 'short',
                                    viewWindow: {
                                        min: viewMin ? -200000 : null
                                    }
                                },
                                series: {
                                    0: {color: app.brand[type],
                                        format: '£#,###',
                                        areaOpacity : (type === 'opex') ? 0.7 : 0.2
                                    },
                                    1: {color: (type === 'opex') ? app.brand.budget : app.brand.third,
                                        format: '£#,###'
                                    },
                                    2: {color: app.brand.second,
                                        format: '£#,###',
                                        areaOpacity : 0.4
                                    },
                                    3: {color: app.brand.main,
                                        format: '£#,###',
                                        areaOpacity : 0.6
                                    },
                                    4 : {color: app.brand.budget,
                                        format: '£#,###'
                                    }
                                }
                            };

                            options = Object.assign(app.getOptions(type), options);
                            var chart = new google.visualization.AreaChart(document.getElementById(type + 'Line'));
                            var formatter = new google.visualization.NumberFormat({
                                prefix: '£'
                            });
                            formatter.format(chartData, 1);
                            formatter.format(chartData, 2);
                            formatter.format(chartData, 3);
                            formatter.format(chartData, 4);

                            chart.draw(chartData, options);
                        }
                    });
                },
                getOptions : function(type){
                    return {
                        fontName: 'Salesforce Sans',
                        fontSize: 13,
                        height: '370px',
                        hAxis: {
                            format: 'MMM d',
                            height: (type === 'history') ? '50px' : '30px',
                            slantedText: true,
                            slantedTextAngle: 30
                        },
                        vAxis: {
                            format: 'short'
                        },
                        chartArea: {
                            width: (type === 'cashFlow') ? '92%' : '90%',
                            height: '80%',
                            right: (type === 'cashFlow') ? 7 : 5,
                            top: 5
                        },
                        legend: {
                            position: (type !== 'history') ? 'none' : ''
                        },
                        animation: {
                            duration: 500,
                            easing: 'inAndOut',
                            startup: true
                        }
                    }
                },
                drawHistoryLine : function(data, recordId){
                    google.charts.load('current', {
                        packages: ['corechart', 'line'],'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            chartData.addColumn('string', 'Date');
                            chartData.addColumn('number', 'Revenue');
                            chartData.addColumn('number', 'Invoiced');
                            chartData.addColumn('number', 'Paid');
                            chartData.addColumn('number', 'Cost of sale');
                            chartData.addColumn('number', 'Bills recieved');
                            chartData.addColumn('number', 'Bills paid');

                            Object.keys(data).forEach(function (element) {

                                var revenue      = data[element][1];// ? data[element][1] : null;
                                var invoiced     = data[element][2];// ? data[element][2] : null;
                                var paid         = data[element][3];// ? data[element][3] : null;
                                var costOfSale   = data[element][4];// ? data[element][4] : null;
                                var expenses     = data[element][5];// ? data[element][5] : null;
                                var expensesPaid = data[element][6];// ? data[element][6] : null;

                                chartData.addRow([data[element][0] ? new Date(data[element][0]).toString().substring(4,15) : 'NOW',
                                    revenue, invoiced, paid, costOfSale, expenses, expensesPaid]);
                            });

                            var options = {
                                lineWidth: 1,
                                fontSize: '8px',
                                vAxis: {
                                    format: 'short'
                                },
                                series: {
                                    0: {color: 'lightgreen'},
                                    1: {color: 'green'},
                                    2: {color: 'darkgreen'},
                                    3: {color: 'pink'},
                                    4 : {color: 'red'},
                                    5 : {color: 'darkred'}
                                }
                            };

                            options = Object.assign(app.getOptions('history'), options);
                            var chart = new google.visualization.AreaChart(document.getElementById(recordId));
                            var formatter = new google.visualization.NumberFormat({
                                prefix: '£'
                            });
                            formatter.format(chartData, 1);
                            formatter.format(chartData, 2);
                            formatter.format(chartData, 3);
                            formatter.format(chartData, 4);
                            formatter.format(chartData, 5);
                            formatter.format(chartData, 6);

                            chart.draw(chartData, options);
                        }
                    });
                },
                makeDraggable : function() {

                    var categories = ['in','paymentRun','payroll','freelancers','creditCard',
                                      'managementFees','directDebit', 'vat'];

                    // use jQuery sortable librabry method to make each strand of the cashflow sortable
                    categories.forEach(function(category){
                        var oldList, newList, item;

                        $('.' + category).sortable({
                            receive: function(ev, ui) {
                                if(!ui.item[0].classList.contains('draggable')){
                                    ui.sender.sortable("cancel");
                                }
                            },
                            start: function(event, ui) {
                                item            = ui.item;
                                newList         = oldList = ui.item.parent().parent();
                                app.dragging    = category;
                                app.draggingId  = ui.item[0].dataset.id;
                            },
                            stop: function(event, ui) {
                                app.dragging        = '';
                                app.draggingId      = '';
                            },
                            change: function(event, ui) {
                                if (ui.sender) newList = ui.placeholder.parent().parent();
                            },
                            connectWith: '.' + category
                        }).disableSelection();

                        $('.' + category).droppable({

                            drop: function( event, ui ) {

                                if (ui.draggable[0].classList.contains('draggable')
                                    && ui.draggable[0].dataset.week !==  event.target.dataset.week){
                                    app.responsePending = true;
                                    app.message         = 'Updating the record date and recalculating the flow';

                                    var sourceRecord    = ui.helper.context.dataset;
                                    var targetWeekDiv   = event.target.dataset;
                                    var weekNumber      = parseInt(targetWeekDiv.week);
                                    var weekDate;

                                    if (weekNumber < 11){
                                        weekDate    = new Date(app.cashflowData['WEEK COMMENCING'][weekNumber + 1]);
                                        weekDate.setDate(weekDate.getDate() -1);
                                    } else {
                                        weekDate    = new Date(app.cashflowData['WEEK COMMENCING'][weekNumber]);
                                        weekDate.setDate(weekDate.getDate() + 6);
                                    }

                                    // step 2: get all cashflow figures
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.InsightsController.changeEntryDate}',
                                        sourceRecord.id,
                                        weekDate,
                                        function (result, event) {
                                            app.responsePending = false;
                                            app.message         = '';

                                            if (event.status){
                                                Object.assign(app.cashflowData,result);
                                                Vue.set(app.cashflowData['RECORDS'][sourceRecord.index],'AdjustedDate__c',true);
                                                $('div[data-index="' + sourceRecord.index + '"]')[0].style.zIndex = 1;
                                                $('div[data-index="' + sourceRecord.index + '"]')[0].dataset.week = weekNumber;

                                                if (result['VALUES']){
                                                    app.cashflowData['RECORDS'].forEach(function(entry){
                                                        if (result['VALUES'][entry.Id]){
                                                            entry.Amount__c = result['VALUES'][entry.Id].Amount__c;
                                                        }
                                                    });
                                                }
                                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);

                                            } else {
                                                loadData();
                                            }
                                        },
                                        {escape: false});
                                }
                            }
                        });
                    });
                },
                rerunFlow : function() {
                    app.rerunningFlow   = false;
                    app.responsePending = true;
                    app.message         = 'Recalculating the cash flow...';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.rerunFlow}',
                        app.rerunConfig.resetDates,
                        app.rerunConfig.resetBudgets,
                        function (result, event) {
                            app.rerunConfig.resetDates      = false;
                            app.rerunConfig.resetBudgets    = false;
                            app.responsePending             = false;
                            app.message                     = '';
                            Object.assign(app.cashflowData,result);
                            app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                            app.getCashflowLong(false);
                        },
                        {escape: false});
                },
                openRecord : function(recordId, amount, comment){
                    if (app.expandId === ''){
                        app.expandId             = recordId;
                        app.cancelValues.amount  = amount;
                        app.cancelValues.comment = comment;
                        app.entryEditConfig      = '';
                    }
                },
                deleteEntry : function(index){
                    app.responsePending = true;
                    app.message         = 'Deleting the entry and recaculating the cash flow...';
                    var recordId        = app.expandId;
                    app.expandId        = '';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.deleteEntry}',
                        recordId,
                        function (result, event) {
                            app.responsePending = false;
                            app.message         = '';
                            if (event.status){
                                Object.assign(app.cashflowData,result);
                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                                app.cashflowData['RECORDS'].splice(index,1);
                                app.getCashflowLong(false);
                            }
                        },
                        {escape: false});
                },
                updateAmount : function(record){
                    app.responsePending = true;
                    app.message         = 'Updating the record amount and recalculating the cash flow...';
                    app.expandId        = '';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.updateAmount}',
                        record.Id,
                        record.Amount__c,
                        function (result, event) {
                            app.responsePending = false;
                            app.message         = '';
                            if (event.status){
                                Object.assign(app.cashflowData,result);
                                Vue.set(record,'AmountAdjusted__c',true);
                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                                app.getCashflowLong(false);
                            }
                        },
                        {escape: false});
                },
                toggleFreelancer : function(){
                    app.responsePending = true;
                    app.message         = 'Adjusting the supplier profile...';

                    var recordId = app.expandId;
                    app.expandId = '';
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.toggleFreelancer}',
                        recordId,
                        function (result, event) {
                            if (result){
                                app.rerunFlow(false);
                            } else {
                                app.responsePending = false;
                                app.message         = '';
                            }
                        },
                        {escape: false});
                },
                updateComment : function(record){
                    app.expandId        = '';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.updateComment}',
                        record.Id,
                        record.Comment__c,
                        function (result, event) {
                            if (!event.status){
                                record.Comment__c = app.cancelValues.comment;
                            }
                        },
                        {escape: false});
                },
                getAttachmentLink : function(billId){
                    app.showAttachment = true;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.getAttachmentLink}',
                        billId,
                        function (result, event) {
                            if (result.QueryResponse && result.QueryResponse.Attachable[0]){
                                var uriEncoded  = result.QueryResponse.Attachable[0].TempDownloadUri;
                                var uriDecoded  = encodeURI(uriEncoded);
                                app.attachmentLink = decodeURI(uriDecoded);
                            }
                        },
                        {escape: false});
                },
                convertToDirectDebit : function(vendorRef, vendorName, existing) {
                    app.responsePending = true;
                    app.message         = 'Setting up a direct debit profile ...';
                    app.expandId        = '';

                    if (existing){
                        app.ddConfig.frequency = app.cashflowData['SUPPLIER PROFILES'][vendorRef].Terms__c;
                        app.ddConfig.occurence = app.cashflowData['SUPPLIER PROFILES'][vendorRef].Day__c;
                        app.ddConfig.amount    = app.cashflowData['SUPPLIER PROFILES'][vendorRef].Amount__c;
                        app.ddConfig.date      = app.cashflowData['SUPPLIER PROFILES'][vendorRef].EndDateInput__c;
                        app.ddConfig.category  = app.cashflowData['SUPPLIER PROFILES'][vendorRef].Category__c;
                    }

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.convertToDirectDebit}',
                        vendorRef,
                        vendorName,
                        app.ddConfig.frequency,
                        app.ddConfig.occurence,
                        app.ddConfig.amount,
                        app.ddConfig.date,
                        app.ddConfig.category,
                        function (result, event) {
                            if (result){
                                app.abortEdit();
                                app.rerunFlow(false);
                            } else {
                                app.responsePending = false;
                                app.message         = '';
                            }
                        },
                        {escape : false});
                },
                disableDirectDebit : function(supplierId){
                    app.responsePending = true;
                    app.message         = 'Removing direct debit profile for this supplier...';
                    app.expandId        = '';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.disableDirectDebit}',
                        supplierId,
                        function (result, event) {
                            if (result){
                                app.rerunFlow(false);
                            } else {
                                app.responsePending = false;
                                app.message         = '';
                            }
                        },
                        {escape : false});
                },
                abortEdit : function(){
                    app.addingEntry         = false;
                    app.expandId            = '';

                    Object.keys(app.ddConfig).forEach(function(key){
                        app.ddConfig[key] = '';
                    });
                },
                addCustomEntry : function(){
                    app.responsePending = true;
                    app.addingEntry     = false;
                    app.message         = 'Adding custom entry and recalculating the flow...';

                    // send new entry configuration data to controller
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.addCustomEntry}',
                        app.newEntryConfig.type,
                        app.newEntryConfig.description,
                        app.newEntryConfig.category,
                        app.newEntryConfig.amount,
                        app.newEntryConfig.date,
                        function (result) {
                            app.responsePending = false;
                            app.message         = '';
                            app.clearCustomEntry();
                            Object.assign(app.cashflowData,result);
                            app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                            app.getCashflowLong(false);
                        },
                        {escape: false});
                },
                clearCustomEntry : function() {
                    app.addingEntry                 = false;
                    Object.keys(app.newEntryConfig).forEach(function(key){
                        app.newEntryConfig[key] = '';
                    });
                },
                markAsPaid : function(recordId){

                    app.responsePending = true;
                    app.message         = 'Flagging the entry as paid and recalculating the flow...';
                    app.expandId        = '';

                    // send new entry configuration data to controller
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.markAsPaid}',
                        recordId,
                        function (result) {
                            app.responsePending = false;
                            app.message         = '';
                            Object.assign(app.cashflowData,result);
                            app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                            app.getCashflowLong(false);
                        },
                        {escape: false});
                },
                toggleActiveRow : function(record, object){

                    console.log(object);
                    if (app.activeReportRow){
                        app.activeReportRow = '';
                    } else {
                        app.activeReportRow = record.Id;
                        if (!record.figuresHistory){
                            Visualforce.remoting.Manager.invokeAction(
                                '{!$RemoteAction.InsightsController.getOpportunityHistory}',
                                record.Id,
                                function (result) {
                                    console.log(result['HISTORY']);
                                    Vue.set(record, 'figuresHistory',result);
                                    app.drawHistoryLine(result['FIGURES'],record.Id);

                                });
                        }
                    }
                },
                getQBSourceOptions : function(){
                    app.manager.configuring = true;
                    if (!app.QBSourceOptions){
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.InsightsController.getQBSourceOptions}',
                            app.period,
                            function (result) {
                                app.QBSourceOptions = result;
                                Vue.set(app.QBSourceOptions,'sfCommit',
                                    new Date(app.graphData.SFCOMMIT.Month__c).toString().substring(4,15).split(' ')[0] + ' '  +
                                    new Date(app.graphData.SFCOMMIT.Month__c).toString().substring(4,15).split(' ')[2]);
                                Vue.set(app.QBSourceOptions,'qbCommit',
                                    new Date(app.graphData.QBCLOSE.Month__c).toString().substring(4,15).split(' ')[0] + ' '  +
                                    new Date(app.graphData.QBCLOSE.Month__c).toString().substring(4,15).split(' ')[2]);

                                console.log(app.QBSourceOptions);

                            });
                    }
                },
                setQBSourceOptions : function(){

                    app.manager.configuring = false;
                    app.responsePending     = true;
                    app.message             = 'Comitting Salesfore data and syncing Quickbooks data...';

                    console.log(app.QBSourceOptions);

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.setQBSourceOptions}',
                        app.QBSourceOptions.budgetSource,
                        app.QBSourceOptions.forecastSource,
                        app.period,
                        new Date(app.QBSourceOptions.qbCommit),
                        new Date(app.QBSourceOptions.sfCommit),
                        function (result) {
                            app.responsePending     = false;
                            app.message             = '';
                            if (result){
                                app.loadData();
                            }
                        });
                },
                configureAdjustment : function(month){
                    app.manager.adjusting           = true;
                    app.manager.adjustmentMonth     = month;
                    app.manager.adjustmentRevenue   = (app.graphData.QUICKBOOKSFIGURES.qbRevenue[month][0] - app.graphData['revenue'][month][0]).toFixed(2);
                    app.manager.adjustmentCOS       = (app.graphData.QUICKBOOKSFIGURES.qbCOS[month][0] - (app.graphData['revenue'][month][0] - app.graphData['profit'][month][0])).toFixed(2);
                    app.manager.adjustmentProfit    = (app.manager.adjustmentRevenue - app.manager.adjustmentCOS).toFixed(2);
                },
                postAdjustment : function(){
                    app.manager.adjusting   = false;
                    app.responsePending     = true;
                    app.message             = 'posting adjustment...';

                    console.log(app.manager);

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.InsightsController.postAdjustment}',
                        new Date(app.manager.adjustmentMonth),
                        app.manager.adjustmentRevenue,
                        app.manager.adjustmentCOS,
                        app.manager.adjustmentProfit,
                        app.manager.adjustmentComment,
                        function (result) {
                            app.responsePending = false;
                            app.message = '';
                            console.log(result);
                            if (result){
                                app.loadData();
                            }
                            app.QBSourceOptions = result;
                        });
                },
                downloadCSV : function() {
                    var args = app.exportOppReportData();
                    var data, filename, link;
                    var csv = app.convertArrayOfObjectsToCSV({
                        data: args
                    });
                    if (csv == null) return;

                    filename = args.filename || 'INSIGHTS REPORT ' + app.period + '.csv';

                    if (!csv.match(/^data:text\/csv/i)) {
                        csv = 'data:text/csv;charset=utf-8,' + csv;
                    }
                    data = encodeURI(csv);

                    link = document.createElement('a');
                    link.setAttribute('href', data);
                    link.setAttribute('download', filename);
                    link.click();
                },
                convertArrayOfObjectsToCSV : function(args) {
                    var result, ctr, keys, columnDelimiter, lineDelimiter, data;

                    data = args.data || null;
                    if (data == null || !data.length) {
                        return null;
                    }

                    columnDelimiter = args.columnDelimiter || ',';
                    lineDelimiter = args.lineDelimiter || '\n';

                    keys = Object.keys(data[0]);

                    result = '';
                    result += keys.join(columnDelimiter);
                    result += lineDelimiter;

                    data.forEach(function(item) {
                        ctr = 0;
                        keys.forEach(function(key) {
                            if (ctr > 0) result += columnDelimiter;

                            result += item[key];
                            ctr++;
                        });
                        result += lineDelimiter;
                    });

                    return result;
                },
                exportOppReportData : function(){

                    var reportData = [];

                    Object.keys(app.graphData.REPORTDATA).forEach(function(month){
                        Object.keys(app.graphData.REPORTDATA[month]).forEach(function(stage){

                            var records = app.graphData.REPORTDATA[month][stage];

                            for (var x = 0; x < records.length; x++){
                                if (records[x].Revenue__c || records[x].Profit__c || records[x].CostOfSale__c){
                                    var type = records[x].Opportunity__c ? 'INHERITANCE' :
                                                records[x].Calder__c ? 'COMMISSION' : 'CUSTOM ADJUSTMENT';
                                    reportData.push(
                                        {
                                            Type : type,
                                            'Account Manager' : '',
                                            'Project Manager' : '',
                                            'Job Number' : records[x].Opportunity__c ? records[x].Opportunity__r.Filtered_Job_Number__c : '',
                                            'Name' : records[x].Opportunity__c ? '"' + records[x].Opportunity__r.Name + '"' : '',
                                            'Account' : records[x].Opportunity__c ? '"' + records[x].Opportunity__r.Account.Name + '"' : '',
                                            'Calder' : false,
                                            'Start Date' : new Date(records[x].EventMonthYear__c).toString().substring(4,15),
                                            'End Date' : new Date(records[x].EventMonthYear__c).toString().substring(4,15),
                                            'Stage' : stage,
                                            'Revenue' : records[x].Revenue__c,
                                            'Cost of sale' : records[x].CostOfSale__c,
                                            'Gross Profit' : records[x].Profit__c,
                                            'Margin' : '',
                                            'Invoiced' : '',
                                            'Paid' : '',
                                            'COS Billed' : '',
                                            'COS Paid' : '',
                                            'Rec Status' : '',
                                            'Probability' : 100
                                        });
                                } else if (records[x].Account) {
                                    reportData.push(
                                        {
                                            Type : 'OPPORTUNITY',
                                            'Account Manager' : records[x].Owner.FirstName.substring(0,1) + '. ' + records[x].Owner.LastName,
                                            'Project Manager' : records[x].Project_Manager__c ? records[x].Project_Manager__r.FirstName.substring(0,1) + '. ' + records[x].Project_Manager__r.LastName : '',
                                            'Job Number' : records[x].Filtered_Job_Number__c,
                                            'Name' : '"' + records[x].Name + '"',
                                            'Account' : '"' + records[x].Account.Name + '"',
                                            'Calder' : records[x].Calder_Opportunity__c,
                                            'Start Date' : new Date(records[x].Event_start__c).toString().substring(4,15),
                                            'End Date' : new Date(records[x].Event_end__c).toString().substring(4,15),
                                            'Stage' : stage,
                                            'Revenue' : records[x].Committed__c ? records[x].CommittedRevenue__c : records[x].Amount_Calder__c,
                                            'Cost of sale' : records[x].Committed__c ? records[x].CommittedCOS__c : records[x].Filtered_Cost_of_Sale__c,
                                            'Gross Profit' : records[x].Committed__c ? records[x].CommittedProfit__c : records[x].Gross_profit_2__c,
                                            'Margin' : records[x].Gross_Margin__c,
                                            'Invoiced' : records[x].Amount_Invoiced2__c,
                                            'Paid' : records[x].Amount_Paid__c,
                                            'COS Billed' : records[x].Quickbooks_COS__c,
                                            'COS Paid' : records[x].Quickbooks_COS_Paid__c,
                                            'Rec Status' : records[x].RecStatus__c,
                                            'Probability' : records[x].Probability
                                        });
                                }
                            }
                        });
                    });
                    return reportData;
                }
            },
            beforeMount() {

                // set default date range
                this.today      = new Date();
                this.yearText   = (this.today.getMonth() + 1 > 3) ? this.today.getFullYear() : this.today.getFullYear() -1;
                this.startDate  = new Date(this.yearText, 3, 1);
                this.endDate    = new Date(this.yearText + 1, 2, 31);

                var today       = new Date();
                var ddOpen      = (today.getDate() < 10) ? '0' + (today.getDate() + 1) : today.getDate();
                var mmOpen      = ((today.getMonth()+1) < 10) ? '0' + (today.getMonth() + 1) : today.getMonth()+1;
                var yyyyOpen    = today.getFullYear();
                this.globalConfig.min = yyyyOpen+'-'+mmOpen+'-'+ddOpen;

                var close       = new Date(today.getFullYear(), today.getMonth() + 2, today.getDate());
                var ddClose      = (close.getDate() < 10) ? '0' + (close.getDate() + 1) : close.getDate();
                var mmClose      = ((close.getMonth()+1) < 10) ? '0' + (close.getMonth() + 1) : close.getMonth()+1;
                var yyyyClose    = close.getFullYear();
                this.globalConfig.max = yyyyClose+'-'+mmClose+'-'+ddClose;

                this.loadData();
            },
            mounted:function(){
                window.addEventListener('scroll', function(){
                    app.hideNav = window.scrollY > 99;
                })
            }
        });

    </script>
    </html>
</apex:page>
