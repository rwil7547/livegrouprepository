<!--
 - Created by Ronan Williams on 05/03/2019.
 -->

<apex:page id="vueExperiment" controller="VueTestController" lightningStylesheets="true">

    <html xmlns:v-bind="http://vue.org" xmlns:v-on="http://vue.org">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
        <script src="https://cdn.jsdelivr.net/npm/vue"></script>
        <script src="https://unpkg.com/vue-numeric"></script>
        <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>
    </head>

    <style>

        body {
            background-image: url("{!$Site.BaseUrl}/_slds/images/themes/lightning_blue/lightning_blue_background.png");
            background-size: 100%;
            background-repeat: no-repeat;
            background-position: top;
            background-color: #B0C4DF;
            background-attachment: fixed;
        }
        .lds-roller {
            display: inline-block;
            position: relative;
            width: 64px;
            height: 64px;
        }
        .lds-roller div {
            animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
            transform-origin: 32px 32px;
        }
        .lds-roller div:after {
            content: " ";
            display: block;
            position: absolute;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #fff;
            margin: -3px 0 0 -3px;
        }
        .lds-roller div:nth-child(1) {
            animation-delay: -0.036s;
        }
        .lds-roller div:nth-child(1):after {
            top: 50px;
            left: 50px;
        }
        .lds-roller div:nth-child(2) {
            animation-delay: -0.072s;
        }
        .lds-roller div:nth-child(2):after {
            top: 54px;
            left: 45px;
        }
        .lds-roller div:nth-child(3) {
            animation-delay: -0.108s;
        }
        .lds-roller div:nth-child(3):after {
            top: 57px;
            left: 39px;
        }
        .lds-roller div:nth-child(4) {
            animation-delay: -0.144s;
        }
        .lds-roller div:nth-child(4):after {
            top: 58px;
            left: 32px;
        }
        .lds-roller div:nth-child(5) {
            animation-delay: -0.18s;
        }
        .lds-roller div:nth-child(5):after {
            top: 57px;
            left: 25px;
        }
        .lds-roller div:nth-child(6) {
            animation-delay: -0.216s;
        }
        .lds-roller div:nth-child(6):after {
            top: 54px;
            left: 19px;
        }
        .lds-roller div:nth-child(7) {
            animation-delay: -0.252s;
        }
        .lds-roller div:nth-child(7):after {
            top: 50px;
            left: 14px;
        }
        .lds-roller div:nth-child(8) {
            animation-delay: -0.288s;
        }
        .lds-roller div:nth-child(8):after {
            top: 45px;
            left: 10px;
        }
        @keyframes lds-roller {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
        .box {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            padding: 10px;
            background-color: white;
            border: 0.5px solid grey;
            margin-bottom: 10px;
        }
        .controlHolder {
            position: sticky;
            top: 5px;
            z-index: 1000;
        }
        .control {
            display: flex;
            justify-content: center;
        }
        .dateHolder {
            display: flex;
            overflow: hidden;
            font-size: 11px;
            padding-left: 10px;
            padding-right: 10px;
            font-weight: lighter;
            position:absolute;
            left:0;
        }
        .viewOptionHolder {
            display: flex;
            font-size: 15px;
            margin-left: 30px;
            border-radius: 5px;
            overflow: hidden;
        }
        .viewOption {
            padding: 6px;
            padding-left: 10px;
            padding-right: 10px;
            background-color: #d7d7d7;
            font-weight: lighter;
            cursor: pointer;
            opacity: 0.5;
        }
        .viewOption:hover {
            opacity: 1;
        }
        .activeSetting {
            opacity: 1 !important;
            background-color: #c1c1c1;
        }
        .dimmer {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
            top: 0;
            margin: auto;
            height: 100vh;
            width: 100vw;
            background-color: white;
            opacity: 0.75;
        }
        .boxLite {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            border-radius: 3px;
            padding: 5px;
            background-color: white;
            border: 0.5px solid lightgrey;
            margin:4px;
        }
        .labelBlock {
            width: 100%;
            text-align: center;
            font-size: 16px;
        }
        .valueBlock {
            position: relative;
            text-align: center;
            justify-content: center;
            align-items: center;
            font-size: 28px;
            margin-bottom: 6px;
        }
        .splitTwo {
            display: grid;
            grid-template-columns: 50% 50%;
        }
        .splitFour {
            display: grid;
            grid-template-columns: 25% 25% 25% 25%;
        }
        .title {
            font-size: 18px;
            display: flex;
        }
        .optionsHolder {
            position: relative;
            width: 100%;
            display: flex;
            justify-content: flex-end;
        }
        .options {
            display: flex;
            border-radius: 3px;
            overflow: hidden;
            width: auto;
            font-size: 11px;
            height: 22px;
        }
        .option {
            padding-top: 4px;
            width: 100px;
            color: white;
            text-align: center;
            cursor: pointer;
            font-weight: lighter;
        }
        .optionLong {
            padding-top: 4px;
            width: 200px;
            color: white;
            text-align: center;
            cursor: pointer;
            font-size: 9px;
            position: relative;
        }
        .miniOptions {
            display: flex;
            font-size: 9px;

        }
        .miniOption {
            width: 50px;
        }
        .inactive {
            opacity : 0.5;
        }
        .report {
            width: 90%;
            height: 90%;
            background-color: white;
        }
        .graph {
            position: relative;
            /*height: 380px;*/
            height: 300px;
        }
        .confirmed {
            background-color: #262d3f;
        }
        .weighted {
            background-color: #2d7175;
        }
        .pipeline{
            background-color: #60c5c1;
        }
        .target {
            background-color: #575858;
        }
        .opex{
            background-color: #b86267;
        }
        .budget {
            background-color: #575858;
        }
        .dim {
            opacity : 0.3;
        }
        .customButton{
            border-radius: 10px;
            cursor: pointer;
        }
        .customDates {
            display: flex;
        }
        .customDates > * {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 100%;
            padding-left: 6px;
            padding-right: 6px;
            vertical-align: middle;
        }
        .row {
            border-bottom: 0.5px solid lightgrey;
            min-height: 25px;
            position: relative;
            display: flex;
            cursor: default;
        }
        .rowTight {
            width: 100%;
        }
        .rowGrow {
            width: 3800px;
            font-size: 17px;
        }
        .recordRow{
            min-height:120px;
            position: relative;
        }
        .column {
            margin: 1px;
            margin-right: 5px;
            height: auto;
            min-height: 23px;
            width: 200px;
            padding-left: 5px;
            position: sticky;
            left: 4px;
            background: white ;
            z-index: 501;
            box-shadow: 0 4px 8px 0 rgba(255,255,255, 0.1), 0 6px 20px 0 rgba(255,255,255, 0.1);
        }
        .week {
            margin: 1px;
            height: auto;
            min-height: 23px;
            text-align: right;
            padding-right: 5px;
            position: relative;
            transition: opacity 0.5s;
            transition-property: opacity;

        }
        .weekSmall {
            width: calc((100% - 200px) / 12);
        }
        .weekLarge {
            width: 280px;
        }
        .scroll {
            overflow-x: scroll;
            position: relative;
        }
        .bold {
            font-weight: bold;
        }
        .noSpill {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }



        .flowDate{
            background-color: white;
            position: sticky;
            top: 2px;
        }
        .icon {
            position: absolute;
            right: -7px;
            bottom: -6px;
            opacity: 0.4;
        }
        .iconImg {
            width: 30px;
        }
        .sortable {
            height: 100%;
            position: relative;
        }
        .largeCol {
            font-weight: bolder;
            color: #b1b1b1;
            width: 200px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            z-index: 0;
        }
        .manageFlowIcon {
            opacity: 0.3;
            cursor: pointer;
            font-size: 24px;
            margin-left: 5px;
        }
        .manageFlowIcon:hover {
            opacity: 1;
        }
        .dropZone {
            position: absolute;
            height: 100%;
            width: 100%;
            top:0;
            border: 0.5px solid #bcbcbc;
            z-index: 500;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            background-image: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,1));
        }
        .dropText {
            width: 97%;
            font-weight: bolder;
            opacity: 0.3;
            z-index: 1;
            color: #686868;
            margin-right: 40px;
        }
        .dropTextDate {
            font-size: 21px;
            margin-bottom: -10px;
        }
        .dropTextNumber {
            font-size: 38px;
        }
        .selectOpt {
            height: 2px;
        }
        .colDivider {
            display: grid;
            grid-template-columns: 5% 6% 15% 13% 8% 8% 10% 10% 10% 6% 9%;
            padding-left: 4px;
            padding-right: 4px;
        }
        .headerDivider {
            display: grid;
            grid-template-columns: 55% 10% 10% 10% 6% 9%;
            padding-left: 4px;
            padding-right: 4px;
        }
        .sourceIndicator {
            position: absolute;
            right: 0;
            bottom: 0;
            font-weight: bold;
            text-align: right;
            opacity: 1;
            font-size: 10px;
            width: 64%;
            padding: 3px;
            color: white;
            border-top-left-radius: 3px;
        }
        .Quickbooks {
        }
        .QuickbooksIndicator {
            color: white;
            background-image: linear-gradient(to right, #fefdfd 40%, green);
        }
        .SalesforceIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , blue);
        }
        .SalesforcePIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , grey);
        }
        .BudgetIndicator, .VATIndicator {
            background-image: linear-gradient(to right, #fefdfd 40% , #b1a657);
        }
        .up {
            color: green;
        }
        .down {
            color: red;
        }

        .yearGrid {
            display: grid;
            grid-template-columns: 13% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 6.6% 8%;
            justify-content: space-evenly;
            font-weight: lighter;
        }
        .yearEntry {
            width:100%;
            padding-right: 4px;
            text-align: right;
        }
        .header {
            font-weight: bold;
        }
        .monthTile {
            border-left: 0.5px solid lightgrey;
            text-align: right;
            padding: 4px;
            cursor: pointer;
        }
        .monthTile:hover {
            background-color: #f2f2f2;
            font-size: 14px;
            padding: 5px;
            width: 100px;
            z-index:100;
        }
        .reportCols {
            position: sticky;
            top: 88px;
            background-color: #555555;
            color: white;
            padding: 4px;
        }
        .reportHeader {
            font-size: 16px;
        }
        .reportMonth {
            font-weight: bold;
            background-color: #262d3f;
            color: white;
        }
        .stage {
            background-color: #c2e9eb;
            padding: 3px;
        }
        .reportRecord {
            cursor: pointer;
            border-bottom: 0.5px solid #e4e4e4;
            padding: 3px;
            min-height: 31px;
        }
        .reportRecord:hover {
            background-color: #f4f4f4;
        }
        .reportTotals {
            font-size: 18px;
        }
        .open {
            font-style: italic;
            font-weight: lighter;
            color: grey;
        }
        .dragPrevent {
            position: absolute;
            top: 0;
            left: 0;
            width: 3500px;
            height: 100%;
            z-index: 10;
            background-color: white;
            opacity: 0.8;
        }
        .record {
            margin-top: 2px;
            margin-bottom: -32px;
            width: 100%;
            border-radius: 3px;
            text-align: left;
            background-color: white;
            padding: 5px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            cursor: pointer;
            display: grid;
            grid-template-columns: 7% 66% 6% 21%;
            position: relative;
            color: black;
            font-size:10px;
        }

        .recordDetails {
            position: absolute;
            margin-top: 15px;
            margin-left: -8px;
            border-radius: 3px;
            width: 100%;
            height: auto;
            padding: 5px;
            z-index: 50;
            background-color: white;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(255,255,255, 0.4), 0 6px 20px 0 rgba(255,255,255, 0.4);
        }
        .recordDetailsHidden {
            display : none;
        }
        .recordOptionButton {
            font-size: 15px;
            margin: 3px;
            padding: 4px;
            background-color: white;
            border: 0.5px solid grey;
            border-radius: 3px;
            display: grid;
            grid-template-columns: 10% 90%;
        }
        .recordOptionButton > input {
            border: none;
        }
        .recordOptionButton > .fas, .far {
            padding-top: 3px;
        }
        .recordOptionButton:hover {
            background-color: #f7f7f7;
        }

        .flowOptionButton {
            font-size: 15px;
            margin: 3px;
            padding: 4px;
            background-color: white;
            border: 0.5px solid grey;
            border-radius: 3px;
            cursor: pointer;
        }
        @-webkit-keyframes example {
            from {height: 0;width:0;}
            to {height: auto;width: 100%;}
        }
        @keyframes example {
            from {height: 0px;width:0;}
            to {height: auto;width: 100%;}
        }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        .gapConcealer {
            position: absolute;
            height: 100%;
            width: 20px;
            top:0;
            left:-10px;
            background-color: white;
        }
        .faAbsolute {
            font-size: 17px;
            position: absolute;
            margin-left: 10px;
            margin-bottom: -6px;
            bottom: 13px;
        }
        body textarea, .slds-vf-scope textarea {
            border: 1px solid rgb(255, 255, 255);
            font-size: 13px;
            padding: 1px;
        }

        .ddSetup {
            display: grid;
            grid-template-columns: 50% 50%;
            padding: 5px;
            font-size: 13px;

        }
        body select, body select[size="0"], body select[size="1"],
        .slds-vf-scope select, .slds-vf-scope select[size="0"],
        .slds-vf-scope select[size="1"] {
            border: 1px solid rgb(221, 219, 218);
            max-width: 100%;
            width: 100%;
            border-radius: .25rem;
            background-color: rgb(255, 255, 255);
            color: rgb(8, 7, 7);
            -webkit-transition: border .1s linear, background-color .1s linear;
            transition: border .1s linear, background-color .1s linear;
        }

        .ddSetup > input, .ddSetup > select {
            width: 100%;

        }
        .adjustmentCount {
            position: absolute;
            right: -16px;
            color: white;
            width: 65px;
            height: 65px;
            font-weight: bold;
            border-bottom: 77px solid #b2a5d1;
            border-left: 25px solid transparent;
        }
        .rowContent {
            width: 97%;
            margin-left: 0.5%;
            position: absolute;
            background-color: white;
            z-index: 100;
            padding: 10px;
            border-radius: 4px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);

        }
        .reportFilter {
            display: flex;
            justify-content: center;
            overflow: hidden;
            margin-top: 7px;
            border-radius: 3px;
        }
        .reportFilterOption {
            cursor: pointer;
            padding: 3px;
            padding-left: 6px;
            padding-right: 6px;
            color: white;
        }
        .reportStage {
            color: white;
        }
        .Closed {
            background-color: #2c7495;
        }
        .Costed {
            background-color: #21a5ab;
        }
        .Pipeline {
            background-color: #5fc6c3;
        }
        .Repeat {
            background-color: #8194bb;
        }
        #app {
            width: 100%;
            padding: 10px;
        }

        .fadeIn {
            opacity: 0;
            background-color: white;
        }
        .fadeIn:hover {
            opacity:1;
        }
        .fade {
            -webkit-transition: opacity 0.3s;
            transition: opacity 0.3s;
        }
        .switch {
            font-size: 30px;
            cursor: pointer;
            position: absolute;
        }
        input[type=date]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            display: none;
        }
        .indicator {
            font-weight: bold;
            border-radius: 50%;
            /*background-color: black;*/
            color: white;
            height: 15px;
            width: 15px;
            text-align: center;
        }
        .QuickbooksCircle {
            background-color: green;
        }
        .SalesforceCircle {
            background-color: blue;
        }
        .SalesforcePCircle {
            background-color: grey;
        }
        .BudgetCircle {
            background-color: #b1a657;
        }
        .CustomCircle {
            background-color: orangered;
        }
        .commentIcon {
            padding-left: 4px;
            font-size: 15px;
            margin-top: -3px;
        }
        .description {
            height: 35px;
        }
        .amount {
            text-align: right;
        }
        .modalBackdrop {
            position: fixed;
            width: 100%;
            height: 100%;
            background-color: white;
            opacity: 0.8;
            z-index: 1000000;
            top:0;
            left:0;
        }
        .newEntryFormHolder {
            position:fixed;
            width:100%;
            display: flex;
            justify-content: center;
            top: 170px;
            z-index: 1000001;
        }
        .newEntryForm {
            width: 360px;
            padding: 10px;
            background-color: white;
            border-radius: 4px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            min-height: 260px;
            z-index: 1000001;
            position: relative;
            font-size: 16px;
        }
        .entryFormTitle {
            width: 100%;
            display: flex;
            justify-content: center;
            font-size: 18px;
            font-weight: bold;
        }
        .entryGrid {
            display : grid;
            grid-template-columns: 30% 70%;
            margin-top:11px;
        }
        .recordButtons {
            width: 100%;
            display: grid;
            grid-template-columns: 50% 50%;
            color: white;
            font-size: 20px;
            position: absolute;
            bottom: 0;
            left: 0;
            cursor: pointer;
        }
        .recordButton {
            height: 40px;
            width: 100%;
            display: flex;
            justify-content: center;
            padding-top: 4px;
        }
        .recordButtonIcon {
            padding-top: 4px;
        }
        .save {
            background-color: #9f9d9d;
        }
        .cancel {
            background-color: #cecccc;
        }
        .save:hover {
            background-color: #2d7175;
        }
        .cancel:hover {
            background-color: #60c5c1;
        }
        .flowTypeIndicator {
            font-size: 83px;
            opacity: 0.2;
            position: absolute;
            bottom: -18px;
            width: 100vw;
        }

    </style>

    <div id="app">

        <div class="box controlHolder" >
            <div class="control">
                <!-- DATE SELECTOR -->
                <div class="dateHolder">

                    <template v-if="preset">
                        <div class="switch presetDate fade fadeOut" ><i class="fas fa-bars" v-on:click="preset = false;"></i></div>
                        <!--<div class="switch customDate fade fadeIn" ><i class="fas fa-calendar-alt" v-on:click="preset = false;"></i></div>-->
                    </template>
                    <template v-if="!preset">
                        <div class="switch customDate fade fadeOut" ><i class="fas fa-calendar-alt" v-on:click="preset = true;"></i></div>
                        <!--<div class="switch presetDate fade fadeIn" ><i class="fas fa-bars" v-on:click="preset = true;"></i></div>-->
                    </template>

                    <div style="margin-left: 34px;">
                        <template v-if="preset">
                            <select v-model="period" v-on:change="changeDate('preset')">
                                <option>CURRENT FY</option>
                                <option>PREVIOUS FY</option>
                                <option>NEXT FY</option>
                                <option>PAST &amp; NEXT 6 MONTHS</option>
                                <option>LAST 12 MONTHS</option>
                                <option>NEXT 12 MONTHS</option>
                                <option>CUSTOM DATES</option>
                            </select>
                        </template>
                        <template v-if="!preset">
                            <div style="display: flex;">
                                <input type="date" style="width: 140px;" v-model="startDate"/>
                                <input type="date" style="width: 140px;" v-model="endDate"/>
                            </div>
                        </template>

                    </div>

                    <!--<div style="padding-top: 8px" id="orOption">- OR -</div>-->
                    <!--<div class="switch" ><i v-bind:class="{ app.preset ? 'far fa-calendar-alt' : 'fas fa-bars'}"></i></div>-->

                    <!--<div class="customDates" onchange="app.checkGo()">-->
                            <!--<div style="padding-top: 8px;">FROM:</div>-->
                            <!--<div><input id="start" type="date" style="width: 160px;" min="2015-10-01" v-model="startDate"/></div>-->
                            <!--<div style="padding-top: 8px;">TO:</div>-->
                            <!--<div><input id="end" type="date" style="width: 160px;" min="2015-10-01" v-model="endDate"/></div>-->
                            <!--<span v-if="showGo">-->
                                <!--<div><input style="margin-top: 4px;" class="customButton" type="button" value="GO"/></div>-->
                            <!--</span>-->
                    <!--</div>-->
                </div>

                <!-- VIEWING OPTIONS -->
                <div>
                    <div  class="viewOptionHolder">
                        <div class="viewOption" v-on:click="app.setting = 'graph';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'graph'}">
                            <i class="fas fa-chart-bar"></i> GRAPHS </div>
                        <div class="viewOption" v-on:click="app.setting = 'report';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'report'}">
                            <i class="fas fa-list"></i> REPORT </div>
                        <template v-if="showChanges && preset">
                            <div class="viewOption" v-on:click="app.setting = 'changes';window.scrollTo(0,0);"
                                 v-bind:class="{ activeSetting : setting === 'changes'}">
                                <i class="fas fa-arrows-alt-v"></i> CHANGES </div>
                            <div class="viewOption" v-on:click="app.setting = 'history';window.scrollTo(0,0);"
                                 v-bind:class="{ activeSetting : setting === 'history'}">
                                <i class="fas fa-history"></i> HISTORY </div>
                            <div class="viewOption" v-on:click="app.setting = 'manage';window.scrollTo(0,0);"
                                 v-bind:class="{ activeSetting : setting === 'manage'}">
                                <i class="fas fa-cog"></i> MANAGE </div>
                        </template>
                        <div class="viewOption" v-on:click="app.setting = 'cashflow';window.scrollTo(0,0);"
                             v-bind:class="{ activeSetting : setting === 'cashflow'}">
                            <i class="fas fa-pound-sign"></i> CASH FLOW </div>
                    </div>
                </div>

                <!-- LOGO -->
                <div style="position:absolute;right:5px;"><apex:image url="{!$Resource.LiveGroupNewLogo}" height="30" /></div>
            </div>

            <template v-if="setting === 'report'">
                <div style="display: flex;justify-content: center;width:100%">
                    <div class="reportFilter">
                        <div class="reportFilterOption Closed left"
                             v-bind:style="{ opacity : !reportFilter['Closed Won'] ? '0.3' : ''}"
                             v-on:click="reportFilter['Closed Won'] = !reportFilter['Closed Won']">CLOSED WON</div>
                        <div class="reportFilterOption Costed"
                             v-bind:style="{ opacity : !reportFilter['Costed prospect'] ? '0.3' : ''}"
                             v-on:click="reportFilter['Costed prospect'] = !reportFilter['Costed prospect']">COSTED PROSPECT</div>
                        <div class="reportFilterOption Pipeline"
                             v-bind:style="{ opacity : !reportFilter['Pipeline prospect'] ? '0.3' : ''}"
                             v-on:click="reportFilter['Pipeline prospect'] = !reportFilter['Pipeline prospect']">PIPELINE PROSPECT</div>
                        <div class="reportFilterOption Repeat"
                             v-bind:style="{ opacity : !reportFilter['Repeat Prospect'] ? '0.3' : ''}"
                             v-on:click="reportFilter['Repeat Prospect'] = !reportFilter['Repeat Prospect']">REPEAT PROSPECT</div>
                    </div>
                </div>
            </template>

        </div>

        <span v-bind:style="{ display : setting !== 'graph' ? 'none' : ''}">

            <!--REVENUE GRAPHS-->
            <div class="box" >
                <div class="splitTwo">
                    <div class="title">REVENUE {{period}} </div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                            <div class="option target">BUDGET</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="revenueBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="revenueLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--GROSS PROFIT GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">GROSS PROFIT {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                            <div class="option opex">OPEX</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="profitBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="profitLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--OPEX GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">OPERATING COSTS {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <template v-if="splitOpex">
                                <div style="height: 100%;" v-on:click="splitOpex = false;">
                                    <div style="display: flex;height: 100%;">
                                        <div style="background-color:#522B2D;" class="option">PAYROLL</div>
                                        <div style="background-color:#764144;" class="option">IT</div>
                                        <div style="background-color:#D45057;" class="option">BUS DEV</div>
                                        <div style="background-color:#F85D65;" class="option">OTHER</div>
                                    </div>
                                </div>
                            </template>
                            <template v-if="!splitOpex">
                                <div class="option" v-on:click="splitOpex = true;"
                                     style="width: 160px;background-color:#b86267">ACTUAL &amp; FORECAST OPEX</div>
                            </template>
                            <div class="option target">BUDGETED OPEX</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="opexBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="opexLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--NET PROFIT GRAPHS-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">NET PROFIT {{period}}</div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed"
                                 v-on:click="toggle('confirmed')" v-bind:class="{dim : !confirmed}">CONFIRMED</div>
                            <div class="option weighted"
                                 v-on:click="toggle('weighted')" v-bind:class="{dim : !weighted}">WEIGHTED</div>
                            <div class="option pipeline"
                                 v-on:click="toggle('pipeline')" v-bind:class="{dim : !pipeline}">PIPELINE</div>
                        </div>
                    </div>
                </div>
                <div class="splitTwo">
                    <div class="boxLite">
                        <div id="netProfitBar" class="graph"></div>
                    </div>
                    <div class="boxLite">
                        <div id="netProfitLine" class="graph"></div>
                    </div>
                </div>
            </div>

            <!--TOTAL CONFIRMED FIGURES -->
            <div class="box">
                <div class="splitTwo">
                    <div class="title">TOTAL CONFIRMED FIGURES {{period}}</div>
                    <div class="optionsHolder"></div>
                </div>
                <div class="splitFour">
                    <div class="boxLite">
                        <div class="labelBlock">Revenue</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.totals.revenue < 0 ? 'red' : ''}">
                            {{'£' + Math.abs(graphData.totals.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Gross profit</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.totals.profit < 0 ? 'red' : ''}">
                            {{'£' + Math.abs(graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Operating cost</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.totals.opex < 0 ? 'red' : ''}" >
                            {{'£' + Math.abs(graphData.totals.opex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Net profit</div>
                        <div class="valueBlock" v-bind:style="{ color : graphData.totals.netProfit < 0 ? 'red' : ''}" >
                            {{'£' + Math.abs(graphData.totals.netProfit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                </div>
                <span v-if="showChanges">
                    <div class="splitFour">
                        <div class="boxLite">
                            <div class="labelBlock">Change last 7 days</div>
                            <div class="valueBlock" v-bind:class="graphData.priorTotals.TotalRevenue__c > 0 ? 'up' :
                                                                    graphData.priorTotals.TotalRevenue__c == 0 ? '' : 'down'">
                                <span><i v-bind:class="graphData.priorTotals.TotalRevenue__c ? 'fas fa-arrow-up' :
                                            graphData.priorTotals.TotalRevenue__c == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.priorTotals.TotalRevenue__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last 7 days</div>
                            <div class="valueBlock" v-bind:class="graphData.priorTotals.TotalGrossProfit__c > 0 ? 'up' :
                                                                    graphData.priorTotals.TotalGrossProfit__c == 0 ? '' : 'down'">
                                <span><i v-bind:class="graphData.priorTotals.TotalGrossProfit__c > 0 ? 'fas fa-arrow-up' :
                                            graphData.priorTotals.TotalGrossProfit__c == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.priorTotals.TotalGrossProfit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last 7 days</div>
                            <div class="valueBlock" v-bind:class="graphData.priorTotals.TotalOpex__c > 0 ? 'down' :
                                                                    graphData.priorTotals.TotalOpex__c == 0 ? '' : 'up'">
                                <span><i v-bind:class="graphData.priorTotals.TotalOpex__c > 0 ? 'fas fa-arrow-up' :
                                            graphData.priorTotals.TotalOpex__c == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.priorTotals.TotalOpex__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                        <div class="boxLite">
                            <div class="labelBlock">Change last 7 days</div>
                            <div class="valueBlock" v-bind:class="graphData.priorTotals.TotalNetProfit__c > 0 ? 'up' :
                                                                    graphData.priorTotals.TotalNetProfit__c == 0 ? '' : 'down'">
                                <span><i v-bind:class="graphData.priorTotals.TotalNetProfit__c > 0 ? 'fas fa-arrow-up' :
                                            graphData.priorTotals.TotalNetProfit__c == 0 ? 'fas fa-minus' : 'fas fa-arrow-down'"></i></span>
                                <span>{{'£' + Math.abs(graphData.priorTotals.TotalNetProfit__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</span>
                            </div>
                        </div>
                    </div>
                </span>
            </div>

        </span>

        <span v-bind:style="{ display : setting !== 'report' ? 'none' : ''}">
            <div class="box" style="padding: 7px;">
                <div class="colDivider reportCols">
                    <div>AM/PM</div>
                    <div>JOB</div>
                    <div>NAME</div>
                    <div>ACCOUNT</div>
                    <div>START</div>
                    <div>END</div>
                    <div>REVENUE</div>
                    <div>COS</div>
                    <div>PROFIT</div>
                    <div>MARGIN</div>
                    <div>STATUS</div>
                </div>

                <template v-for="month,monthIndex in graphData['REPORTDATA']">
                    <div>
                        <div class="headerDivider reportHeader reportMonth">
                            <div>{{ monthIndex.toUpperCase() }}</div>
                            <div>{{ '£' + Math.abs(graphData.revenue[monthIndex][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{ '£' + Math.abs(graphData.revenue[monthIndex][0] - graphData.profit[monthIndex][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{ '£' + Math.abs(graphData.profit[monthIndex][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{ (Math.abs(graphData.profit[monthIndex][0] / (graphData.revenue[monthIndex][0] > 0 ?
                                    graphData.revenue[monthIndex][0] : 1) * 100).toFixed(0)) + '%'}}</div>
                            <div></div>
                        </div>
                        <template v-for="stage,stageIndex in graphData['REPORTDATA'][monthIndex]">
                            <template v-if="stage.length > 0 && reportFilter[stageIndex]">
                                <!--<div class="headerDivider stage" v-bind:class="stageIndex === 'Closed Won' ? 'closed' : 'open'">-->
                                <div class="headerDivider stage reportStage" v-bind:class="stageIndex.split(' ')[0]">
                                    <div> {{ stageIndex.toUpperCase() }}</div>
                                    <div>{{ '£' + Math.abs(graphData['REPORTVALUES'][monthIndex][stageIndex + ' Revenue']).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ '£' + Math.abs(graphData.revenue[monthIndex][0] - graphData.profit[monthIndex][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ '£' + Math.abs(graphData.profit[monthIndex][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                    <div>{{ (Math.abs(graphData.profit[monthIndex][0] / graphData.revenue[monthIndex][0] * 100).toFixed(0)) + '%'}}</div>
                                    <div></div>
                                </div>
                                <template v-for="record in stage">
                                    <template v-if="record.StageName">
                                        <div class="colDivider reportRecord" v-bind:class="record.IsClosed ? 'closed' : 'open'"
                                             v-on:click="activeReportRow = activeReportRow !== record.Id ? record.Id : ''"
                                             v-bind:style="{fontWeight: activeReportRow === record.Id ? 'bold' : ''}">
                                            <div>{{ record.Owner.FirstName.substring(0,1) + record.Owner.LastName.substring(0,1) +
                                                    (record.Project_Manager__c ? '/' + record.Project_Manager__r.FirstName.substring(0,1)
                                                    + record.Project_Manager__r.LastName.substring(0,1) : '') }}</div>
                                            <div>{{ record.Filtered_Job_Number__c }}</div>
                                            <div>{{ record.Name }}</div>
                                            <div>{{ record.Account.Name }}</div>
                                            <div>{{ new Date(record.Event_start__c).toDateString().substring(0,10) }}</div>
                                            <div>{{ new Date(record.Event_end__c).toDateString().substring(0,10) }}</div>
                                            <div>{{ '£' + Math.abs(record.Amount_Calder__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}</div>
                                            <div>{{ '£' + Math.abs(record.Filtered_Cost_of_Sale__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}</div>
                                            <div>{{ '£' + Math.abs(record.Gross_profit_2__c).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,") }}</div>
                                            <div>{{ record.Gross_Margin__c }}%</div>
                                            <div style="position: relative;">
                                                <span>{{ record.IsClosed ? record.RecStatus__c : record.Probability + '% probability'}}</span>
                                                <span v-if="record.Adjustments__r" class="adjustmentCount">
                                                    <!--<i class="fas fa-level-down-alt"></i>-->
                                                    {{record.Adjustments__r.length}}
                                                </span>
                                            </div>

                                        </div>

                                        <template v-if="activeReportRow === record.Id">
                                            <div class="rowContent">SOME CONTENT</div>
                                        </template>


                                        <template v-if="record.Adjustments__r">
                                        </template>

                                    </template>
                                </template>
                            </template>
                        </template>
                    <br/>
                    </div>
                </template>

                <div class="headerDivider reportCols reportTotals">
                    <div>{{ period }} TOTAL</div>
                    <div></div><div></div><div></div><div></div><div></div>
                    <div>{{ }}</div>
                    <div>{{ }}</div>
                    <div>{{ }}</div>
                    <div>{{ }}</div>
                    <div></div>
                </div>

            </div>


        </span>

        <span v-bind:style="{ display : setting !== 'manage' ? 'none' : ''}">
            <div class="box">

                <div class="boxLite">
                    <img src="{!$Resource.SalesforceCF}" height="40px"/>

                    <div class="yearGrid">
                        <div>
                            <div style="padding: 2px;">&nbsp;</div>
                            <div>REVENUE</div>
                            <div>PROFIT</div>
                            <div>COST OF SALE</div>
                        </div>
                        <template v-for="month,index in graphData['months']">
                            <div class="monthTile">
                                <div style="font-weight: bold;">{{month}}</div>
                                <div>{{'£' + Math.abs(graphData['revenue'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                <div>{{'£' + Math.abs(graphData['profit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                <div>{{'£' + Math.abs(graphData['revenue'][month][0] - graphData['profit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            </div>
                        </template>
                        <div class="monthTile">
                            <div style="font-weight: bold;">TOTAL</div>
                            <div>{{'£' + Math.abs(graphData.totals.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{'£' + Math.abs(graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{'£' + Math.abs(graphData.totals.revenue - graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                        </div>
                    </div>
                </div>
                <div class="boxLite">
                    <img src="{!$Resource.QuickbooksCF}" height="40px" />

                    <div class="yearGrid">
                        <div>
                            <div style="padding: 2px;">&nbsp;</div>
                            <div>REVENUE</div>
                            <div>PROFIT</div>
                            <div>COST OF SALE</div>
                            <div>OPERATING COSTS</div>
                        </div>
                        <template v-for="month,index in graphData['months']">
                            <div class="monthTile">
                                <div style="font-weight: bold;">{{month}}</div>
                                <div>{{'£' + Math.abs(graphData['qbRevenue'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                <div>{{'£' + Math.abs(graphData['qbProfit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                <div>{{'£' + Math.abs(graphData['qbRevenue'][month][0] - graphData['qbProfit'][month][0]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                <div>{{'£' + Math.abs(graphData['opex'][month][1]).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            </div>
                        </template>
                        <div class="monthTile">
                            <div style="font-weight: bold;">TOTAL</div>
                            <div>{{'£' + Math.abs(graphData.totals.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{'£' + Math.abs(graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{'£' + Math.abs(graphData.totals.revenue - graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                            <div>{{'£' + Math.abs(graphData.totals.opex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                        </div>
                    </div>
                </div>
                <div class="boxLite">
                    <img src="{!$Resource.BudgetCF}" height="30px"/>
                    <span style="font-size: 20px;margin-left: 10px;">Active budget: </span>
                </div>

            </div>

        </span>


        <span v-bind:style="{ display : setting !== 'cashflow' ? 'none' : ''}">
            <!--CASH FLOW AND MANAGER-->
            <div class="box">
                <div class="splitTwo">
                    <div class="title" id="flowManagerTitle" >
                        <span>CASH FLOW </span>
                        <span class="viewOptionHolder" style="margin-left: 5px;">
                            <span style="padding: 0;font-size: 18px;padding-left: 6px;padding-right: 6px;" class="viewOption" v-bind:style="{ opacity : showManager ? '0.5' : '1'}"
                                  v-on:click="showManagerSection(false)">{{ period}}</span>
                            <span style="padding: 0;font-size: 18px;padding-left: 6px;padding-right: 6px;" class="viewOption"  v-bind:style="{ opacity : showManager ? '1' : '0.5'}"
                                  v-on:click="showManagerSection(true)">NEXT 3 MONTHS</span>
                        </span>
                    </div>
                    <div class="optionsHolder">
                        <div class="options">
                            <div class="option confirmed">CONFIRMED</div>
                            <div class="option pipeline">WEIGHTED PIPELINE</div>
                            <div class="option target">BUDGET</div>
                        </div>
                    </div>
                </div>
                <div class="boxLite">
                    <div id="cashFlowLine" class="graph"></div>
                </div>



                <template v-if="showManager">

                    <span v-if="manageAllowed">

                        <div class="boxLite" style="display: flex;width: 99%;">
                            <template v-if="manageAllowed && showManager">
                                <!--<i class="fas manageFlowIcon" v-bind:class=" managing ? 'fa-window-close' : 'fa-edit'"-->
                                   <!--v-on:click="toggleManaging()"></i>-->
                                <div class="flowOptionButton" v-on:click="toggleManaging()"> {{ managing ? 'CLOSE' : 'EDIT' }}</div>
                            </template>
                            <template v-if="managing">
                                <!--<i class="fa fa-refresh manageFlowIcon" v-on:click="toggleManaging()"></i>-->
                                <!--<div class="flowOptionButton"  v-on:click="toggleManaging()">CLOSE</div>-->
                                <div class="flowOptionButton" v-on:click="rerunFlow(false)">RERUN FLOW</div>
                                <div class="flowOptionButton" v-on:click="rerunFlow(true)">RESET AGEING</div>
                                <div class="flowOptionButton" v-on:click="addingEntry = true;">ADD ENTRY</div>
                            </template>

                        </div>
                    </span>

                    <div class="boxLite" v-bind:class="managing ? 'scroll' : ''">

                        <div v-bind:class=" responsePending || dragId ? 'dragPrevent' : '' " v-on:click="abortEdit()"></div>
                        <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="week" style="">
                            <div class="column ">WEEK COMMENCING</div>
                            <template v-for="week in cashflowData['WEEK COMMENCING']">
                                <div class="week flowDate" v-bind:class="managing ? 'weekLarge' : 'weekSmall'">
                                    {{ new Date(week).toDateString().substring(0,10)}}
                                </div>
                            </template>
                        </div>
                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                            <div class="column">OPENING BALANCE</div>
                            <template v-for="balance in cashflowData['OPENING BALANCE']">
                                    <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                         v-bind:style=" balance < 0 ? 'color: red;' : ''">
                                         <!--v-bind:style=" balance < 0 ? 'color: red;' : '', responsePending ? 'opacity : 0' : 'opacity: 1' ">-->
                                        {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                    </div>
                            </template>
                        </div>

                        <template v-if="!managing">

                            <template v-for="value in Object.keys(cashflowData['IN ENTRIES'])">
                                <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'">

                                    <div class="column noSpill">{{value}}</div>
                                    <template v-for="week in Object.keys(cashflowData['IN ENTRIES'][value])">
                                        <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                             v-bind:style=" !cashflowData['IN ENTRIES'][value][week] ? 'color: white;' :
                                                            cashflowData['IN ENTRIES'][value][week] < 0 ? 'color: red;' : '' ">
                                                <div>{{'£' + cashflowData['IN ENTRIES'][value][week].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                        </div>
                                    </template>
                                </div>
                            </template>
                        </template>

                        <!--MONEY IN-->
                        <template v-if="managing">
                                <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'">
                                    <div class="column largeCol" >
                                        <div class="flowTypeIndicator">REVENUE</div>
                                        <div class="gapConcealer"></div>
                                    </div>
                                    <template v-for="week in Object.keys(cashflowData['WEEK COMMENCING'])">
                                        <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                             v-bind:id="'IN' + week">
                                            <div class="sortable in" v-bind:data-week="week" v-bind:data-type="'IN'">
                                                <template v-for="record,recordIndex in cashflowData['RECORDS']">
                                                    <template v-if="record.WeekId__c == 'IN' + week">
                                                        <div class="record" v-bind:id="record.QuickbooksId__c"
                                                             v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                             v-bind:data-id="record.Id" v-bind:data-week="week"
                                                             v-bind:data-amount="record.Amount__c"
                                                             v-bind:data-type="'IN'" v-bind:data-description="record.Description__c"
                                                             v-bind:data-index="recordIndex"
                                                             v-bind:class="record.Source__c"
                                                             v-bind:style="dragId === record.Id ? 'z-index: 2000;' : ''">

                                                            <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                            <div class="description">{{record.Description__c}}</div>
                                                            <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                            <div class="amount" >{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                                                            <div style="padding: 3px;">
                                                                <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                    <div style="width:100%;">
                                                                        <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                            <div class="recordOptionButton">
                                                                                <i class="fas fa-pound-sign"></i>
                                                                                <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                       type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                            </div>
                                                                            <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                                <i class="fas fa-trash"></i>
                                                                                <div>DELETE ENTRY</div>
                                                                            </div>
                                                                        </template>
                                                                        <div class="recordOptionButton">
                                                                            <i class="far fa-comment"></i>
                                                                            <textarea v-model="record.Comment__c"
                                                                                      placeholder="Add comments here"
                                                                                      v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </template>
                                                </template>
                                            </div>
                                            <div style="height:33px;"></div>

                                        <template v-if="dragging === 'in'">
                                            <div class="dropZone" v-bind:id="'in' + index" v-bind:data-type="'in'" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>
                                        </div>
                                    </template>
                                </div>
                        </template>

                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="inflowsTotal">
                            <div class="column">TOTAL INFLOWS</div>
                            <template v-for="balance in cashflowData['TOTAL INFLOW']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '', responsePending ? 'opacity : 0' : 'opacity: 1' ">
                                    {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>

                        <!-- PAYMENT RUN -->
                        <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'" >
                            <template v-if="!managing"><div class="column noSpill">Payment run</div></template>
                            <template v-if="managing">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">PAYMENT RUN</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>

                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payment run']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <template v-if="managing">

                                        <div class="sortable paymentRun" v-bind:data-week="index" v-bind:data-type="'paymentRun'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Payment run' + index">
                                                    <div class="record" v-bind:id="record.QuickbooksId__c"
                                                         v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index"
                                                         v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'paymentRun'" v-bind:data-description="record.Description__c"
                                                         v-bind:data-index="recordIndex"
                                                         v-bind:class="record.Source__c"
                                                         v-bind:style="dragId === record.Id ? 'z-index: 2000;' : ''">

                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">{{record.Description__c}}</div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                   type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>

                                                                    <template v-if="record.Source__c === 'Quickbooks'">
                                                                        <div class="recordOptionButton" v-on:click="getAttachmentLink(record.QuickbooksId__c)">
                                                                            <i class="fas fa-file-pdf "></i>
                                                                            <div>VIEW BILL</div>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="toggleFreelancer()">
                                                                                <i class="fas fa-user"></i>
                                                                                <div>CONVERT TO FREELANCER</div>
                                                                            </div>
                                                                        <div class="recordOptionButton"  v-on:blur="converting = false" style="display: block;">
                                                                            <div style="display: grid;grid-template-columns: 10% 90%;" v-on:click="converting = !converting">
                                                                                <i class="fas fa-money-check-alt"></i>
                                                                                <div>CONVERT TO DIRECT DEBIT</div>
                                                                            </div>
                                                                            <div v-if="converting">
                                                                                <div class="ddSetup">
                                                                                    <div>Frequency:</div>
                                                                                    <div>
                                                                                        <select v-model="ddConfig.frequency">
                                                                                            <option selected="true" ></option>
                                                                                            <option value="weekly">Weekly</option>
                                                                                            <option value="monthly">Monthly</option>
                                                                                            <option value="quarterly">Quarterly</option>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                                <template v-if="ddConfig.frequency === 'weekly'">
                                                                                    <div class="ddSetup">
                                                                                        <div>Starting month:</div>
                                                                                        <div>
                                                                                            <select v-model="ddConfig.weekDay">
                                                                                                <option selected="true"></option>
                                                                                                <template v-for="day in weekDays">
                                                                                                    <option>{{day}}</option>
                                                                                                </template>
                                                                                            </select>
                                                                                        </div>
                                                                                    </div>
                                                                                </template>
                                                                                <template v-if="ddConfig.frequency === 'monthly'">
                                                                                    <div class="ddSetup">
                                                                                        <div>Day:</div>
                                                                                        <div>
                                                                                            <select v-model="ddConfig.day">
                                                                                                <option selected="true"></option>
                                                                                                <template v-for="number in 31">
                                                                                                    <option>{{number}}</option>
                                                                                                </template>
                                                                                            </select>
                                                                                        </div>
                                                                                    </div>
                                                                                </template>
                                                                                <template v-if="ddConfig.frequency === 'quarterly'">
                                                                                    <div class="ddSetup">
                                                                                        <div>Starting month:</div>
                                                                                        <div>
                                                                                            <select v-model="ddConfig.month">
                                                                                                <option selected="true"></option>
                                                                                                <template v-for="month in months">
                                                                                                    <option>{{month}}</option>
                                                                                                </template>
                                                                                            </select>
                                                                                        </div>
                                                                                    </div>
                                                                                </template>

                                                                                <div class="ddSetup">
                                                                                    <div>Amount:</div>
                                                                                    <div>
                                                                                        <input v-model="record.Amount__c" type="number" style="width:100%;padding-left: 4px; ;"/>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="ddSetup">
                                                                                    <div>Duration:</div>
                                                                                    <div>
                                                                                        <select>
                                                                                            <option value="indefinite" selected="true">Indefinite</option>
                                                                                            <option value="1month">1 month</option>
                                                                                            <option value="3months">3 months</option>
                                                                                            <option value="6months">6 months</option>
                                                                                            <option value="1year">1 year</option>
                                                                                        </select>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c" placeholder="Add comments here"
                                                                                  v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                    </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <template v-if="dragging === 'paymentRun'">
                                            <div class="dropZone" v-bind:id="'paymentRun' + index" v-bind:data-type="'paymentRun'" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>
                                    </template>
                                </div>
                            </template>
                        </div>

                        <!-- DIRECT DEBIT -->
                        <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'" >
                            <template v-if="!managing"><div class="column noSpill">Direct debit</div></template>
                            <template v-if="managing">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">DIRECT DEBIT</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>

                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Direct debit']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <template v-if="managing">

                                        <div class="sortable directDebit" v-bind:data-week="index" v-bind:data-type="'directDebit'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Direct debit' + index">
                                                    <div class="record"
                                                         v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index" v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'directDebit'" v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"
                                                         v-bind:class="record.Source__c">

                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">{{record.Description__c}}</div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>

                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                   type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c"
                                                                                  placeholder="Add comments here"
                                                                                  v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <template v-if="dragging === 'directDebit'">
                                            <div class="dropZone" v-bind:id="'directDebit' + index"
                                                 v-bind:data-type="'directDebit'" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>
                                    </template>
                                </div>
                            </template>
                        </div>

                        <!--PAYROLL-->
                        <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'" id="opening">
                            <template v-if="!managing"><div class="column noSpill">Payroll</div></template>
                            <template v-if="managing">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">PAYROLL</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payroll']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <template v-if="managing">
                                        <div class="sortable payroll" v-bind:data-week="index" v-bind:data-type="'payroll'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Payroll' + index">
                                                    <div class="record"
                                                         v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index" v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'payroll'" v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"
                                                         v-bind:class="record.Source__c">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">{{record.Description__c}}</div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                   type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c"
                                                                                  placeholder="Add comments here"
                                                                                  v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <template v-if="dragging === 'payroll'">
                                            <div class="dropZone" v-bind:id="'payroll' + index"
                                                 v-bind:data-type="'payroll'" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>

                                    </template>
                                </div>
                            </template>
                        </div>

                        <!--FREELANCERS-->
                        <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'" id="opening">
                            <template v-if="!managing"><div class="column noSpill">Freelancers</div></template>
                            <template v-if="managing">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">FREELANCERS</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Freelancers']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <template v-if="managing">
                                        <div class="sortable freelancers" v-bind:data-week="index" v-bind:data-type="'freelancers'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'Freelancers' + index">
                                                    <div class="record"
                                                         v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index" v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'payroll'" v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"
                                                         v-bind:class="record.Source__c">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">{{record.Description__c}}</div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                   type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <template v-if="record.Source__c === 'Quickbooks'">
                                                                        <div class="recordOptionButton" v-on:click="getAttachmentLink(record.QuickbooksId__c)">
                                                                            <i class="fas fa-file-pdf "></i>
                                                                            <div>VIEW BILL</div>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="toggleFreelancer()">
                                                                            <i class="fas fa-undo"></i>
                                                                            <div>UNALLOCATE FREELANCER</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c"
                                                                                  placeholder="Add comments here"
                                                                                  v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <template v-if="dragging === 'freelancers'">
                                            <div class="dropZone" v-bind:id="'freelancers' + index"
                                                 v-bind:data-type="'freelancers'" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>
                                    </template>
                                </div>
                            </template>
                        </div>

                        <!--MANAGEMENT FEES-->
                        <!--<div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'">-->
                            <!--<template v-if="!managing"><div class="column noSpill">Management Fees</div></template>-->
                            <!--<template v-if="managing">-->
                                <!--<div class="column largeCol" >-->
                                    <!--<div style="font-size: 25px;padding: 4px;height: 13px;">MANAGEMENT</div>-->
                                    <!--<div style="font-size: 82px;padding-left: 0px;">FEES</div>-->
                                    <!--<div class="gapConcealer"></div>-->
                                <!--</div>-->
                            <!--</template>-->
                            <!--<template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Management Fees']">-->
                                <!--<div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"-->
                                     <!--v-bind:style=" !balance ? 'color: white;' : '' ">-->
                                    <!--<template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>-->
                                    <!--<template v-if="managing">-->
                                        <!--<div class="sortable managementFees" v-bind:data-week="index" v-bind:data-type="'managementFees'">-->
                                            <!--<template v-for="record, recordIndex in cashflowData['RECORDS']">-->
                                                <!--<template v-if="record.WeekId__c == 'Management Fees' + index">-->
                                                    <!--<div class="record"-->
                                                         <!--v-bind:data-id="record.Id" v-bind:data-week="index" v-bind:data-amount="record.Amount__c"-->
                                                         <!--v-bind:data-type="'payroll'" v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"-->
                                                         <!--v-bind:class="record.Source__c">-->
                                                        <!--<div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>-->
                                                        <!--<div class="description">{{record.Description__c}}</div>-->
                                                        <!--<div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>-->
                                                        <!--<div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>-->
                                                    <!--</div>-->
                                                <!--</template>-->
                                            <!--</template>-->
                                        <!--</div>-->
                                        <!--<div style="height:33px;"></div>-->
                                        <!--<template v-if="dragging === 'managementFees'">-->
                                            <!--<div class="dropZone" v-bind:id="'managementFees' + index"-->
                                                 <!--v-bind:data-type="'managementFees'" v-bind:data-week="index">-->
                                                <!--<div class="dropText">-->
                                                    <!--<div style="font-size: 15px;">WEEK COMMENCING {{index}}</div>-->
                                                    <!--<div style="font-size: 35px; ">{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>-->
                                                <!--</div>-->
                                            <!--</div>-->
                                        <!--</template>-->

                                    <!--</template>-->
                                <!--</div>-->
                            <!--</template>-->
                        <!--</div>-->


                        <!--VAT-->
                        <div class="row" v-bind:class="managing ? 'rowGrow recordRow' : 'rowTight'">
                            <template v-if="!managing"><div class="column noSpill">VAT {{dragging}}</div></template>
                            <template v-if="managing">
                                <div class="column largeCol" >
                                    <div class="flowTypeIndicator">VAT</div>
                                    <div class="gapConcealer"></div>
                                </div>
                            </template>
                            <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['VAT']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !balance ? 'color: white;' : '' ">
                                    <template v-if="!managing">{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</template>
                                    <template v-if="managing">
                                        <div class="sortable vat" v-bind:data-week="index" v-bind:data-type="'VAT'">
                                            <template v-for="record, recordIndex in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'VAT' + index">
                                                    <div class="record"
                                                         v-on:dblclick="dragId = dragId === '' ? record.Id : ''"
                                                         v-bind:data-id="record.Id" v-bind:data-week="index" v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'VAT'" v-bind:data-description="record.Description__c" v-bind:data-index="recordIndex"
                                                         v-bind:class="record.Source__c">
                                                        <div v-bind:class="record.Source__c + 'Circle'" class="indicator">{{record.Source__c.substring(0,1)}}</div>
                                                        <div class="description">{{record.Description__c}}</div>
                                                        <div class="commentIcon"><i v-bind:class="record.Comment__c ? 'far fa-comment' : ''"></i></div>
                                                        <div class="amount">{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                        <div style="padding: 3px;">
                                                            <div v-bind:class="dragId === record.Id ? 'recordDetails' : 'recordDetailsHidden'">
                                                                <div style="width:100%;">
                                                                    <template v-if="record.Source__c === 'Custom' || record.Source__c === 'Budget'">
                                                                        <div class="recordOptionButton">
                                                                            <i class="fas fa-pound-sign"></i>
                                                                            <input v-model.number="record.Amount__c" v-bind:precision="2"
                                                                                   type="number" v-on:keyup.enter="updateAmount(record.Amount__c)"/>
                                                                        </div>
                                                                        <div class="recordOptionButton" v-on:click="deleteEntry(recordIndex)">
                                                                            <i class="fas fa-trash"></i>
                                                                            <div>DELETE ENTRY</div>
                                                                        </div>
                                                                    </template>
                                                                    <div class="recordOptionButton">
                                                                        <i class="far fa-comment"></i>
                                                                        <textarea v-model="record.Comment__c"
                                                                                  placeholder="Add comments here"
                                                                                  v-on:blur="updateComment(record.Comment__c)"></textarea>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="height:33px;"></div>
                                        <template v-if="dragging === 'VAT'">
                                            <div class="dropZone" v-bind:id="'VAT' + index"
                                                 v-bind:data-type="VAT" v-bind:data-week="index">
                                                <div class="dropText">
                                                    <div class="dropTextDate" >{{ new Date(cashflowData['WEEK COMMENCING'][index]).toDateString().substring(0,10)}}</div>
                                                    <div class="dropTextNumber" >{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                                </div>
                                            </div>
                                        </template>
                                    </template>
                                </div>
                            </template>
                        </div>

                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="outflowsTotal">
                            <div class="column">TOTAL OUTFLOWS</div>
                            <template v-for="balance in cashflowData['TOTAL OUTFLOW']">
                                <div class="week" v-bind:class="[managing ? 'weekLarge' : 'weekSmall']"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>
                        <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="closing">
                            <div class="column">CLOSING BALANCE</div>
                            <template v-for="balance in cashflowData['CLOSING BALANCE']">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </div>
                            </template>
                        </div>
                    </div>
                </template>
            </div>

        </span>

        <template v-if="addingEntry">
            <div class="modalBackdrop" v-on:click="addingEntry = false;"></div>
            <div class="newEntryFormHolder">
                <div class="newEntryForm">
                    <div class="entryFormTitle">CUSTOM ENTRY FORM</div>
                    <div class="entryGrid">
                        <div>Type: </div>
                        <select v-model="newEntryConfig.type">
                            <template v-for="type in types">
                                <option >{{type}}</option>
                            </template>
                        </select>
                    </div>
                    <div class="entryGrid">
                        <div>Description:</div>
                        <input type="text" v-model="newEntryConfig.description"/>
                    </div>
                    <div class="entryGrid">
                        <div>Amount:</div>
                        <input type="number" v-model="newEntryConfig.amount" v-bind:step="0.01" />
                    </div>
                    <div class="entryGrid">
                        <div>Date:</div>
                        <input type="date" v-model="newEntryConfig.date"/>
                    </div>
                    <template v-if="newEntryConfig.type && newEntryConfig.description && newEntryConfig.amount && newEntryConfig.date">
                        <div class="recordButtons">
                            <div v-on:click="clearCustomEntry()" class="recordButton cancel">
                                <i class="recordButtonIcon fas fa-times-circle"></i> &nbsp; CANCEL
                            </div>
                            <div v-on:click="addCustomEntry()" class="recordButton save">
                                <i class="recordButtonIcon fas fa-check-circle"></i> &nbsp; SAVE
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </template>

        <iframe width="560" height="315" v-bind:src="attachmentLink" frameborder="0" ></iframe>

        <br/>
        <br/>

        <!--<div class="spinner">-->
            <!--<div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>-->
        <!--</div>-->
    </div>
    <script>

        var app = new Vue({
            el: '#app',
            data: {
                period : 'CURRENT FY',
                today : '',
                yearText : '',
                startDate : '',
                endDate : '',
                reportData : '',
                graphData : '',
                cashGraphData : '',
                cashflowData : '',
                setting : 'graph',
                showGo : false,
                showReport : false,
                showChanges : true,
                preset : true,
                manageAllowed : true,
                showManager : false,
                managing : false,
                manageIn : false,
                manageOut : false,
                sortable : false,
                dragging : '',
                dragId : '',
                confirmed : true,
                weighted : true,
                pipeline : true,
                splitOpex : false,
                responsePending : false,
                commenting : false,
                converting : false,
                addingEntry : false,
                newEntryConfig : {
                    description: '',
                    amount : 0,
                    date : '',
                    type : ''
                },
                ddConfig : {
                    frequency : '',
                    weekDay : '',
                    day : '',
                    month : '',
                    amount : '',
                    duration : ''
                },
                weekDays : ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'],
                months : ['January','February','March','April','May','June','July','August','September','October','November','December'],
                types : ['Revenue','Payment run','Freelancer','Direct debit','Management fee','VAT'],
                attachmentLink : '',
                activeReportRow : '',
                reportFilter : {
                    'Closed Won' : true,
                    'Costed prospect' : true,
                    'Pipeline prospect' : true,
                    'Repeat Prospect' : true
                },
                brand : {
                    main : '#262d3f',
                    second : '#2d7175',
                    third : '#60c5c1',
                    payroll : '#5e3134',
                    iT : '#7b4447',
                    busDev : '#D45057',
                    other : '#F85D65',
                    opex : '#b86267',
                    profit : '#b86267',
                    budget : '#575858',
                    revenue : 'green',
                    netProfit : 'white',
                    cashFlow : 'darkGreen'
                }
            },
            computed: {
                now: function () {
                    return Date.now()
                }
            },
            methods: {
                toggleManaging : function(){
                    app.managing = !app.managing;
                    if (app.managing){
                        this.$nextTick(function() {
                            this.makeDraggable();
                        });
                    }
                },
                changeDate : function(type){
                    if (type === 'preset') {
                        // app.period = val;

                        // console.log('value is ' + val + ' period is ' + app.period);

                        if (app.period === 'CURRENT FY'){
                            app.startDate   = new Date(app.yearText, 3, 1);
                            app.endDate     = new Date(app.yearText + 1, 2, 31);
                            app.showChanges = true;
                        } else if (app.period === 'NEXT FY'){
                            app.startDate   = new Date(app.yearText + 1, 3, 1);
                            app.endDate     = new Date(app.yearText + 2, 2, 31);
                            app.showChanges = true;
                        } else if (app.period === 'PREVIOUS FY'){
                            app.startDate   = new Date(app.yearText - 1, 3, 1);
                            app.endDate     = new Date(app.yearText, 2, 31);
                            app.showChanges = false;
                        } else if (app.period === 'PAST AND NEXT 6 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -6, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() +6, 0);
                            app.showChanges = false;

                            console.log('setting show changesto ' + app.showChanges);
                        } else if (app.period === 'LAST 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -12, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth(), 0);
                            app.showChanges = false;
                        } else if (app.period === 'NEXT 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth(), 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() + 11, 0);
                            app.showChanges = false;
                        }
                    } else if (type === 'datePicker'){
                        app.showChanges = false;
                        app.startDate   = new Date(document.getElementById('start').value);
                        app.endDate     = new Date(document.getElementById('end').value);
                    }
                    app.loadData();
                },

                checkGo : function(){
                    app.showGo = (typeof app.startDate === 'string' && typeof app.endDate === 'string' &&
                                    Date.parse(app.startDate) && Date.parse(app.endDate) &&
                                    Date.parse(app.startDate) <= Date.parse(app.endDate));
                },
                showManagerSection : function(show){
                    if (show && !app.showManager){
                        app.showManager = true;
                        app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                    } else if (!show && app.showManager){
                        app.showManager = false;
                        app.drawLine('cashFlow', app.cashGraphData);
                    }
                },
                toggle : function(stage, type){
                    app[stage] = !app[stage];
                    app.drawData(false);
                },
                loadData : function(){

                    // step 1: get all performance figures
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getOppRecords}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            app.graphData = result;
                            console.log(result);
                            app.drawData(true);
                        });

                    // step 2: get all cashflow figures
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getBalances}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            app.cashGraphData = result;
                            app.drawLine('cashFlow', app.cashGraphData);
                        });

                    // step 2: get all cashflow data
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getCashflowData}',true,
                        function (result) {
                            app.cashflowData = result;
                            // app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                            console.log(result);
                        });

                },
                drawData : function(includeOpex){
                    app.drawBar('revenue',app.graphData['revenue']);
                    app.drawLine('revenue', app.graphData['revenue']);
                    app.drawBar('profit', app.graphData['profit']);
                    app.drawLine('profit', app.graphData['profit']);
                    if (includeOpex){
                        app.drawBar('opex', app.graphData['opex']);
                        app.drawLine('opex', app.graphData['opex']);
                    }
                    app.drawBar('netProfit', app.graphData['netProfit']);
                    app.drawLine('netProfit', app.graphData['netProfit']);
                },
                drawBar : function(type, graphData) {

                    google.charts.load('current', {
                        'packages': ['corechart', 'bar'], 'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            if (type === 'opex'){
                                if (app.splitOpex){
                                    chartData.addColumn('string', 'Amount');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    chartData.addColumn('number', '');
                                    Object.keys(graphData).forEach(function (date) {
                                        chartData.addRow([date, graphData[date][6],
                                            graphData[date][7], graphData[date][8],graphData[date][9]]);
                                    });
                                } else {
                                    chartData.addColumn('string', 'Amount');
                                    chartData.addColumn('number', '');
                                    Object.keys(graphData).forEach(function (date) {
                                        chartData.addRow([date, graphData[date][2]]);
                                    });
                                }
                            } else {
                                chartData.addColumn('string', 'Amount');
                                chartData.addColumn('number', 'Confirmed');
                                chartData.addColumn('number', 'Weighted');
                                chartData.addColumn('number', 'Pipeline');
                                Object.keys(graphData).forEach(function (date) {
                                    var confirmed   = (app.confirmed) ? graphData[date][0] : null;
                                    var weighted    = (app.weighted) ? graphData[date][1] : null;
                                    var pipeline    = (app.pipeline) ? graphData[date][2] +
                                                      (!app.weighted ? graphData[date][1] : 0)
                                                      : null;
                                    chartData.addRow([date, confirmed, weighted, pipeline]);
                                });
                            }

                            var options = {
                                annotations: {
                                    stem: {
                                        color: "transparent"
                                    },
                                    textStyle: {
                                        color: 'black',
                                        fontSize: 12.5
                                    }
                                },
                                tooltip: "none",
                                format: '£#,###',
                                enableInteractivity: false,
                                series: {
                                    0: {
                                        color: (type === 'opex') ? app.brand.payroll : app.brand.main
                                    },
                                    1: {
                                        color: (type === 'opex') ? app.brand.iT : app.brand.second
                                    },
                                    2: {
                                        color: (type === 'opex') ? app.brand.busDev : app.brand.third
                                    },
                                    3: {
                                        color: (type === 'opex') ? app.brand.other : "transparent"
                                    },
                                    4 : {
                                        color: "transparent"
                                    }
                                },
                                isStacked: true
                            };

                            options = Object.assign(app.getOptions(), options);
                            var chart = new google.visualization.ColumnChart(document.getElementById(type + 'Bar'));
                            var formatter = new google.visualization.NumberFormat({prefix: '£'});

                            var view = new google.visualization.DataView(chartData);
                            if (type === 'opex'){
                                if (app.splitOpex){
                                    view.setColumns([0,1, 2, 3, 4,{
                                            calc: function () {return 0},
                                            label: "Total",
                                            type: "number"
                                        },
                                        {
                                            calc: function (dt, row) {
                                                return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3) + dt.getValue(row, 4)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                            },
                                            type: "string",
                                            role: "annotation",
                                            color: 'red'
                                        }
                                    ]);
                                    formatter.format(chartData, 1);
                                    formatter.format(chartData, 2);
                                    formatter.format(chartData, 3);

                                } else {
                                    view.setColumns([0,1, {
                                            calc: function () {return 0},
                                            label: "Total",
                                            type: "number"
                                        },
                                        {
                                            calc: function (dt, row) {
                                                return '£' + (dt.getValue(row, 1) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                            },
                                            type: "string",
                                            role: "annotation"
                                        }
                                    ]);
                                    formatter.format(chartData, 1);

                                }

                            } else {
                                view.setColumns([0,1,2, 3, {
                                    calc: function () {return 0;},
                                    label: "Total",
                                    type: "number"
                                },
                                    {
                                        calc: function (dt, row) {
                                            return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                        },
                                        type: "string",
                                        role: "annotation"
                                    }
                                ]);

                                formatter.format(chartData, 1);
                                formatter.format(chartData, 2);
                                formatter.format(chartData, 3);
                            }

                            chart.draw(view, options);
                        }
                    });
                },
                drawLine : function(type, graphData){
                    google.charts.load('current', {
                        packages: ['corechart', 'line'],'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            if (type === 'cashFlow'){
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Confirmed');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Budget');
                                chartData.addColumn('number', '');

                                Object.keys(graphData).forEach(function (element) {
                                    var elOne = graphData[element][3];
                                    var elTwo = graphData[element][2];
                                    var elThree = graphData[element][1];

                                    chartData.addRow([graphData[element][0], elOne, elTwo, elThree, null]);
                                });
                            } else if (type === 'opex'){
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Forecast');
                                chartData.addColumn('number', 'Budget');
                                chartData.addColumn('number', '');
                                chartData.addColumn('number', '');

                                var opexBudget   = 0;
                                var opexActual   = 0;

                                Object.keys(graphData).forEach(function (element) {
                                    opexBudget   += graphData[element][1];
                                    opexActual   += graphData[element][2];
                                    chartData.addRow([element, opexActual, opexBudget, null, null]);
                                });
                            } else {

                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Target');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Weighted');
                                chartData.addColumn('number', 'Confirmed');

                                var confirmed   = 0;
                                var weighted    = 0;
                                var pipeline    = 0;
                                var measure     = 0;

                                Object.keys(graphData).forEach(function (element) {

                                    confirmed   += graphData[element][0];
                                    weighted    += graphData[element][1] + graphData[element][0];
                                    pipeline    += graphData[element][2] + graphData[element][1] + graphData[element][0];
                                    measure     += graphData[element][3];

                                    var confirmedEntry  = app.confirmed? confirmed : null;
                                    var weightedEntry   = app.weighted? weighted : null;
                                    var pipelineEntry   = app.pipeline? pipeline : null;

                                    chartData.addRow([element, measure, pipelineEntry, weightedEntry, confirmedEntry]);
                                });
                            }

                            var options = {
                                lineWidth: 1,
                                // lineWidth: 2,
                                vAxis: {
                                    format: 'short',
                                    // viewWindow: {
                                    //     min: type === 'cashFlow' ? -200000 : null
                                    // }
                                },
                                // isStacked : true,
                                // areaOpacity : 0.8,
                                // areaOpacity : 1,
                                series: {
                                    0: {
                                        color: app.brand[type],//#556B2F',
                                        format: '£#,###',
                                        areaOpacity : 0.1
                                    },
                                    1: {
                                        color: (type === 'opex') ? app.brand.budget : app.brand.third,
                                        format: '£#,###'
                                    },
                                    2: {
                                        color: app.brand.second,
                                        format: '£#,###',
                                        areaOpacity : 0.4
                                    },
                                    3: {
                                        color: app.brand.main,
                                        format: '£#,###',
                                        areaOpacity : 0.6
                                    },
                                    4 : {
                                        color: (type === 'profit') ? app.brand.budget : app.brand.budget,
                                        format: '£#,###'
                                    }
                                }
                            };

                            options = Object.assign(app.getOptions(type), options);
                            // var chart = new google.visualization.LineChart(document.getElementById(type + 'Line'));
                            var chart = new google.visualization.AreaChart(document.getElementById(type + 'Line'));
                            var formatter = new google.visualization.NumberFormat({
                                prefix: '£'
                            });
                            formatter.format(chartData, 1);
                            formatter.format(chartData, 2);
                            formatter.format(chartData, 3);
                            formatter.format(chartData, 4);

                            chart.draw(chartData, options);
                        }
                    });
                },
                getOptions : function(type){
                    return {
                        width: (type === 'cashFlow') ? '93%' : '90%',
                        fontName: 'Salesforce Sans',
                        fontSize: 13,
                        height: '370px',
                        hAxis: {
                            format: 'MMM d',
                            height: '30px',
                            slantedText: true,
                            slantedTextAngle: 30
                        },
                        vAxis: {
                            format: 'short'
                        },
                        chartArea: {
                            width: (type === 'cashFlow') ? '93%' : '90%',
                            height: '80%',
                            right: 5,
                            top: 5
                        },
                        legend: {
                            position: 'none',
                            bold: true,
                            alignment: 'center',
                            fontSize: 8
                        },
                        animation: {
                            duration: 500,
                            easing: 'inAndOut',
                            // easing: 'out'
                            startup: true
                        }
                    }
                },
                makeDraggable : function() {

                    var categories = ['in','paymentRun','payroll','freelancers','creditCard','managementFees','directDebit', 'vat'];

                    // use jQuery sortable librabry method to make each strand of the cashflow sortable
                    categories.forEach(function(category){
                        var oldList, newList, item;
                        $('.' + category).sortable({
                            start: function(event, ui) {
                                item            = ui.item;
                                newList         = oldList = ui.item.parent().parent();
                                app.dragging    = category;
                            },
                            stop: function(event, ui) {
                                app.dragging    = '';
                            },
                            change: function(event, ui) {
                                if(ui.sender) newList = ui.placeholder.parent().parent();
                            },
                            connectWith: '.' + category
                        }).disableSelection();

                        $('.' + category).droppable({
                            drop: function( event, ui ) {
                                if (!app.responsePending){
                                    app.responsePending = true;

                                    var sourceRecord    = ui.helper.context.dataset;
                                    var targetWeekDiv   = event.target.dataset;
                                    var weekNumber      = parseInt(targetWeekDiv.week);
                                    var weekDate;

                                    if (weekNumber < 11){
                                        weekDate    = new Date(app.cashflowData['WEEK COMMENCING'][weekNumber + 1]);
                                        weekDate.setDate(weekDate.getDate() -1);
                                    } else {
                                        weekDate    = new Date(app.cashflowData['WEEK COMMENCING'][weekNumber]);
                                        weekDate.setDate(weekDate.getDate() + 6);
                                    }

                                    // step 2: get all cashflow figures
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.VueTestController.getUpdateFlowEntry}',
                                        sourceRecord.id,
                                        weekDate,
                                        function (result, event) {
                                            app.responsePending = false;
                                            if (event.status){
                                                Object.assign(app.cashflowData,result);
                                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                                                app.cashflowData['RECORDS'][sourceRecord.index].DayMonthYear__c
                                                    = weekDate.getDate() + ' ' + weekDate.toString().substring(4,7) + ' ' +
                                                    weekDate.toString().substring(11,16);
                                            } else {
                                                loadData();
                                            }
                                        });
                                }
                            }
                        });
                    });
                },
                rerunFlow : function(resetAgeing) {
                    app.responsePending = true;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.rerunFlow}', resetAgeing,
                        function (result, event) {
                            app.responsePending = false;
                            Object.assign(app.cashflowData,result);
                            app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                        });
                },
                deleteEntry : function(index){
                    app.responsePending = true;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.deleteEntry}',
                        app.dragId,
                        function (result, event) {
                            app.responsePending = false;
                            if (event.status){
                                Object.assign(app.cashflowData,result);
                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                                app.cashflowData['RECORDS'].splice(index,1);
                                app.dragId = '';
                            }
                        });
                },
                updateAmount : function(amount){
                    app.responsePending = true;
                    var id = app.dragId;
                    app.dragId = '';
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.updateAmount}',
                        id,
                        amount,
                        function (result, event) {
                            app.responsePending = false;
                            if (event.status){
                                Object.assign(app.cashflowData,result);
                                app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                            }
                        });
                },
                toggleFreelancer : function(){
                    app.responsePending = true;
                    var id = app.dragId;
                    app.dragId = '';
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.toggleFreelancer}',
                        id,
                        function (result, event) {
                            if (result){
                                app.rerunFlow(false);
                            } else {
                                app.responsePending = false;
                            }
                        });
                },
                updateComment : function(comment){
                    app.responsePending = true;
                    var id              = app.dragId;
                    app.dragId          = '';
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.updateComment}',
                        id, comment,
                        function (result, event) {
                            app.responsePending = false;
                        });
                },
                getAttachmentLink : function(billId){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getAttachmentLink}',
                        billId,
                        function (result, event) {
                            if (result.QueryResponse && result.QueryResponse.Attachable[0]){
                                var uriEncoded  = result.QueryResponse.Attachable[0].TempDownloadUri;
                                var uriDecoded  = encodeURI(uriEncoded);
                                app.attachmentLink = decodeURI(uriDecoded);
                            }
                        });
                },
                abortEdit : function(){
                    app.commenting          = false;
                    app.converting          = false;
                    app.addingEntry         = false;
                    app.dragId              = '';
                    app.ddConfig.frequency  = '';
                    app.ddConfig.weekDay    = '';
                    app.ddConfig.day        = '';
                    app.ddConfig.month      = '';
                },
                addCustomEntry : function(){

                    app.responsePending = true;
                    app.addingEntry     = false;

                    // send new entry confguration data to controller
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.addCustomEntry}',
                        app.newEntryConfig.type,
                        app.newEntryConfig.description,
                        app.newEntryConfig.amount,
                        app.newEntryConfig.date,
                        function (result) {

                            app.clearCustomEntry();
                            // app.graphData = result;
                            console.log(result);
                            // app.drawData(true);
                        });

                },
                clearCustomEntry : function() {
                    app.addingEntry                 = false;
                    app.newEntryConfig.type         = '';
                    app.newEntryConfig.description  = '';
                    app.newEntryConfig.amount       = 0;
                    app.newEntryConfig.date         = '';
                }
            },
            beforeMount() {

                // set default date range
                this.today       = new Date();
                this.yearText    = (this.today.getMonth() + 1 > 3) ? this.today.getFullYear() : this.today.getFullYear() -1;
                this.startDate   = new Date(this.yearText, 3, 1);
                this.endDate     = new Date(this.yearText + 1, 2, 31);

                this.loadData();
            }
        });

    </script>
    </html>
</apex:page>