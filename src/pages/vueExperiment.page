<!--
 - Created by Ronan Williams on 05/03/2019.
 -->

<apex:page id="vueExperiment" controller="VueTestController" lightningStylesheets="true">

    <html xmlns:v-bind="http://vue.org" xmlns:v-on="http://vue.org">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>

    <style>

        body {
            background-image: url("{!$Site.BaseUrl}/_slds/images/themes/lightning_blue/lightning_blue_background.png");
            background-size: 100%;
            background-repeat: no-repeat;
            background-position: top;
            background-color: #B0C4DF;
            background-attachment: fixed;
        }
        .box {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            padding: 10px;
            background-color: white;
            border: 0.5px solid grey;
            margin-bottom: 10px;
        }
        .control {
            position: sticky;
            top: 5px;
            z-index: 100;
            display: grid;
            grid-template-columns: 20% 5% 30% 35% 10%;

        }
        .dimmer {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
            top: 0;
            margin: auto;
            height: 100vh;
            width: 100vw;
            background-color: white;
            opacity: 0.75;
        }
        .boxLite {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            border-radius: 3px;
            padding: 5px;
            background-color: white;
            border: 0.5px solid lightgrey;
            margin:4px;
        }
        .labelBlock {
            width: 100%;
            text-align: center;
            font-size: 16px;
            /*font-weight: bolder;*/
        }
        .valueBlock {
            position: relative;
            text-align: center;
            justify-content: center;
            align-items: center;
            font-size: 28px;
            margin-bottom: 6px;
            /*font-weight: bold;*/
        }
        .splitTwo {
            display: grid;
            grid-template-columns: 50% 50%;
        }
        .splitFour {
            display: grid;
            grid-template-columns: 25% 25% 25% 25%;
        }
        .title {
            font-size: 18px;
        }
        .optionsHolder {
            position: relative;
            width: 100%;
            display: flex;
            justify-content: flex-end;
        }
        .options {
            display: flex;
            border-radius: 3px;
            overflow: hidden;
            width: auto;
            font-size: 11px;
            height: 22px;
        }
        .option {
            padding-top: 4px;
            width: 100px;
            color: white;
            text-align: center;
            cursor: pointer;
        }
        .optionLong {
            padding-top: 4px;
            width: 200px;
            color: white;
            text-align: center;
            cursor: pointer;
            font-size: 9px;
            position: relative;
        }
        .miniOptions {
            display: flex;
            font-size: 9px;

        }
        .miniOption {
            width: 50px;
        }


        /*.optionMini*/

        .inactive {
            opacity : 0.5;
        }


        /*.option:hover {*/
            /*font-size:15px;*/
        /*}*/
        .report {
            position: fixed;
            width: 90%;
            height: 90%;
            top: 5%;
            left:5%;
            background-color: white;
        }
        .graph {
            position: relative;
            height: 380px;
        }
        .confirmed {
            background-color: #262d3f;
        }
        .weighted {
            background-color: #2d7175;
        }
        .pipeline{
            background-color: #60c5c1;
        }
        .target {
            background-color: #575858;
        }
        .opex{
            /*background-color: #d43b8f;*/
            background-color: #b86267;
        }
        .budget {
            background-color: #575858;
        }
        .customButton{
            border-radius: 10px;
            cursor: pointer;
        }
        .customDates {
            display: flex;
        }
        .customDates > * {
            position: relative;
            display: flex;
            flex-direction: column;
            justify-content: center;
            height: 100%;
            padding-left: 6px;
            padding-right: 6px;
            vertical-align: middle;
        }


        .row {
            border-bottom: 0.5px solid lightgrey;
            min-height: 25px;
            position: relative;
            display: flex;

        }

        .rowTight {
            width: 100%;
        }

        .rowGrow {
            width: 3800px;
        }

        .column {
            margin: 1px;
            margin-right: 5px;
            /*border: 0.5px solid green;*/
            height: auto;
            min-height: 23px;
            width: 200px;
            padding-left: 5px;
            /*padding-top: 3px;*/
            position: sticky;
            left: 4px;
            background: white ;
            z-index: 10;
            box-shadow: 0 4px 8px 0 rgba(255,255,255, 0.1), 0 6px 20px 0 rgba(255,255,255, 0.1);

        }

        .week {
            margin: 1px;
            /*border: 0.5px solid blue;*/
            height: auto;
            min-height: 23px;
            text-align: right;
            padding-right: 5px;
            position: relative;
        }

        .weekSmall {
            width: calc((100% - 200px) / 12);
        }

        .weekLarge {
            width: 280px;
        }

        .scroll {
            overflow-x: scroll;
        }
        .bold {
            font-weight: bold;
        }
        .noSpill {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .switch {
            font-size: 30px;
            cursor: pointer;
            opacity: 0.5;
        }
        .switch:hover {
            opacity: 1;
        }

        .record {
            margin-top: 2px;
            width: 100%;
            /*background-color: #f0f2ef;*/
            border-radius: 3px;
            text-align: left;
            padding: 5px;
            border: 0.5px solid grey;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.05), 0 6px 20px 0 rgba(0, 0, 0, 0.05);
            cursor: pointer;
            display: grid;
            grid-template-columns: 70% 30%;
            position: relative;
            overflow: hidden;
            color: black;
            font-size:10px;

        }
        .flowDate{
            background-color: white;
            position: sticky;
            top: 2px;
        }

        .icon {
            position: absolute;
            right: -7px;
            bottom: -6px;
            opacity: 0.4;
        }
        .iconImg {
            width: 30px;
        }
        .sortable {
            height: 100%;
            position: relative;
            z-index: 2;
        }
        .largeCol {
            font-weight: bolder;
            color: grey;
        }
        .manageFlowIcon {
            opacity: 0.3;
            cursor: pointer;
            font-size: 24px;
            /*margin-top: -3px;*/
            margin-left: 5px;
        }
        .manageFlowIcon:hover {
            opacity: 1;
        }
        .dropZone {
            position: absolute;
            height: 100%;
            width: 100%;
            top:0;
            border: 0.5px solid red;
            z-index: 500;
        }
        #app {
            width: 100%;
            padding: 10px;
        }
    </style>

    <div id="app">

        <div class="box control" style="display: none;">
            <div>
                <select onchange="app.changeDate('preset',this.value)" id="datePicklist">
                    <option value="CURRENT FY">CURRENT FY</option>
                    <option value="PREVIOUS FY">PREVIOUS FY</option>
                    <option value="NEXT FY">NEXT FY</option>
                    <option value="PAST AND NEXT 6 MONTHS">PAST AND NEXT 6 MONTHS</option>
                    <option value="LAST 12 MONTHS">LAST 12 MONTHS</option>
                    <option value="NEXT 12 MONTHS">NEXT 12 MONTHS</option>
                    <option value="CUSTOM" disabled="true" hidden="true">CUSTOM</option>
                </select>
            </div>
            <!--<div style="padding-top: 8px" id="orOption">- OR -</div>-->
            <!--<div class="switch" ><i v-bind:class="{ app.preset ? 'far fa-calendar-alt' : 'fas fa-bars'}"></i></div>-->
            <div class="switch" ><i class="far fa-calendar-alt"></i></div>

            <!--<div class="customDates" onchange="app.checkGo()">-->
                    <!--<div style="padding-top: 8px;">FROM:</div>-->
                    <!--<div><input id="start" type="date" style="width: 160px;" min="2015-10-01" v-model="startDate"/></div>-->
                    <!--<div style="padding-top: 8px;">TO:</div>-->
                    <!--<div><input id="end" type="date" style="width: 160px;" min="2015-10-01" v-model="endDate"/></div>-->
                    <!--<span v-if="showGo">-->
                        <!--<div><input style="margin-top: 4px;" class="customButton" type="button" value="GO"/></div>-->
                    <!--</span>-->
            <!--</div>-->
            <div></div>
            <div style="text-align: right;"><apex:image url="{!$Resource.LiveGroupNewLogo}" height="30" /></div>
        </div>

        <!--<div class="box" style="position: sticky; top: 8px;z-index:100;">-->
        <div class="box" style="position: sticky;">
            <div class="splitTwo">
                <div class="title">REVENUE {{period}}</div>
                <div class="optionsHolder">
                    <div class="options">
                        <div class="option confirmed">CONFIRMED</div>
                        <div class="option weighted">WEIGHTED</div>
                        <div class="option pipeline">PIPELINE</div>
                        <div class="option target">BUDGET</div>
                    </div>
                </div>
            </div>
            <div class="splitTwo">
                <div class="boxLite">
                    <div id="revenueBar" class="graph"></div>
                </div>
                <div class="boxLite">
                    <div id="revenueLine" class="graph"></div>
                </div>
            </div>
        </div>

        <div class="box">
            <div class="splitTwo">
                <div class="title">GROSS PROFIT {{period}}</div>
                <div class="optionsHolder">
                    <div class="options">
                        <div class="option confirmed">CONFIRMED</div>
                        <div class="option weighted">WEIGHTED</div>
                        <div class="option pipeline">PIPELINE</div>
                        <div class="option opex">OPEX</div>
                    </div>
                </div>
            </div>
            <div class="splitTwo">
                <div class="boxLite">
                    <div id="profitBar" class="graph"></div>
                </div>
                <div class="boxLite">
                    <div id="profitLine" class="graph"></div>
                </div>
            </div>
        </div>

        <div class="box">
            <div class="splitTwo">
                <div class="title">OPERATING COSTS {{period}}</div>
                <div class="optionsHolder">
                    <div class="options">
                        <div class="optionLong">
                            <div class="opex">FORECAST OPEX</div>
                            <div class="miniOptions">
                                <div class="pipeline miniOption">PAYROLL</div>
                                <div class="target miniOption">IT</div>
                                <div class="weighted miniOption">BUS DEV</div>
                                <div class="confirmed miniOption">OTHER</div>
                            </div>

                        </div>
                        <div class="option target">BUDGETED OPEX</div>
                    </div>
                </div>
            </div>
            <div class="splitTwo">
                <div class="boxLite">
                    <div id="opexBar" class="graph"></div>
                </div>
                <div class="boxLite">
                    <div id="opexLine" class="graph"></div>
                </div>
            </div>
        </div>


        <div class="box">
            <div class="splitTwo">
                <div class="title">NET PROFIT {{period}}</div>
                <div class="optionsHolder">
                    <div class="options">
                        <div class="option confirmed">CONFIRMED</div>
                        <div class="option weighted">WEIGHTED</div>
                        <div class="option pipeline">PIPELINE</div>
                    </div>
                </div>
            </div>
            <div class="splitTwo">
                <div class="boxLite">
                    <div id="netProfitBar" class="graph"></div>
                </div>
                <div class="boxLite">
                    <div id="netProfitLine" class="graph"></div>
                </div>
            </div>
        </div>

        <div class="box">
            <div class="splitTwo">
                <div class="title">TOTAL CONFIRMED FIGURES {{period}}</div>
                <div class="optionsHolder">
                    <!--<div class="options">-->
                        <!--<div class="option confirmed">Confirmed</div>-->
                        <!--<div class="option weighted">Weighted</div>-->
                        <!--<div class="option pipeline">Pipeline</div>-->
                        <!--<div class="option target">Target</div>-->
                    <!--</div>-->
                </div>
            </div>
            <div class="splitFour">
                <div class="boxLite">
                    <div class="labelBlock">Revenue</div>
                    <div class="valueBlock" v-bind:style="{ color : graphData.totals.revenue < 0 ? 'red' : ''}">
                        {{'£' + Math.abs(graphData.totals.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                </div>
                <div class="boxLite">
                    <div class="labelBlock">Gross profit</div>
                    <div class="valueBlock" v-bind:style="{ color : graphData.totals.profit < 0 ? 'red' : ''}">
                        {{'£' + Math.abs(graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                </div>
                <div class="boxLite">
                    <div class="labelBlock">Operating cost</div>
                    <div class="valueBlock" v-bind:style="{ color : graphData.totals.opex < 0 ? 'red' : ''}" >
                        {{'£' + Math.abs(graphData.totals.opex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                </div>
                <div class="boxLite">
                    <div class="labelBlock">Net profit</div>
                    <div class="valueBlock" v-bind:style="{ color : graphData.totals.netProfit < 0 ? 'red' : ''}" >
                        {{'£' + Math.abs(graphData.totals.netProfit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                    </div>
                </div>
            </div>
            <span v-if="showChanges">
                <div class="splitFour">
                    <div class="boxLite">
                        <div class="labelBlock">Change last 7 days</div>
                        <div class="valueBlock" >
                            {{'£' + Math.abs(graphData.totals.revenue).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Change last 7 days</div>
                        <div class="valueBlock" >
                            {{'£' + Math.abs(graphData.totals.profit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Change last 7 days</div>
                        <div class="valueBlock" >
                            {{'£' + Math.abs(graphData.totals.opex).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                    <div class="boxLite">
                        <div class="labelBlock">Change last 7 days</div>
                        <div class="valueBlock" >
                            {{'£' + Math.abs(graphData.totals.netProfit).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                        </div>
                    </div>
                </div>
            </span>
        </div>

        <div class="box">
            <div class="splitTwo">
                <div class="title" id="flowManagerTitle" >
                    <span>{{ showManager ? 'CASH FLOW NEXT 3 MONTHS' : 'CASH FLOW ' + period}}</span>
                    <span v-if="manageAllowed">
                        <i class="fas manageFlowIcon" v-bind:class=" showManager ? 'fa-window-close' : 'fa-edit'" v-on:click="showManagerSection()"></i>
                        <!--<input class="customButton" type="button" value="MANAGE" v-on:click="showManagerSection()"/>-->
                        <!--<input class="customButton" type="button" value="MAKE SORTABLE" ONCLICK="makeDraggable()"/>-->
                        <span v-on:click="toggleManaging()"> --- MANAGE  --- </span>
                    </span>
                </div>

                <div class="optionsHolder">
                    <div class="options">
                        <div class="option confirmed">CONFIRMED</div>
                        <div class="option weighted">WEIGHTED</div>
                        <div class="option pipeline">PIPELINE</div>
                        <div class="option target">BUDGET</div>
                    </div>
                </div>
            </div>
            <div class="boxLite">
                <div id="cashFlowLine" class="graph"></div>
            </div>

            <template v-if="showManager">

                <div class="boxLite" v-bind:class="managing ? 'scroll' : ''">

                    <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="week">
                        <div class="column ">WEEK COMMENCING</div>
                        <template v-for="week in cashflowData['WEEK COMMENCING']">
                            <div class="week flowDate" v-bind:class="managing ? 'weekLarge' : 'weekSmall'">
                                {{ new Date(week).toDateString().substring(0,10)}}
                            </div>
                        </template>
                    </div>
                    <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                        <div class="column">OPENING BALANCE</div>
                        <template v-for="balance in cashflowData['OPENING BALANCE']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </template>

                    </div>

                    <template v-if="!managing">

                    <template v-for="value in Object.keys(cashflowData['IN ENTRIES'])">
                        <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">

                            <div class="column noSpill">{{value}}</div>

                            <template v-for="week in Object.keys(cashflowData['IN ENTRIES'][value])">
                                <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                     v-bind:style=" !cashflowData['IN ENTRIES'][value][week] ? 'color: white;' : '' ">

                                        <div>{{'£' + cashflowData['IN ENTRIES'][value][week].toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}</div>
                                </div>
                            </template>
                        </div>
                    </template>
                    </template>


                    <template v-if="managing">

                            <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">

                                <div class="column noSpill largeCol" style="font-size: 70px;position:sticky;top:4px;">IN </div>

                                <template v-for="week in Object.keys(cashflowData['WEEK COMMENCING'])">
                                    <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                         v-on:dragover="dragenter()"
                                         v-bind:id="'IN' + week">
                                        <div class="sortable" >
                                            <template v-for="record in cashflowData['RECORDS']">
                                                <template v-if="record.WeekId__c == 'IN' + week">
                                                    <div class="record" draggable="true"
                                                         v-bind:data-id="record.Id"
                                                         v-bind:data-amount="record.Amount__c"
                                                         v-bind:data-type="'IN'">

                                                        <div >{{record.Description__c}}</div>
                                                        <div style="font-weight: bold;text-align: right;">
                                                            {{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                        </div>
                                        <div style="width:100%;font-weight:bolder;position: absolute;bottom: 20px;font-size: 40px;opacity: 0.3;z-index:1;">
                                            {{ new Date(week).toDateString().substring(0,10)}}
                                        </div>
                                        <div v-bind:class="dragging ? 'dropZone' : ''" v-bind:id="'IN' + week"
                                             v-bind:data-type="'IN'" v-bind:data-week="week"></div>
                                    </div>
                                </template>
                            </div>
                    </template>



                    <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="inflowsTotal">
                        <div class="column">TOTAL INFLOWS <i class="fas fa-random"></i></div>
                        <template v-for="balance in cashflowData['TOTAL INFLOW']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                                {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </template>
                    </div>

                    <!-- PAYMENT RUN -->
                    <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                        <div class="column noSpill">Payment run</div>
                        <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payment run']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" !balance ? 'color: white;' : '' ">
                                <template v-if="!managing">
                                    {{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </template>
                                <template v-if="managing">

                                    <div class="sortable">
                                        <template v-for="record in cashflowData['RECORDS']">
                                            <template v-if="record.WeekId__c == 'Payment run' + index">
                                                <div class="record" draggable="true" >

                                                    <div >{{record.Description__c}}</div>
                                                    <div style="font-weight: bold;text-align: right;">
                                                        {{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                    </div>
                                                </div>
                                            </template>
                                        </template>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>

                    <!-- DIRECT DEBITS -->
                    <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                        <div class="column noSpill">Payment run</div>
                        <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Direct debit']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" !balance ? 'color: white;' : '' ">
                                <template v-if="!managing">
                                    {{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </template>
                                <template v-if="managing">

                                    <div class="sortable">
                                        <template v-for="record in cashflowData['RECORDS']">
                                            <template v-if="record.WeekId__c == 'Direct debit' + index">
                                                <div class="record" draggable="true" >

                                                    <div >{{record.Description__c}}</div>
                                                    <div style="font-weight: bold;text-align: right;">
                                                        {{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                    </div>
                                                </div>
                                            </template>
                                        </template>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>

                    <!--PAYROLL-->
                    <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">

                        <div class="column noSpill">Payroll</div>
                        <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Payroll']">

                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" !balance ? 'color: white;' : '' ">
                                <template v-if="!managing">

                                    {{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </template>
                                <template v-if="managing">

                                    <div class="sortable">
                                        <template v-for="record in cashflowData['RECORDS']">
                                            <template v-if="record.WeekId__c == 'Payroll' + index">
                                                <div class="record" draggable="true" id="999">

                                                    <div >{{record.Description__c}}</div>
                                                    <div style="font-weight: bold;text-align: right;">
                                                        {{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                    </div>
                                                </div>
                                            </template>
                                        </template>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>

                    <!--FREELANCER-->
                    <div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">
                        <div class="column noSpill">Freelancers</div>
                        <template v-for="(balance, index) in cashflowData['OUT ENTRIES']['Freelancers']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" !balance ? 'color: white;' : '' ">
                                <template v-if="!managing">
                                    {{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                </template>
                                <template v-if="managing">

                                    <div class="sortable">
                                        <template v-for="record in cashflowData['RECORDS']">
                                            <template v-if="record.WeekId__c == 'Payroll' + index">
                                                <div class="record" draggable="true" >

                                                    <div >{{record.Description__c}}</div>
                                                    <div style="font-weight: bold;text-align: right;">
                                                        {{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                                                    </div>
                                                </div>
                                            </template>
                                        </template>
                                    </div>
                                </template>
                            </div>
                        </template>
                    </div>

                    <!--<template v-for="value in Object.keys(cashflowData['OUT ENTRIES'])">-->
                        <!--<div class="row" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="opening">-->

                            <!--<div class="column noSpill">{{value}}</div>-->
                            <!--<template v-for="(balance, index) in cashflowData['OUT ENTRIES'][value]">-->

                                    <!--<div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"-->
                                         <!--v-bind:style=" !balance ? 'color: white;' : '' ">-->
                                        <!--<template v-if="!managing">-->

                                        <!--{{'£' + balance.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}-->
                                        <!--</template>-->
                                        <!--<template v-if="managing">-->

                                            <!--<div class="sortable">-->
                                                <!--<template v-for="record in cashflowData['RECORDS']">-->
                                                    <!--<template v-if="record.WeekId__c == value + index">-->
                                                        <!--<div class="record" draggable="true" ondragstart="makeDraggable()">-->

                                                            <!--<div >{{record.Description__c}}</div>-->
                                                            <!--<div style="font-weight: bold;text-align: right;">-->
                                                                <!--{{'£' + record.Amount__c.toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}-->
                                                            <!--</div>-->
                                                        <!--</div>-->
                                                    <!--</template>-->
                                                <!--</template>-->
                                            <!--</div>-->
                                        <!--</template>-->
                                    <!--</div>-->
                            <!--</template>-->

                        <!--</div>-->
                    <!--</template>-->

                    <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="outflowsTotal">
                        <div class="column">TOTAL OUTFLOWS</div>
                        <template v-for="balance in cashflowData['TOTAL OUTFLOW']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                            {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </template>
                    </div>
                    <div class="row bold" v-bind:class="managing ? 'rowGrow' : 'rowTight'" id="closing">
                        <div class="column">CLOSING BALANCE</div>
                        <template v-for="balance in cashflowData['CLOSING BALANCE']">
                            <div class="week" v-bind:class="managing ? 'weekLarge' : 'weekSmall'"
                                 v-bind:style=" balance < 0 ? 'color: red;' : '' ">
                            {{'£' + Math.abs(balance).toFixed(0).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")}}
                            </div>
                        </template>
                    </div>


                </div>
            </template>

        </div>

        <br/>

        <button onclick="app.showReport = !app.showReport;">{{ !showReport ? 'SHOW' : 'HIDE'}}</button>

        <span v-if="showReport">
            <div class="dimmer" onclick="app.showReport = false;"></div>
            <div class="report box">
                <div class="title">REVENUE REPORT {{period}}</div>
                <div v-for="todo in todos">
                    <apex:pageBlock>{{ todo.text }}</apex:pageBlock>
                </div>
            </div>
        </span>

        <br/>


    </div>
    <script>

        var app = new Vue({
            el: '#app',
            data: {
                period : 'CURRENT FY',
                today : '',
                yearText : '',
                startDate : '',
                endDate : '',
                // iterator : '',
                // cashIterator : '',
                graphData : '',
                cashGraphData : '',
                cashflowData : '',

                showGo : false,
                showReport : false,
                showChanges : true,
                preset : true,
                manageAllowed : true,
                showManager : false,
                managing : false,
                manageIn : false,
                manageOut : false,
                sortable : false,
                dragging : false,
                cashflowSort : {
                    revenue : false,
                    paymentRun : false,
                    freelancers : false,
                    directDebits : false,
                    costOfSale : false
                },

                brand : {
                    main : '#262d3f',
                    second : '#2d7175',
                    third : '#60c5c1',
                    payroll : '#A08794',
                    iT : '#A08794',
                    busDev : '#D1BECF',
                    other : '#C9B6BE',
                    revenue : {
                        main : '#235b76',
                        second : '#307fa4',
                        third : '#43b0e2'
                    },
                    profit : {
                        main : '#498a88',
                        second : '#5fb4b2',
                        third : '#81f3f1'
                    },
                    opex : {
                        main : '#b13077',
                        second : '#ef43a1',
                        third : '#ff48ac'
                    },
                    netProfit : {
                        main : '#726985',
                        second : '#9085a9',
                        third : '#b2a5d1'
                    },
                    cashFlow : {
                        main : '#276684',
                        second : '#368eb7',
                        third : '#43b0e2'
                    }

                }
            },
            methods: {
                toggleManaging : function(){
                    app.managing = !app.managing;
                    if (app.managing){
                        this.$nextTick(function() {
                            this.makeDraggable();
                        });
                    }

                },
                changeDate : function(type, val){
                    if (type === 'preset') {
                        app.period = val;

                        if (val === 'CURRENT FY'){
                            app.startDate   = new Date(app.yearText, 3, 1);
                            app.endDate     = new Date(app.yearText + 1, 2, 31);
                            app.showChanges = true;
                        } else if (val === 'NEXT FY'){
                            app.startDate   = new Date(app.yearText + 1, 3, 1);
                            app.endDate     = new Date(app.yearText + 2, 2, 31);
                            app.showChanges = true;
                        } else if (val === 'PREVIOUS FY'){
                            app.startDate   = new Date(app.yearText - 1, 3, 1);
                            app.endDate     = new Date(app.yearText, 2, 31);
                            app.showChanges = false;
                        } else if (val === 'PAST AND NEXT 6 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -6, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() +6, 0);
                            app.showChanges = false;
                        } else if (val === 'LAST 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth() -12, 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth(), 0);
                            app.showChanges = false;
                        } else if (val === 'NEXT 12 MONTHS'){
                            app.startDate   = new Date(app.today.getFullYear(), app.today.getMonth(), 1);
                            app.endDate     = new Date(app.today.getFullYear(), app.today.getMonth() + 11, 0);
                            app.showChanges = false;
                        }
                    } else if (type === 'datePicker'){
                        app.showChanges = false;
                        document.getElementById('snapshots').style.visibility = 'hidden';

                        app.startDate   = new Date(document.getElementById('start').value);
                        app.endDate     = new Date(document.getElementById('end').value);

                        document.getElementById('datePicklist').value = 'CUSTOM';

                    }
                    app.loadData();
                },

                checkGo : function(){
                    if (typeof app.startDate === 'string' && typeof app.endDate === 'string' &&
                        Date.parse(app.startDate) && Date.parse(app.endDate) &&
                        Date.parse(app.startDate) <= Date.parse(app.endDate)){
                        app.showGo = true;
                    } else {
                        app.showGo = false;
                    }
                },
                showManagerSection : function(){
                    if (!app.showManager){
                        app.showManager = true;
                        app.drawLine('cashFlow', app.cashflowData['CASHFLOW']);
                    } else {
                        app.showManager = false;
                        app.drawLine('cashFlow', app.cashGraphData);
                    }
                },
                loadData : function(){

                    // step 1: get all performance figures
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getOppRevenueTotals}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            var iterator = Object.keys(result['revenue']);
                            app.graphData = result;
                            app.drawBar('revenue',app.graphData['revenue'], iterator);
                            app.drawLine('revenue', app.graphData['revenue'], iterator);
                            app.drawBar('profit', app.graphData['profit'], iterator);
                            app.drawLine('profit', app.graphData['profit'], iterator);
                            app.drawBar('opex', app.graphData['opex'], iterator);
                            app.drawLine('opex', app.graphData['opex'], iterator);
                            app.drawBar('netProfit', app.graphData['netProfit'], iterator);
                            app.drawLine('netProfit', app.graphData['netProfit'], iterator);
                        }, {
                            escape : true
                        }
                    );

                    // step 2: get all cashflow figures
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getBalances}',
                        this.startDate,
                        this.endDate,
                        function (result) {
                            app.cashGraphData = result;
                            app.drawLine('cashFlow', app.cashGraphData);
                        }, {
                            escape : true
                        }
                    );


                    // step 2: get all cashflow data
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getCashflowData}',
                        function (result) {
                            app.cashflowData = result;
                            console.log(result);
                        }, {
                            escape : true
                        }
                    );

                },

                add : function(){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueTestController.getOppsApex}',
                        function (result, event) {
                            if (event.status) {
                                for (var x = 0; x < result.length; x++){
                                    app.todos.push({text: result[x].Name});
                                }
                            }
                        }, {
                            escape : true
                        }
                    );
                },

                drawBar : function(type, graphData, iterator) {

                    google.charts.load('current', {
                        'packages': ['corechart', 'bar'], 'callback': function () {

                            var chartData = new google.visualization.DataTable();
                            chartData.addColumn('string', 'Amount');
                            chartData.addColumn('number', 'Confirmed');
                            chartData.addColumn('number', 'Weighted');
                            chartData.addColumn('number', 'Pipeline');

                            // var source = (isRevSnapshot) ? revenueTotalsSnapshot : revenueTotals;

                            iterator.forEach(function (element) {
                                // var elOne = graphData[type][element][0];
                                // var elTwo = graphData[type][element][1];
                                // var elThree = graphData[type][element][2];


                                var elOne = graphData[element][0];
                                var elTwo = graphData[element][1];
                                var elThree = graphData[element][2];

                                //
                                // if (!revWeighted && revPipeline) {
                                //     elThree = source[element][1] + source[element][2];
                                // }

                                chartData.addRow([element, elOne, elTwo, elThree]);
                            });

                            var options = {
                                series: {
                                    0: {
                                        // color: app.brand[type].main,
                                        color: app.brand.main,
                                        format: '£#,###',
                                        enableInteractivity: false,
                                        tooltip: "none"
                                    },
                                    1: {
                                        // color: app.brand[type].second,
                                        color: app.brand.second,
                                        format: '£#,###',
                                        enableInteractivity: false,
                                        tooltip: "none"
                                    },
                                    2: {
                                        // color: app.brand[type].third,
                                        color: app.brand.third,
                                        format: '£#,###',
                                        enableInteractivity: false,
                                        tooltip: "none"
                                    },
                                    3: {
                                        color: "transparent",
                                        enableInteractivity: true,
                                        tooltip: "none",
                                        annotations: {
                                            stem: {
                                                color: "transparent"
                                            },
                                            textStyle: {
                                                color: 'black',
                                                fontSize: 12.5
                                            }
                                        }
                                    }
                                },
                                isStacked: true
                            };

                            options = Object.assign(app.getOptions(), options);

                            var view = new google.visualization.DataView(chartData);
                            view.setColumns([0,
                                1,
                                2,
                                3, {
                                    calc: function (dt, row) {
                                        return 0;
                                    },
                                    label: "Total",
                                    type: "number"
                                },
                                {
                                    calc: function (dt, row) {
                                        return '£' + ((dt.getValue(row, 1) + dt.getValue(row, 2) + dt.getValue(row, 3)) / 1000).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                                    },
                                    type: "string",
                                    role: "annotation"
                                }
                            ]);

                            var chart = new google.visualization.ColumnChart(document.getElementById(type + 'Bar'));

                            var formatter = new google.visualization.NumberFormat({
                                prefix: '£'
                            });
                            formatter.format(chartData, 1);
                            formatter.format(chartData, 2);
                            formatter.format(chartData, 3);
                            chart.draw(view, options);

                        }
                    });
                },
                drawLine : function(type, graphData, iterator){
                    google.charts.load('current', {
                        packages: ['corechart', 'line'],'callback': function () {

                            var chartData = new google.visualization.DataTable();

                            var confirmed   = 0;
                            var pipeline    = 0;
                            var budget      = 0;
                            var measure     = 0;

                            if (type === 'cashFlow'){
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Budget');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Confirmed');

                                // iterator.forEach(function (element) {
                                Object.keys(graphData).forEach(function (element) {
                                    var elOne = graphData[element][3];
                                    var elTwo = graphData[element][2];
                                    var elThree = graphData[element][1];

                                    chartData.addRow([graphData[element][0], elOne, elTwo, elThree]);
                                });
                            } else {
                                chartData.addColumn('string', 'Date');
                                chartData.addColumn('number', 'Target');
                                chartData.addColumn('number', 'Pipeline');
                                chartData.addColumn('number', 'Weighted');
                                chartData.addColumn('number', 'Confirmed');

                                // iterator.forEach(function (element) {
                                //     var elOne = graphData[element][6];
                                //     var elTwo = graphData[element][5];
                                //     var elThree = graphData[element][4];
                                //     //
                                //     // if (!revWeighted && revPipeline) {
                                //     //     elThree = source[element][1] + source[element][2];
                                //     // }
                                //
                                //     chartData.addRow([element, graphData[element][3], elOne, elTwo, elThree]);
                                // });

                                iterator.forEach(function (element) {

                                    confirmed   += graphData[element][0];
                                    pipeline    += graphData[element][1];
                                    budget      += graphData[element][2];
                                    measure     += graphData[element][2];

                                    chartData.addRow([element, measure, confirmed, pipeline, budget]);
                                });


                            }

                            // iterator.forEach(function (element) {
                            //
                            //     var elThree = (revPipeline) ? source[element][6] : null;
                            //     var elTwo = (revWeighted) ? source[element][5] : null;
                            //     var elOne = (revConfirmed) ? source[element][4] : null;
                            //
                            //     data.addRow([element, source[element][3], elThree, elTwo, elOne]);
                            // });

                            var options = {
                                lineWidth: 1,
                                series: {
                                    0: {
                                        color: '#556B2F',
                                        format: '£#,###'
                                    },
                                    1: {
                                        // color: app.brand[type].main,
                                        color: app.brand.main,
                                        format: '£#,###'
                                    },
                                    2: {
                                        // color: app.brand[type].second,
                                        color: app.brand.second,
                                        format: '£#,###'
                                    },
                                    3: {
                                        // color: app.brand[type].third,
                                        color: app.brand.third,
                                        format: '£#,###'
                                    }
                                }
                            };

                            options = Object.assign(app.getOptions(), options);

                            var chart = new google.visualization.AreaChart(document.getElementById(type + 'Line'));
                            var formatter = new google.visualization.NumberFormat({
                                prefix: '£'
                            });
                            formatter.format(chartData, 1);
                            formatter.format(chartData, 2);
                            formatter.format(chartData, 3);

                            chart.draw(chartData, options);
                        }
                    });
                },
                getOptions : function(){
                    return {
                        fontName: 'Salesforce Sans',
                        fontSize: 13,
                        height: '370px',
                        hAxis: {
                            format: 'MMM d',
                            height: '30px',
                            slantedText: true,
                            slantedTextAngle: 30
                        },
                        vAxis: {
                            format: 'short'
                        },
                        chartArea: {
                            width: '90%',
                            height: '80%',
                            right: 5,
                            top: 5
                        },
                        legend: {
                            position: 'none',
                            bold: true,
                            alignment: 'center',
                            fontSize: 8
                        },
                        animation: {
                            duration: 500,
                            easing: 'inAndOut',
                            startup: true
                        }
                    }
                },
                makeDraggable : function() {

                    var oldList, newList, item;
                    $('.sortable').sortable({
                        start: function(event, ui) {
                            item = ui.item;
                            newList = oldList = ui.item.parent().parent();
                            console.log('drag started');
                            app.dragging = true;
                        },
                        stop: function(event, ui) {
                            app.dragging = false;
                        },
                        change: function(event, ui) {
                            if(ui.sender) newList = ui.placeholder.parent().parent();
                        },
                        connectWith: ".sortable"
                    }).disableSelection();

                    app.sortable = true;

                    $( '.sortable' ).droppable({
                        drop: function( event, ui ) {

                            // console.log(event);
                            console.log(event.target.firstElementChild.dataset.id);
                            console.log(event.target.firstElementChild.dataset.amount);
                            console.log(event.target.firstElementChild.dataset.type);

                            console.log(event.toElement.id);
                            console.log(event.toElement.dataset.type);
                            console.log(event.toElement.dataset.week);

                            var type = event.target.firstElementChild.dataset.type;

                            if (type == 'IN'){

                                for (var x = parseInt(event.toElement.dataset.week); x < 12; x++){
                                    app.cashflowData['TOTAL INFLOW'][x] -= event.target.firstElementChild.dataset.amount;

                                    console.log('updating amount');

                                }

                            }


                        }
                    });

                }

            },
            beforeMount() {

                // set default date range
                this.today       = new Date();
                this.yearText    = (this.today.getMonth() + 1 > 3) ? this.today.getFullYear() : this.today.getFullYear() -1;
                this.startDate   = new Date(this.yearText, 3, 1);
                this.endDate     = new Date(this.yearText + 1, 2, 31);

                <!--Visualforce.remoting.Manager.invokeAction(-->
                    <!--'{!$RemoteAction.VueTestController.getOppsApex}',-->
                    <!--function (result, event) {-->
                        <!--if (event.status) {-->
                            <!--for (var x = 0; x < result.length; x++){-->
                                <!--app.todos.push({text: result[x].Name});-->
                            <!--}-->
                        <!--}-->
                    <!--}, {-->
                        <!--escape : true-->
                    <!--}-->
                <!--);-->

                this.loadData();
            }
        });

        Vue.nextTick(function(){
            console.log('something has happened');
        });

    </script>
    </html>

</apex:page>
