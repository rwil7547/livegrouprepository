<!--
 - Created by Ronan Williams on 13/03/2019.
 -->

<apex:page id="resourceExperiment" lightningStylesheets="true" controller="resourceExperimentController">

    <html xmlns:v-bind="http://vue.org" xmlns:v-on="http://vue.org">
    <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous"/>

    <style>

        body {
            background-image: url("{!$Site.BaseUrl}/_slds/images/themes/lightning_blue/lightning_blue_background.png");
            background-size: 100%;
            background-repeat: no-repeat;
            background-position: top;
            background-color: #B0C4DF;
            background-attachment: fixed;
        }
        .box {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            padding: 10px;
            padding-left: 20px;
            background-color: white;
            border: 0.5px solid grey;
            margin-top: 10px;
            min-height: 300px;
            height: auto;
            position: relative;
            display: flex;
            flex-direction: column;

        }
        .entityHolder {
            width:97%;
        }
        .dayPanelHolder {
            width:97%;
            height: auto;
            min-height: 50px;
            position: relative;
            display: flex;
            flex-direction: column-reverse;
            border-top: 0.5px solid lightgrey;
        }
        .dayPanel {
            height: 100%;
            width:4%;
            position: relative;
            border-left: 0.2px solid lightgrey;
        }
        .weekend {
            background-color: #eaeaea;
            width: 100%;
            height: 100%;
        }
        .bottomPanel {
            bottom: 15px;
            width: 97%;
            height: 30px;
            padding-top: 10px;
            display: flex;
            border-top: 0.5px solid black;
        }
        .day {
            width: 4%;
            margin-bottom: 5px;
            -ms-transform: rotate(320deg); /* IE 9 */
            -webkit-transform: rotate(320deg); /* Safari 3-8 */
            transform: rotate(320deg);
            text-align: left;
            font-size: 10px;
        }
        .opp {
            height: 18px;
            padding: 1px;
            background-color: lightblue;
            z-index: 30;
            border-radius: 3px;
            border: 0.5px solid grey;
            position: absolute;
            width: 40px;
            cursor: pointer;
            padding-left: 4px;
        }
        .opp:hover {
            width: 200px;
            overflow: visible;
            z-index: 20;
        }
        .control {
            position: sticky;
            top: 5px;
            display: grid;
            grid-template-columns: 20% 5% 30% 35% 10%;
        }

        .noSpill {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .dimmer {
            position: fixed;
            left: 0;
            right: 0;
            bottom: 0;
            top: 0;
            margin: auto;
            height: 100vh;
            width: 100vw;
            background-color: white;
            opacity: 0.75;
        }
        #app {
            width: 100%;
            padding: 10px;
        }

        .row {
            width: 100%;
            height: 22px;
        }
        .backdropDayHolder {
            position: absolute;
            left: 10px;
            display: flex;
        }
        .monthTitle {
            font-size: 20px;
            font-weight: bolder;
        }
    </style>

    <body>
        <div id="app" style="width: 100%; position: relative;">
                <div v-for="month in months" class="box">
                    <!--<div>{{month.name}} rows is {{month.rows.length}} and keys are {{month}}</div>-->
                    <div class="monthTitle">{{month.name}}</div>


                    <!--ONE OF THESE FOR EACH ITERATOR-->

                    <template v-for="value in month.stageKeys" v-if="value.rows.length != 0">
                    <!--<template v-for="(value, key, index) in month.stageKeys" >-->
                    <!--<template v-for="(list, key) in Array.from(month.stageKeys)" >-->

                        <!--{{value.rows}}-->
                        <!--{{ value }} - {{ key }} - {{ index }}-->

                        {{value.name}}
                        <div class="dayPanelHolder">

                            <!--<template v-for="row in month.rows">-->
                            <!--<template v-for="row in key.rows">-->
                            <template v-for="row in value.rows">
                                <!--{{row.daysTaken}}-->
                                <div class="row">
                                    <div class="entityHolder">
                                        <template v-for="opp in row.opps" >
                                            <div class="opp noSpill" draggable="false"
                                                 v-bind:style="{ backgroundColor : opp.StageName == 'Closed Won' ? '#80a9ed' : '#f4dd9c',
                                                         width : opp.length > 0 ? (opp.length * (100/month.days.length)) + '%' : 100/month.days.length + '%',
                                                         marginLeft : (opp.offset * (100/month.days.length)) + '%'}">
                                                {{opp.StageName}} {{opp.Name}}
                                            </div>
                                        </template>

                                    </div>
                                </div>
                            </template>

                            <!--{{month.stageKeys}}-->

                            <!--<div style="display: flex;position: relative;height: 100px;">-->
                            <!--<div v-for="day in month.days" class="dayPanel">-->
                            <!--<div v-if="day.weekend" class="weekend"></div>-->
                            <!--</div>-->
                            <!--</div>-->
                        </div>


                    </template>

                    <!--END ONE OF THESE FOR EACH ITERATOR-->








                    <div class="bottomPanel">
                        <div v-for="day in month.days" class="day">{{day.dayOfWeek + ' ' + day.day}}</div>
                    </div>
                </div>
        </div>
    </body>

    <script>

        // step 1: create a box for each month in the next 12 months

        // step 2: for each box, add elements for each day
        var app = new Vue({
            el: '#app',
            data: {
                months : [],
                categories : ['all','stage','person','type'],
                opps : []
            },
            methods: {

                checkGo : function(){

                },
                sortData : function() {



                    var entryDate = new Date();
                    entryDate.setDate(1);

                    for (var x = 0; x < 12; x++) {

                        entryDate.setMonth(x);

                        var month = {
                            month : entryDate,
                            name : entryDate.toString().slice(4, 8) + ' ' + entryDate.toString().slice(10, 15),
                            days : [],
                            stageKeys : {
                                'Repeat Prospect' : {name : 'Repeat Prospect',rows :[]},
                                'Pipeline prospect' : {name : 'Pipeline prospect',rows :[]},
                                'Costed prospect' : {name : 'Costed prospect',rows :[]},
                                'Closed Won' : {name : 'Closed Won',rows :[]}
                            },
                            oppKeys : {},
                            personKeys : {},
                            typeKeys : {},
                            activeKey : 'all'
                        };

                        for (var y = 0; y < parseInt(new Date(entryDate.getFullYear(), entryDate.getMonth() + 1, 0).getDate()); y++){
                            var dayDate = new Date(entryDate.getFullYear(), entryDate.getMonth(), y+1).toString().substring(0,3)
                            month.days.push({
                                day : (y + 1),
                                dayOfWeek : dayDate,
                                weekend : dayDate === 'Sat' || dayDate === 'Sun'
                            });
                        }

                        this.months.push(month);
                    }

                    // load sample data
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.resourceExperimentController.getOpps}',
                        function (result, event) {
                            if (event.status) {
                                this.opps = result;
                                // Vue.set(app, 'opps', result);
                                console.log('assigning result to opps');
                            }
                        }
                    );


                    // load sample data
                    <!--Visualforce.remoting.Manager.invokeAction(-->
                    <!--'{!$RemoteAction.resourceExperimentController.getOpps}',-->
                    <!--function (result, event) {-->
                    <!--if (event.status) {-->

                    // if (!app){
                    //     this.loadData();
                    // }

                    var result = this.opps;

                    console.log('result is' + result);

                    //console.log(response[0]);
                    result.sort(function (a, b) {
                        return b.Lengthjs__c - a.Lengthjs__c
                    });


                    // at this point here we would iterate through all records for each key
                    for (var x = 0; x < result.length; x++) {

                        var month = new Date(result[x].Event_end__c).getMonth();

                        if (app.months[month]) {

                            var stageName = result[x].StageName;

                            // work out the relevant key
                            if (!app.months[month].stageKeys[stageName]) {
                                app.months[month].stageKeys[stageName] = {rows: []};
                            }

                            var rows = app.months[month].stageKeys[stageName].rows;

                            var startDay = new Date(result[x].Event_start__c).getDate();
                            var endDay = new Date(result[x].Event_end__c).getDate();
                            result[x].length = result[x].Lengthjs__c;
                            result[x].offset = startDay - 1;


                            var rowFound = false;

                            // check all existing rows for space
                            for (var r = 0; r < rows.length; r++) {

                                // only continue to check if a free row has not been found
                                if (!rowFound) {

                                    // assume that space is available until it is not
                                    var spaceAvailable = true;

                                    var counter = endDay;

                                    while (counter >= startDay) {
                                        if (spaceAvailable) {
                                            if (rows[r].daysTaken.has(counter)) {
                                                spaceAvailable = false;
                                            }
                                        }
                                        counter = counter - 1;
                                    }

                                    if (spaceAvailable) {
                                        rows[r].opps.push(result[x]);

                                        var upper = endDay;
                                        while (upper >= startDay) {
                                            rows[r].daysTaken.add(upper);
                                            upper = upper - 1;
                                        }

                                        rowFound = true;
                                    }
                                }
                            }

                            if (!rowFound) {
                                var newRow = {
                                    free: false,
                                    opps: [],
                                    daysTaken: new Set()
                                };
                                newRow.opps.push(result[x]);

                                var upper = endDay;
                                while (upper >= startDay) {
                                    newRow.daysTaken.add(upper);
                                    upper = upper - 1;
                                }

                                rows.push(newRow);
                            }
                        }
                    }
                    // }

                    // app.months.forEach(function(element){
                    //     var keys = Object.keys(element.stageKeys);
                    //     for (x = 0; x < keys.length; x++){
                    //         Vue.set(element.stageKeys, keys[x], {rows : element.stageKeys[keys[x]].rows});
                    //     }
                    //     Vue.set(element.stageKeys, '', '');
                    // });

                    //     }, {
                    //         escape : true
                    //     }
                    // );
                    // }
                },
                loadData : function(){
                    // step 1: define months
                    var entryDate = new Date();
                    entryDate.setDate(1);

                    for (var x = 0; x < 12; x++) {

                        entryDate.setMonth(x);

                        var month = {
                            month : entryDate,
                            name : entryDate.toString().slice(4, 8) + ' ' + entryDate.toString().slice(10, 15),
                            days : [],
                            stageKeys : {
                                'Repeat Prospect' : {name : 'Repeat Prospect',rows :[]},
                                'Pipeline prospect' : {name : 'Pipeline prospect',rows :[]},
                                'Costed prospect' : {name : 'Costed prospect',rows :[]},
                                'Closed Won' : {name : 'Closed Won',rows :[]}
                            },
                            oppKeys : {},
                            personKeys : {},
                            typeKeys : {},
                            activeKey : 'all'
                        };

                        for (var y = 0; y < parseInt(new Date(entryDate.getFullYear(), entryDate.getMonth() + 1, 0).getDate()); y++){
                            var dayDate = new Date(entryDate.getFullYear(), entryDate.getMonth(), y+1).toString().substring(0,3)
                            month.days.push({
                                day : (y + 1),
                                dayOfWeek : dayDate,
                                weekend : dayDate === 'Sat' || dayDate === 'Sun'
                            });
                        }

                        this.months.push(month);
                    }

                    // load sample data
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.resourceExperimentController.getOpps}',
                        function (result, event) {
                            if (event.status) {
                                this.opps = result;
                                // Vue.set(app, 'opps', result);
                                console.log('assigning result to opps');
                            }
                        }
                    );

                    this.sortData();

                }
            },
            beforeMount() {
                this.sortData();
            }
        })

    </script>

    </html>
</apex:page>
